/** 
\mainpage Welcome

\section intro_sec Introduction

This documentation contains all C#-specific information for interfacing with Treehopper. For hardware documentation, or for documentation for other languages, visit <a href="http://treehopper.io/Documentation">http://treehopper.io/documentation</a>.


\subsection features Features
Treehopper's C# API is designed to support many different execution contexts; you can integrate it into simple console applications that have 100% binary compatibility under Windows, macOS, Linux, and other UNIX-like operating systems. Treehopper also supports Windows 10 UWP app development, allowing you to write modern, lightweight, touch-friendly applications that run on Windows desktops and laptops, tablets, smartphones, the XBox, and even embedded IoT devices. There's C# support for Android deployments as well (provided by the Xamarin platform). And, of course, there's full support for traditional WPF and Windows Forms-style GUI applications (we even include some helper components for building loosely-coupled MVVM-friendly applications).

\subsection libraries Libraries
In addition to the main API that allows you to manipulate and sample pins on the Treehopper, the C# API also includes an ever-growing library full of drivers for many different peripheral ICs, including IMUs and other sensors; GPIO expanders, DACs and ADCs; LED drivers, character and graphical displays; and motor drivers, rotary encoders, and other motion devices.

\subsection Assemblies
Because so many different execution contexts are supported, Treehopper's C# codebase has to be split across different assemblies. All of these are available on NuGet, or you can always clone the Treehopper SDK repo and build these assemblies from source. Here are the assemblies to keep in mind:

- Treehopper.dll: the base library. Provides GPIO, PWM, I2C, SPI, and base interface support. Exposes the Treehopper namespace. Requires one of these connectors:
    - Treehopper.Desktop.dll: provides platform-agnostic connectivity for traditional console or desktop applications running on Windows, macOS, or Linux. Exposes the Treehopper.Desktop namespace. On Windows, we call into native WinUSB functions provided by Windows; on other platforms, we call into LibUSB functions. If you're running in a non-Windows environment, make sure you have LibUSB runtime libraries installed (this is less critical on Linux, but macOS users will need to install them via brew).
    - Treehopper.Android.dll: provides connectivity for C# Xamarin projects that target Android. Exposes the Treehopper.Android namespace.
    - Treehopper.Uwp.dll: provides connectivity for UWP (Windows Store) apps that can be deployed on all Windows 10 platforms. Exposes the Treehopper.Uwp namespace. This library also provides MVVM-friendly helpers to abstract away some of the tedious state-handling of Treehopper connectivity.
- Treehopper.Libraries.dll: provides support for more than 100 commonly-used ICs and peripherals.
*/