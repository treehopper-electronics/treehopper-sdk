using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

namespace Treehopper
{

    /// <summary>
    /// Select the reference to use for the analog input of the pin
    /// </summary>
    public enum AdcReferenceLevel
    {
        /// <summary>
        /// 3.3V rail generated by on-board LDO, rated at 1.5% accuracy.
        /// </summary>
        VREF_3V3,

        /// <summary>
        /// 1.65V reference rated at 1.8% accuracy. 
        /// </summary>
        VREF_1V65,

        /// <summary>
        /// 1.8V reference. Accuracy TBD.
        /// </summary>
        VREF_1V8,

        /// <summary>
        /// 2.4V reference rated at 2.1% accuracy.
        /// </summary>
        VREF_2V4,

        /// <summary>
        /// 3.3V supply derived from the 1.65V reference rated at 3.6% accuracy.
        /// </summary>
        VREF_3V3_DERIVED,

        /// <summary>
        /// 3.6V reference derived from the 1.8V LDO. Accuracy TBD.
        /// </summary>
        VREF_3V6
    }

    /// <summary>
    /// This is the delegate prototype used for event-driven reading of digital pins.
    /// </summary>
    /// <param name="sender">The Pin that changed</param>
    /// <param name="value">The new value of the pin</param>
    public delegate void OnDigitalInValueChanged(object sender, DigitalInValueChangedEventArgs value);

    /// <summary>
    /// An EventArgs that represents a digital input changing
    /// </summary>
    public class DigitalInValueChangedEventArgs : EventArgs
    {
        /// <summary>
        /// Construct the event argument with the new digital value
        /// </summary>
        /// <param name="newValue">The new digital value</param>
        public DigitalInValueChangedEventArgs(bool newValue) { NewValue = newValue;  }

        /// <summary>
        /// A property representing the new value
        /// </summary>
        public bool NewValue { get; set; }
    }

    internal enum PinConfigCommands
    {
        /// <summary>
        /// Unused command to prevent NULL packets from being processed
        /// </summary>
        Reserved = 0,

        /// <summary>
        /// Make the pin a digital input
        /// </summary>
        MakeDigitalInput,

        /// <summary>
        /// Make the pin a push-pull output
        /// </summary>
        MakePushPullOutput,

        /// <summary>
        /// Make the pin an open-drain output
        /// </summary>
        MakeOpenDrainOutput,

        /// <summary>
        /// Make the pin an analog input
        /// </summary>
        MakeAnalogInput,

        /// <summary>
        /// Set the digital value of the pin
        /// </summary>
        SetDigitalValue,
    }

    /// <summary>
    /// An enumeration representing the different supported modes of this pin.
    /// </summary>
    public enum PinMode
    {
        /// <summary>
        /// Pin is reserved for other use
        /// </summary>
        Reserved,

        /// <summary>
        /// Pin is a digital input
        /// </summary>
        DigitalInput,

        /// <summary>
        /// Pin is a push-pull output
        /// </summary>
        PushPullOutput,

        /// <summary>
        /// Pin is an open-drain output
        /// </summary>
        OpenDrainOutput,

        /// <summary>
        /// Pin is an analog input
        /// </summary>
        AnalogInput,

        /// <summary>
        /// Pin is unassigned
        /// </summary>
        Unassigned
    };

    /// <summary>
    /// Used to send VoltageChanged events from the AnalogIn pin.
    /// </summary>
    /// <param name="sender">The AnalogIn pin that sent that message</param>
    /// <param name="voltage">The new voltage of the AnalogIn pin</param>
    public delegate void OnAnalogVoltageChanged(Pin sender, double voltage);

    /// <summary>
    /// Used to send ValueChanged events from the AnalogIn pin.
    /// </summary>
    /// <param name="sender">The AnalogIn pin that sent that message</param>
    /// <param name="value">The new voltage of the AnalogIn pin</param>
    public delegate void OnAdcValueChanged(Pin sender, int value);

    /// <summary>
    /// Used to send ValueChanged events from the pin.
    /// </summary>
    /// <param name="sender">The pin that sent that message</param>
    /// <param name="value">The new normalized value of the pin</param>
    public delegate void OnAnalogValueChanged(Pin sender, double value);

    /// <summary>
    /// Pin is the base class for all Treehopper pins. It provides core digital I/O (GPIO) functionality.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This class is useful when only core GPIO functions are needed, and the user wishes to make code portable
    /// between pins. While it cannot be instantiated directly by the user, Pin variables can reference existing pins.
    /// </para>
    /// </remarks>
    public class Pin : INotifyPropertyChanged, DigitalInPin, DigitalOutPin, AdcPin, SpiChipSelectPin
    {
        private TreehopperUsb board;
        /// <summary>
        /// This returns a reference to the Treehopper board this pin belongs to.
        /// </summary>
        public TreehopperUsb Board { get { return board; } }

        bool digitalValue;

        private PinMode mode = PinMode.Unassigned;

        /// <summary>
        /// Get or set the mode of the pin.
        /// </summary>
        public PinMode Mode
        {
            get
            {
                return mode;
            }
            set
            {
                if (value == mode)
                    return;
                if(mode == PinMode.Reserved && value != PinMode.Unassigned)
                {
                    throw new Exception("This pin is reserved; you must disable the peripheral using it before interacting with it");
                }

                mode = value;

                switch (mode)
                {
                    case PinMode.AnalogInput:
                        SendCommand(new byte[] { (byte)PinConfigCommands.MakeAnalogInput, (byte)ReferenceLevel });
                        break;
                    case PinMode.DigitalInput:
                        SendCommand(new byte[] { (byte)PinConfigCommands.MakeDigitalInput, 0x00 });
                        break;
                    case PinMode.OpenDrainOutput:
                        SendCommand(new byte[] { (byte)PinConfigCommands.MakeOpenDrainOutput, 0x00 });
                        break;
                    case PinMode.PushPullOutput:
                        SendCommand(new byte[] { (byte)PinConfigCommands.MakePushPullOutput, 0x00 });
                        break;
                }
            }
        }

        public string Name { get; internal set; }

        /// <summary>
        /// Occurs when the input on the pin changes.
        /// </summary>
        /// <remarks>
        /// This event will only fire when the pin is configured as a digital input.
        /// </remarks>
        public event OnDigitalInValueChanged DigitalValueChanged;

        /// <summary>
        /// The pin number of the pin.
        /// </summary>
        public int PinNumber { get; internal set; }

        /// <summary>
        /// The SoftPwm functions associated with this pin.
        /// </summary>
        public SoftPwm SoftPwm { get; internal set;}
        
        internal Pin(TreehopperUsb board, byte pinNumber)
        {
            this.board = board;
            this.PinNumber = pinNumber;
            SoftPwm = new SoftPwm(Board, this);
            AdcValueChangedThreshold = 10;
            AnalogVoltageChangedThreshold = 0.1;
            AnalogValueChangedThreshold = 0.05;
            this.ReferenceLevel = AdcReferenceLevel.VREF_3V3;
            Name = "Pin " + pinNumber; // default name
        }

        /// <summary>
        /// Gets or sets the voltage threshold required to fire the AnalogVoltageChanged event.
        /// </summary>
        public double AnalogVoltageChangedThreshold { get; set; }
        
        /// <summary>
        /// Gets or sets the value threshold required to fire the AdcValueChanged event.
        /// </summary>
        public int AdcValueChangedThreshold { get; set; }

        /// <summary>
        /// Gets or sets the value threshold required to fire the AnalogValueChanged event.
        /// </summary>
        public double AnalogValueChangedThreshold { get; set; }

        /// <summary>
        /// Gets or sets the digital value of the pin.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Setting a value to a pin that is configured as an input will automatically make the pin an output before 
        /// writing the value to it. 
        /// </para>
        /// <para>
        /// The value retrieved from this pin will read as "0" when then pin is being used for other purposes.
        /// </para>
        /// </remarks>
        public bool DigitalValue
        {
            get
            {
                if (Mode == PinMode.Reserved || Mode == PinMode.AnalogInput)
                    Debug.WriteLine(string.Format("NOTICE: Pin {0} must be in digital I/O mode to read from. This call will return 0 always.", PinNumber));

                return digitalValue;
            }
            set
            {
                digitalValue = value;
                if (!(Mode == PinMode.PushPullOutput || Mode == PinMode.OpenDrainOutput))
                    Mode = PinMode.PushPullOutput; // assume they want push-pull
                byte byteVal = (byte)(digitalValue ? 0x01 : 0x00);
                SendCommand(new byte[] { (byte)PinConfigCommands.SetDigitalValue, byteVal});
            }
        }

        /// <summary>
        /// Toggles the output value of the pin.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Calling this function on a pin that is configured as an input will automatically make the pin an output
        /// before writing the value to it.
        /// </para>
        /// </remarks>
        /// <example>
        /// In this example, an LED attached to pin 4 is made to blink.
        /// <code>
        /// Pin led = myTreehopperBoard.Pin4; // create a reference to Pin4 to keep code concise.
        /// led.MakeDigitalOutput();
        /// while(true)
        /// {
        ///     led.Toggle();
        ///     Thread.Sleep(500);
        /// }
        /// </code>
        /// </example>
        public void ToggleOutput()
        {
            DigitalValue = !DigitalValue;
        }


        TaskCompletionSource<bool> digitalSignal = new TaskCompletionSource<bool>();

        /// <summary>
        /// Wait for the digital input value of the pin to change
        /// </summary>
        /// <returns>An awaitable bool, indicating the pin's state</returns>
        public Task<bool> AwaitDigitalValueChange()
        {
            digitalSignal = new TaskCompletionSource<bool>();
            return digitalSignal.Task;
        }

        TaskCompletionSource<int> adcValueSignal = new TaskCompletionSource<int>();
        TaskCompletionSource<double> analogValueSignal = new TaskCompletionSource<double>();
        TaskCompletionSource<double> analogVoltageSignal = new TaskCompletionSource<double>();

        /// <summary>
        /// Wait for the pin's ADC value to change.
        /// </summary>
        /// <returns>An awaitable int, in the range of 0-4095, of the pin's ADC value.</returns>
        public Task<int> AwaitAdcValueChange()
        {
            adcValueSignal = new TaskCompletionSource<int>();
            return adcValueSignal.Task;
        }

        /// <summary>
        /// Wait for the pin's analog voltage to change.
        /// </summary>
        /// <returns>An awaitable double of the pin's analog voltage, measured in volts.</returns>
        public Task<double> AwaitAnalogVoltageChange()
        {
            analogVoltageSignal = new TaskCompletionSource<double>();
            return analogVoltageSignal.Task;
        }

        /// <summary>
        /// Wait for the pin's analog value to change.
        /// </summary>
        /// <returns>An awaitable double of the analog value, normalized from 0-1.</returns>
        public Task<double> AwaitAnalogValueChange()
        {
            analogValueSignal = new TaskCompletionSource<double>();
            return analogValueSignal.Task;
        }

        internal void RaiseDigitalInValueChanged()
        {
            DigitalValueChanged?.Invoke(this, new DigitalInValueChangedEventArgs(digitalValue));

            digitalSignal.TrySetResult(digitalValue);
        }

        internal void RaiseAnalogInChanged()
        {
            if (!prevAdcValue.CloseTo(adcValue, AdcValueChangedThreshold))
            {
                prevAdcValue = adcValue;
                AdcValueChanged?.Invoke(this, adcValue);

                adcValueSignal.TrySetResult(adcValue);

                RaisePropertyChanged("AdcValue");
            }

            if (!prevAnalogVoltage.CloseTo(AnalogVoltage, AnalogVoltageChangedThreshold))
            {
                prevAnalogVoltage = AnalogVoltage;
                AnalogVoltageChanged?.Invoke(this, AnalogVoltage);

                analogVoltageSignal.TrySetResult(AnalogVoltage);

                RaisePropertyChanged("AnalogVoltage");
            }

            if(!prevAnalogValue.CloseTo(AnalogValue, AnalogValueChangedThreshold))
            {
                prevAnalogValue = AnalogValue;
                AnalogValueChanged?.Invoke(this, AnalogValue);

                analogValueSignal.TrySetResult(AnalogValue);

                RaisePropertyChanged("AnalogValue");
            }
        }

        internal void SendCommand(byte[] cmd)
        {
            byte[] data = new byte[6];
            data[0] = (byte)PinNumber;
            cmd.CopyTo(data, 1);
            Board.sendPinConfigPacket(data);
        }

        private int prevAdcValue;
        private double prevAnalogVoltage;
        private double prevAnalogValue;

        internal virtual void UpdateValue(byte highByte, byte lowByte)
        {
            if(Mode == PinMode.DigitalInput)
            {
                bool newVal = highByte > 0;
                if (digitalValue != newVal) // we have a new value!
                {
                    digitalValue = newVal;
                    RaiseDigitalInValueChanged();
                    RaisePropertyChanged("DigitalValue");
                }
            } else if(Mode == PinMode.AnalogInput)
            {
                int val = ((int)highByte) << 8;
                val |= (int)lowByte;
                adcValue = val;
                RaiseAnalogInChanged();
            }
            
        }

        /// <summary>
        /// Occurs when an analog voltage is changed, according to the set threshold.
        /// </summary>
        /// <remarks>
        /// The Changed event is raised when the 12-bit ADC value obtained is different from the previous reading 
        /// by at least the value specified by <see cref="AnalogVoltageChangedThreshold"/>.
        /// </remarks>
        public event OnAnalogVoltageChanged AnalogVoltageChanged;

        /// <summary>
        /// Occurs when an analog value is changed, according to the set threshold.
        /// </summary>
        /// <remarks>
        /// The Changed event is raised when the 10-bit ADC value obtained is different from the previous reading
        /// by at least the value specified by <see cref="AdcValueChangedThreshold"/>
        /// </remarks>
        public event OnAnalogValueChanged AnalogValueChanged;

        /// <summary>
        /// Occurs when the normalized analog value is changed, according to the set threshold.
        /// </summary>
        /// <remarks>
        /// The Changed event is raised when the 10-bit ADC value obtained is different from the previous reading.
        /// </remarks>
        public event OnAdcValueChanged AdcValueChanged;


        int adcValue;

        /// <summary>
        /// Retrieve the last value obtained from the ADC. 
        /// </summary>
        /// <remarks>
        /// Treehopper has a 12-bit ADC, so ADC values will range from 0-4095.
        /// </remarks>
        public int AdcValue
        {
            get
            {
                if(Mode != PinMode.AnalogInput)
                    Debug.WriteLine(string.Format("NOTICE: Attempting to read AdcValue from Pin {0}, which is configured for {1}. This call will always return 0", PinNumber, Mode));

                return adcValue;
            }
        }

        /// <summary>
        /// Retrieve the last voltage reading from the ADC.
        /// </summary>
        public double AnalogVoltage
        {
            get
            {
                return Math.Round((double)AdcValue * (referenceLevelVoltage / 4092.0), 4);
            }
        }

        /// <summary>
        /// Retrieve the last reading from the ADC, expressed on a unit range (0.0 - 1.0)
        /// </summary>
        /// <remarks>
        /// </remarks>
        public double AnalogValue
        {
            get
            {
                return Math.Round((double)AdcValue / 4092.0, 4);
            }
        }

        double referenceLevelVoltage;

        AdcReferenceLevel referenceLevel;

        /// <summary>
        /// Sets the ADC reference value used 
        /// </summary>
        public AdcReferenceLevel ReferenceLevel
        {
            get
            {
                return referenceLevel;
            }
            set
            {
                referenceLevel = value;
                switch(referenceLevel)
                {
                    case AdcReferenceLevel.VREF_1V65:
                        referenceLevelVoltage = 1.65;
                        break;
                    case AdcReferenceLevel.VREF_1V8:
                        referenceLevelVoltage = 1.8;
                        break;
                    case AdcReferenceLevel.VREF_2V4:
                        referenceLevelVoltage = 2.4;
                        break;
                    case AdcReferenceLevel.VREF_3V3:
                        referenceLevelVoltage = 3.3;
                        break;
                    case AdcReferenceLevel.VREF_3V3_DERIVED:
                        referenceLevelVoltage = 3.3;
                        break;
                    case AdcReferenceLevel.VREF_3V6:
                        referenceLevelVoltage = 3.6;
                        break;
                }

                // if we're already an analog input, re-send the command to set the new reference level
                if (Mode == PinMode.AnalogInput)
                    SendCommand(new byte[] { (byte)PinConfigCommands.MakeAnalogInput, (byte)ReferenceLevel });
            }
        }

        public Spi SpiModule
        {
            get
            {
                return board.Spi;
            }
        }

        /// <summary>
        /// This event fires whenever a property changes
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        internal void RaisePropertyChanged(string property)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(property));
        }

        /// <summary>
        /// Make the pin a push-pull output.
        /// </summary>
        public void MakeDigitalPushPullOut()
        {
            Mode = PinMode.PushPullOutput;
        }

        /// <summary>
        /// Make the pin a digital input.
        /// </summary>
        public void MakeDigitalIn()
        {
            Mode = PinMode.DigitalInput;
        }

        /// <summary>
        /// Make the pin an analog input.
        /// </summary>
        public void MakeAnalogIn()
        {
            Mode = PinMode.AnalogInput;
        }

        public override string ToString()
        {
            if (SoftPwm.Enabled)
                return Name + ": " + SoftPwm.ToString();
            switch(Mode)
            {
                case PinMode.AnalogInput:
                    return Name + ": " + string.Format("Analog input, {0:0.00} volts", AnalogVoltage);
                case PinMode.DigitalInput:
                    return Name + ": " + string.Format("Digital input, {0}", DigitalValue);
                case PinMode.OpenDrainOutput:
                    return Name + ": " + string.Format("Open-drain output, {0}", DigitalValue);
                case PinMode.PushPullOutput:
                    return Name + ": " + string.Format("Push-pull output, {0}", DigitalValue);
                case PinMode.Reserved:
                    return Name + ": In use by peripheral";

                default:
                case PinMode.Unassigned:
                    return Name + ": Unassigned";
            }
        }
    }
}
