/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Optical
{
    public partial class Isl29125
    {
        public enum Modes
        {
            PowerDown = 0,
            Green = 1,
            Red = 2,
            Blue = 3,
            Standby = 4,
            GreenRedBlue = 5,
            GreenRed = 6,
            GreenBlue = 7
        }

        public enum Ranges
        {
            Lux_375 = 0,
            Lux_10000 = 1
        }

        public enum SampleDepths
        {
            Bits_16 = 0,
            Bits_12 = 1
        }

        public enum InterruptSelections
        {
            NoInterrupt = 0,
            Green = 1,
            Red = 2,
            Blue = 3
        }

        internal enum Prsts
        {
            Cycles_1 = 0,
            Cycles_2 = 1,
            Cycles_4 = 2,
            Cycles_8 = 3
        }

        protected class Isl29125Registers : RegisterManager
        {
            internal Isl29125Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                deviceId = new DeviceIdRegister(this);
                _registers.Add(deviceId);
                deviceReset = new DeviceResetRegister(this);
                _registers.Add(deviceReset);
                config1 = new Config1Register(this);
                _registers.Add(config1);
                config2 = new Config2Register(this);
                _registers.Add(config2);
                config3 = new Config3Register(this);
                _registers.Add(config3);
                lowThreshold = new LowThresholdRegister(this);
                _registers.Add(lowThreshold);
                highThreshold = new HighThresholdRegister(this);
                _registers.Add(highThreshold);
                status = new StatusRegister(this);
                _registers.Add(status);
                greenData = new GreenDataRegister(this);
                _registers.Add(greenData);
                redData = new RedDataRegister(this);
                _registers.Add(redData);
                blueData = new BlueDataRegister(this);
                _registers.Add(blueData);
            }

            internal DeviceIdRegister deviceId;
            internal DeviceResetRegister deviceReset;
            internal Config1Register config1;
            internal Config2Register config2;
            internal Config3Register config3;
            internal LowThresholdRegister lowThreshold;
            internal HighThresholdRegister highThreshold;
            internal StatusRegister status;
            internal GreenDataRegister greenData;
            internal RedDataRegister redData;
            internal BlueDataRegister blueData;

            internal class DeviceIdRegister : Register
            {
                internal DeviceIdRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class DeviceResetRegister : Register
            {
                internal DeviceResetRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Config1Register : Register
            {
                internal Config1Register(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int mode { get; set; }
                public int range { get; set; }
                public int sampleDepth { get; set; }
                public int sync { get; set; }
                public Modes getMode() { return (Modes)mode; }
                public void setMode(Modes enumVal) { mode = (int)enumVal; }
                public Ranges getRange() { return (Ranges)range; }
                public void setRange(Ranges enumVal) { range = (int)enumVal; }
                public SampleDepths getSampleDepth() { return (SampleDepths)sampleDepth; }
                public void setSampleDepth(SampleDepths enumVal) { sampleDepth = (int)enumVal; }

                internal override long getValue() { return ((mode & 0x7) << 0) | ((range & 0x1) << 3) | ((sampleDepth & 0x1) << 4) | ((sync & 0x1) << 5); }
                internal override void setValue(long _value)
                {
                    mode = (int)((_value >> 0) & 0x7);
                    range = (int)((_value >> 3) & 0x1);
                    sampleDepth = (int)((_value >> 4) & 0x1);
                    sync = (int)((_value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Mode: { mode } (offset: 0, width: 3)\r\n";
                    retVal += $"Range: { range } (offset: 3, width: 1)\r\n";
                    retVal += $"SampleDepth: { sampleDepth } (offset: 4, width: 1)\r\n";
                    retVal += $"Sync: { sync } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Config2Register : Register
            {
                internal Config2Register(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int alscc { get; set; }
                public int irCom { get; set; }

                internal override long getValue() { return ((alscc & 0x3F) << 0) | ((irCom & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    alscc = (int)((_value >> 0) & 0x3F);
                    irCom = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Alscc: { alscc } (offset: 0, width: 6)\r\n";
                    retVal += $"IrCom: { irCom } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Config3Register : Register
            {
                internal Config3Register(RegisterManager regManager) : base(regManager, 0x03, 1, false) { }

                public int interruptSelection { get; set; }
                public int prst { get; set; }
                public int conven { get; set; }
                public InterruptSelections getInterruptSelection() { return (InterruptSelections)interruptSelection; }
                public void setInterruptSelection(InterruptSelections enumVal) { interruptSelection = (int)enumVal; }
                public Prsts getPrst() { return (Prsts)prst; }
                public void setPrst(Prsts enumVal) { prst = (int)enumVal; }

                internal override long getValue() { return ((interruptSelection & 0x3) << 0) | ((prst & 0x3) << 2) | ((conven & 0x1) << 4); }
                internal override void setValue(long _value)
                {
                    interruptSelection = (int)((_value >> 0) & 0x3);
                    prst = (int)((_value >> 2) & 0x3);
                    conven = (int)((_value >> 4) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"InterruptSelection: { interruptSelection } (offset: 0, width: 2)\r\n";
                    retVal += $"Prst: { prst } (offset: 2, width: 2)\r\n";
                    retVal += $"Conven: { conven } (offset: 4, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class LowThresholdRegister : Register
            {
                internal LowThresholdRegister(RegisterManager regManager) : base(regManager, 0x04, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HighThresholdRegister : Register
            {
                internal HighThresholdRegister(RegisterManager regManager) : base(regManager, 0x06, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x08, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class GreenDataRegister : Register
            {
                internal GreenDataRegister(RegisterManager regManager) : base(regManager, 0x09, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class RedDataRegister : Register
            {
                internal RedDataRegister(RegisterManager regManager) : base(regManager, 0x0B, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class BlueDataRegister : Register
            {
                internal BlueDataRegister(RegisterManager regManager) : base(regManager, 0x0D, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
        }
    }
}