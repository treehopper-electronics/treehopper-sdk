/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Optical
{
    public partial class Vcnl4010
    {
        internal enum Rates
        {
            Hz_1_95 = 0,
            Hz_3_90625 = 1,
            Hz_7_8125 = 2,
            Hz_16_625 = 3,
            Hz_31_25 = 4,
            Hz_62_5 = 5,
            Hz_125 = 6,
            Hz_250 = 7
        }

        internal enum AlsRates
        {
            Hz_1 = 0,
            Hz_2 = 1,
            Hz_3 = 2,
            Hz_4 = 3,
            Hz_5 = 4,
            Hz_6 = 5,
            Hz_8 = 6,
            Hz_10 = 7
        }

        internal enum IntCountExceeds
        {
            count_1 = 0,
            count_2 = 1,
            count_4 = 2,
            count_8 = 3,
            count_16 = 4,
            count_32 = 5,
            count_64 = 6,
            count_128 = 7
        }

        protected class Vcnl4010Registers : RegisterManager
        {
            internal Vcnl4010Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                command = new CommandRegister(this);
                _registers.Add(command);
                productId = new ProductIdRegister(this);
                _registers.Add(productId);
                proximityRate = new ProximityRateRegister(this);
                _registers.Add(proximityRate);
                ledCurrent = new LedCurrentRegister(this);
                _registers.Add(ledCurrent);
                ambientLightParameters = new AmbientLightParametersRegister(this);
                _registers.Add(ambientLightParameters);
                ambientLightResult = new AmbientLightResultRegister(this);
                _registers.Add(ambientLightResult);
                proximityResult = new ProximityResultRegister(this);
                _registers.Add(proximityResult);
                interruptControl = new InterruptControlRegister(this);
                _registers.Add(interruptControl);
                lowThreshold = new LowThresholdRegister(this);
                _registers.Add(lowThreshold);
                highThreshold = new HighThresholdRegister(this);
                _registers.Add(highThreshold);
                interruptStatus = new InterruptStatusRegister(this);
                _registers.Add(interruptStatus);
                proxModulatorTimingAdustment = new ProxModulatorTimingAdustmentRegister(this);
                _registers.Add(proxModulatorTimingAdustment);
            }

            internal CommandRegister command;
            internal ProductIdRegister productId;
            internal ProximityRateRegister proximityRate;
            internal LedCurrentRegister ledCurrent;
            internal AmbientLightParametersRegister ambientLightParameters;
            internal AmbientLightResultRegister ambientLightResult;
            internal ProximityResultRegister proximityResult;
            internal InterruptControlRegister interruptControl;
            internal LowThresholdRegister lowThreshold;
            internal HighThresholdRegister highThreshold;
            internal InterruptStatusRegister interruptStatus;
            internal ProxModulatorTimingAdustmentRegister proxModulatorTimingAdustment;

            internal class CommandRegister : Register
            {
                internal CommandRegister(RegisterManager regManager) : base(regManager, 0x80, 1, false) { }

                public int selfTimedEnable { get; set; }
                public int proxPeriodicEnable { get; set; }
                public int alsPeriodicEnable { get; set; }
                public int proxOnDemandStart { get; set; }
                public int alsOnDemandStart { get; set; }
                public int proxDataReady { get; set; }
                public int alsDataReady { get; set; }
                public int configLock { get; set; }

                internal override long getValue() { return ((selfTimedEnable & 0x1) << 0) | ((proxPeriodicEnable & 0x1) << 1) | ((alsPeriodicEnable & 0x1) << 2) | ((proxOnDemandStart & 0x1) << 3) | ((alsOnDemandStart & 0x1) << 4) | ((proxDataReady & 0x1) << 5) | ((alsDataReady & 0x1) << 6) | ((configLock & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    selfTimedEnable = (int)((_value >> 0) & 0x1);
                    proxPeriodicEnable = (int)((_value >> 1) & 0x1);
                    alsPeriodicEnable = (int)((_value >> 2) & 0x1);
                    proxOnDemandStart = (int)((_value >> 3) & 0x1);
                    alsOnDemandStart = (int)((_value >> 4) & 0x1);
                    proxDataReady = (int)((_value >> 5) & 0x1);
                    alsDataReady = (int)((_value >> 6) & 0x1);
                    configLock = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SelfTimedEnable: { selfTimedEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"ProxPeriodicEnable: { proxPeriodicEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"AlsPeriodicEnable: { alsPeriodicEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"ProxOnDemandStart: { proxOnDemandStart } (offset: 3, width: 1)\r\n";
                    retVal += $"AlsOnDemandStart: { alsOnDemandStart } (offset: 4, width: 1)\r\n";
                    retVal += $"ProxDataReady: { proxDataReady } (offset: 5, width: 1)\r\n";
                    retVal += $"AlsDataReady: { alsDataReady } (offset: 6, width: 1)\r\n";
                    retVal += $"ConfigLock: { configLock } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ProductIdRegister : Register
            {
                internal ProductIdRegister(RegisterManager regManager) : base(regManager, 0x82, 1, false) { }

                public int revisionId { get; set; }
                public int productId { get; set; }

                internal override long getValue() { return ((revisionId & 0xF) << 0) | ((productId & 0xF) << 4); }
                internal override void setValue(long _value)
                {
                    revisionId = (int)((_value >> 0) & 0xF);
                    productId = (int)((_value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RevisionId: { revisionId } (offset: 0, width: 4)\r\n";
                    retVal += $"ProductId: { productId } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class ProximityRateRegister : Register
            {
                internal ProximityRateRegister(RegisterManager regManager) : base(regManager, 0x82, 1, false) { }

                public int rate { get; set; }
                public Rates getRate() { return (Rates)rate; }
                public void setRate(Rates enumVal) { rate = (int)enumVal; }

                internal override long getValue() { return ((rate & 0xF) << 0); }
                internal override void setValue(long _value)
                {
                    rate = (int)((_value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Rate: { rate } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class LedCurrentRegister : Register
            {
                internal LedCurrentRegister(RegisterManager regManager) : base(regManager, 0x83, 1, false) { }

                public int irLedCurrentValue { get; set; }
                public int fuseProgId { get; set; }

                internal override long getValue() { return ((irLedCurrentValue & 0x3F) << 0) | ((fuseProgId & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    irLedCurrentValue = (int)((_value >> 0) & 0x3F);
                    fuseProgId = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IrLedCurrentValue: { irLedCurrentValue } (offset: 0, width: 6)\r\n";
                    retVal += $"FuseProgId: { fuseProgId } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class AmbientLightParametersRegister : Register
            {
                internal AmbientLightParametersRegister(RegisterManager regManager) : base(regManager, 0x84, 1, false) { }

                public int averagingSamples { get; set; }
                public int autoOffsetCompensation { get; set; }
                public int alsRate { get; set; }
                public int continuousConversionMode { get; set; }
                public AlsRates getAlsRate() { return (AlsRates)alsRate; }
                public void setAlsRate(AlsRates enumVal) { alsRate = (int)enumVal; }

                internal override long getValue() { return ((averagingSamples & 0x7) << 0) | ((autoOffsetCompensation & 0x1) << 3) | ((alsRate & 0x7) << 4) | ((continuousConversionMode & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    averagingSamples = (int)((_value >> 0) & 0x7);
                    autoOffsetCompensation = (int)((_value >> 3) & 0x1);
                    alsRate = (int)((_value >> 4) & 0x7);
                    continuousConversionMode = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AveragingSamples: { averagingSamples } (offset: 0, width: 3)\r\n";
                    retVal += $"AutoOffsetCompensation: { autoOffsetCompensation } (offset: 3, width: 1)\r\n";
                    retVal += $"AlsRate: { alsRate } (offset: 4, width: 3)\r\n";
                    retVal += $"ContinuousConversionMode: { continuousConversionMode } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AmbientLightResultRegister : Register
            {
                internal AmbientLightResultRegister(RegisterManager regManager) : base(regManager, 0x85, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ProximityResultRegister : Register
            {
                internal ProximityResultRegister(RegisterManager regManager) : base(regManager, 0x87, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class InterruptControlRegister : Register
            {
                internal InterruptControlRegister(RegisterManager regManager) : base(regManager, 0x89, 1, false) { }

                public int interruptThresholdSelect { get; set; }
                public int interruptThresholdEnable { get; set; }
                public int interruptAlsReadyEnable { get; set; }
                public int intCountExceed { get; set; }
                public IntCountExceeds getIntCountExceed() { return (IntCountExceeds)intCountExceed; }
                public void setIntCountExceed(IntCountExceeds enumVal) { intCountExceed = (int)enumVal; }

                internal override long getValue() { return ((interruptThresholdSelect & 0x1) << 0) | ((interruptThresholdEnable & 0x1) << 1) | ((interruptAlsReadyEnable & 0x1) << 2) | ((intCountExceed & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    interruptThresholdSelect = (int)((_value >> 0) & 0x1);
                    interruptThresholdEnable = (int)((_value >> 1) & 0x1);
                    interruptAlsReadyEnable = (int)((_value >> 2) & 0x1);
                    intCountExceed = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"InterruptThresholdSelect: { interruptThresholdSelect } (offset: 0, width: 1)\r\n";
                    retVal += $"InterruptThresholdEnable: { interruptThresholdEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"InterruptAlsReadyEnable: { interruptAlsReadyEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"IntCountExceed: { intCountExceed } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class LowThresholdRegister : Register
            {
                internal LowThresholdRegister(RegisterManager regManager) : base(regManager, 0x8A, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HighThresholdRegister : Register
            {
                internal HighThresholdRegister(RegisterManager regManager) : base(regManager, 0x8C, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class InterruptStatusRegister : Register
            {
                internal InterruptStatusRegister(RegisterManager regManager) : base(regManager, 0x8E, 1, false) { }

                public int intThresholdHighExceeded { get; set; }
                public int intThresholdLowExceeded { get; set; }
                public int intAlsReady { get; set; }
                public int intProxReady { get; set; }

                internal override long getValue() { return ((intThresholdHighExceeded & 0x1) << 0) | ((intThresholdLowExceeded & 0x1) << 1) | ((intAlsReady & 0x1) << 2) | ((intProxReady & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    intThresholdHighExceeded = (int)((_value >> 0) & 0x1);
                    intThresholdLowExceeded = (int)((_value >> 1) & 0x1);
                    intAlsReady = (int)((_value >> 2) & 0x1);
                    intProxReady = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IntThresholdHighExceeded: { intThresholdHighExceeded } (offset: 0, width: 1)\r\n";
                    retVal += $"IntThresholdLowExceeded: { intThresholdLowExceeded } (offset: 1, width: 1)\r\n";
                    retVal += $"IntAlsReady: { intAlsReady } (offset: 2, width: 1)\r\n";
                    retVal += $"IntProxReady: { intProxReady } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ProxModulatorTimingAdustmentRegister : Register
            {
                internal ProxModulatorTimingAdustmentRegister(RegisterManager regManager) : base(regManager, 0x8F, 1, false) { }

                public int modulationDeadTime { get; set; }
                public int proximityFrequency { get; set; }
                public int modulationDelayTime { get; set; }

                internal override long getValue() { return ((modulationDeadTime & 0x7) << 0) | ((proximityFrequency & 0x3) << 3) | ((modulationDelayTime & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    modulationDeadTime = (int)((_value >> 0) & 0x7);
                    proximityFrequency = (int)((_value >> 3) & 0x3);
                    modulationDelayTime = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ModulationDeadTime: { modulationDeadTime } (offset: 0, width: 3)\r\n";
                    retVal += $"ProximityFrequency: { proximityFrequency } (offset: 3, width: 2)\r\n";
                    retVal += $"ModulationDelayTime: { modulationDelayTime } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
        }
    }
}