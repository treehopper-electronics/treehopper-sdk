/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Adxl345
    {
        protected class Adxl345Registers : RegisterManager
        {
            internal Adxl345Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                powerCtl = new PowerCtlRegister(this);
                _registers.Add(powerCtl);
                dataFormat = new DataFormatRegister(this);
                _registers.Add(dataFormat);
                dataX = new DataXRegister(this);
                _registers.Add(dataX);
                dataY = new DataYRegister(this);
                _registers.Add(dataY);
                dataZ = new DataZRegister(this);
                _registers.Add(dataZ);
            }

            internal PowerCtlRegister powerCtl;
            internal DataFormatRegister dataFormat;
            internal DataXRegister dataX;
            internal DataYRegister dataY;
            internal DataZRegister dataZ;

            internal class PowerCtlRegister : Register
            {
                internal PowerCtlRegister(RegisterManager regManager) : base(regManager, 0x2D, 1, false) { }

                public int sleep { get; set; }
                public int measure { get; set; }

                internal override long getValue() { return ((sleep & 0x1) << 2) | ((measure & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    sleep = (int)((_value >> 2) & 0x1);
                    measure = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Sleep: { sleep } (offset: 2, width: 1)\r\n";
                    retVal += $"Measure: { measure } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class DataFormatRegister : Register
            {
                internal DataFormatRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int range { get; set; }
                public int justify { get; set; }
                public int fullRes { get; set; }

                internal override long getValue() { return ((range & 0x3) << 0) | ((justify & 0x1) << 2) | ((fullRes & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    range = (int)((_value >> 0) & 0x3);
                    justify = (int)((_value >> 2) & 0x1);
                    fullRes = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Range: { range } (offset: 0, width: 2)\r\n";
                    retVal += $"Justify: { justify } (offset: 2, width: 1)\r\n";
                    retVal += $"FullRes: { fullRes } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class DataXRegister : Register
            {
                internal DataXRegister(RegisterManager regManager) : base(regManager, 0x32, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x1FFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 13)\r\n";
                    return retVal;
                }
            }
            internal class DataYRegister : Register
            {
                internal DataYRegister(RegisterManager regManager) : base(regManager, 0x34, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x1FFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 13)\r\n";
                    return retVal;
                }
            }
            internal class DataZRegister : Register
            {
                internal DataZRegister(RegisterManager regManager) : base(regManager, 0x36, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x1FFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 13)\r\n";
                    return retVal;
                }
            }
        }
    }
}