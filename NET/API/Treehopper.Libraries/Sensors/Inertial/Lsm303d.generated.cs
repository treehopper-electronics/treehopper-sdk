/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Lsm303d
    {
        internal enum OutputDataRates
        {
            powerDown = 0,
            Hz_3_125 = 1,
            Hz_6_25 = 2,
            Hz_12_5 = 3,
            Hz_25 = 4,
            Hz_50 = 5,
            Hz_100 = 6,
            Hz_200 = 7,
            Hz_400 = 8,
            Hz_800 = 9,
            Hz_1600 = 10
        }

        internal enum FullScaleSelections
        {
            Fs_2g = 0,
            Fs_4g = 1,
            Fs_6g = 2,
            Fs_8g = 3,
            Fs_16g = 4
        }

        internal enum AntiAliasFilterBandwidths
        {
            Hz_773 = 0,
            Hz_194 = 1,
            Hz_362 = 2,
            Hz_50 = 3
        }

        internal enum MagDataRates
        {
            Hz_3_125 = 0,
            Hz_6_25 = 1,
            Hz_12_5 = 2,
            Hz_25 = 3,
            Hz_50 = 4,
            Hz_100 = 5
        }

        internal enum MagResolutions
        {
            lowResolution = 0,
            highResolution = 3
        }

        internal enum MagFullScaleSelections
        {
            gauss_2 = 0,
            gauss_4 = 1,
            gauss_8 = 2,
            gauss_12 = 3
        }

        internal enum MagSensorModes
        {
            ContinuousConversion = 0,
            SingleConversion = 1,
            PowerDown = 2
        }

        internal enum AccelhighPassModes
        {
            Reset = 0,
            ReferenceSignal = 1,
            Normal = 2,
            AutoResetOnInterrupt = 3
        }

        internal enum FifoModes
        {
            Bypass = 0,
            Fifo = 1,
            Stream = 2,
            StreamToFifo = 3,
            BypassToStream = 4
        }

        protected class Lsm303dRegisters : RegisterManager
        {
            internal Lsm303dRegisters(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                tempOut = new TempOutRegister(this);
                _registers.Add(tempOut);
                status = new StatusRegister(this);
                _registers.Add(status);
                outX = new OutXRegister(this);
                _registers.Add(outX);
                outY = new OutYRegister(this);
                _registers.Add(outY);
                outZ = new OutZRegister(this);
                _registers.Add(outZ);
                whoAmI = new WhoAmIRegister(this);
                _registers.Add(whoAmI);
                intCtrl = new IntCtrlRegister(this);
                _registers.Add(intCtrl);
                intSource = new IntSourceRegister(this);
                _registers.Add(intSource);
                intThreshold = new IntThresholdRegister(this);
                _registers.Add(intThreshold);
                offsetX = new OffsetXRegister(this);
                _registers.Add(offsetX);
                offsetY = new OffsetYRegister(this);
                _registers.Add(offsetY);
                offsetZ = new OffsetZRegister(this);
                _registers.Add(offsetZ);
                referenceX = new ReferenceXRegister(this);
                _registers.Add(referenceX);
                referenceY = new ReferenceYRegister(this);
                _registers.Add(referenceY);
                referenceZ = new ReferenceZRegister(this);
                _registers.Add(referenceZ);
                ctrl0 = new Ctrl0Register(this);
                _registers.Add(ctrl0);
                ctrl1 = new Ctrl1Register(this);
                _registers.Add(ctrl1);
                ctrl2 = new Ctrl2Register(this);
                _registers.Add(ctrl2);
                ctrl3 = new Ctrl3Register(this);
                _registers.Add(ctrl3);
                ctrl4 = new Ctrl4Register(this);
                _registers.Add(ctrl4);
                ctrl5 = new Ctrl5Register(this);
                _registers.Add(ctrl5);
                ctrl6 = new Ctrl6Register(this);
                _registers.Add(ctrl6);
                ctrl7 = new Ctrl7Register(this);
                _registers.Add(ctrl7);
                statusA = new StatusARegister(this);
                _registers.Add(statusA);
                outAccelX = new OutAccelXRegister(this);
                _registers.Add(outAccelX);
                outAccelY = new OutAccelYRegister(this);
                _registers.Add(outAccelY);
                outAccelZ = new OutAccelZRegister(this);
                _registers.Add(outAccelZ);
                fifoControl = new FifoControlRegister(this);
                _registers.Add(fifoControl);
                fifoSource = new FifoSourceRegister(this);
                _registers.Add(fifoSource);
                inertialIntGen1Config = new InertialIntGen1ConfigRegister(this);
                _registers.Add(inertialIntGen1Config);
                inertialIntGen1Status = new InertialIntGen1StatusRegister(this);
                _registers.Add(inertialIntGen1Status);
                inertialIntGen1Threshold = new InertialIntGen1ThresholdRegister(this);
                _registers.Add(inertialIntGen1Threshold);
                inertialIntGen1Duration = new InertialIntGen1DurationRegister(this);
                _registers.Add(inertialIntGen1Duration);
                inertialIntGen2Config = new InertialIntGen2ConfigRegister(this);
                _registers.Add(inertialIntGen2Config);
                inertialIntGen2Status = new InertialIntGen2StatusRegister(this);
                _registers.Add(inertialIntGen2Status);
                inertialIntGen2Threshold = new InertialIntGen2ThresholdRegister(this);
                _registers.Add(inertialIntGen2Threshold);
                inertialIntGen2Duration = new InertialIntGen2DurationRegister(this);
                _registers.Add(inertialIntGen2Duration);
                clickConfig = new ClickConfigRegister(this);
                _registers.Add(clickConfig);
                clickSource = new ClickSourceRegister(this);
                _registers.Add(clickSource);
                clickThreshold = new ClickThresholdRegister(this);
                _registers.Add(clickThreshold);
                timeLimit = new TimeLimitRegister(this);
                _registers.Add(timeLimit);
                timeLatency = new TimeLatencyRegister(this);
                _registers.Add(timeLatency);
                timeWindow = new TimeWindowRegister(this);
                _registers.Add(timeWindow);
                activationThreshold = new ActivationThresholdRegister(this);
                _registers.Add(activationThreshold);
                activationDuration = new ActivationDurationRegister(this);
                _registers.Add(activationDuration);
            }

            internal TempOutRegister tempOut;
            internal StatusRegister status;
            internal OutXRegister outX;
            internal OutYRegister outY;
            internal OutZRegister outZ;
            internal WhoAmIRegister whoAmI;
            internal IntCtrlRegister intCtrl;
            internal IntSourceRegister intSource;
            internal IntThresholdRegister intThreshold;
            internal OffsetXRegister offsetX;
            internal OffsetYRegister offsetY;
            internal OffsetZRegister offsetZ;
            internal ReferenceXRegister referenceX;
            internal ReferenceYRegister referenceY;
            internal ReferenceZRegister referenceZ;
            internal Ctrl0Register ctrl0;
            internal Ctrl1Register ctrl1;
            internal Ctrl2Register ctrl2;
            internal Ctrl3Register ctrl3;
            internal Ctrl4Register ctrl4;
            internal Ctrl5Register ctrl5;
            internal Ctrl6Register ctrl6;
            internal Ctrl7Register ctrl7;
            internal StatusARegister statusA;
            internal OutAccelXRegister outAccelX;
            internal OutAccelYRegister outAccelY;
            internal OutAccelZRegister outAccelZ;
            internal FifoControlRegister fifoControl;
            internal FifoSourceRegister fifoSource;
            internal InertialIntGen1ConfigRegister inertialIntGen1Config;
            internal InertialIntGen1StatusRegister inertialIntGen1Status;
            internal InertialIntGen1ThresholdRegister inertialIntGen1Threshold;
            internal InertialIntGen1DurationRegister inertialIntGen1Duration;
            internal InertialIntGen2ConfigRegister inertialIntGen2Config;
            internal InertialIntGen2StatusRegister inertialIntGen2Status;
            internal InertialIntGen2ThresholdRegister inertialIntGen2Threshold;
            internal InertialIntGen2DurationRegister inertialIntGen2Duration;
            internal ClickConfigRegister clickConfig;
            internal ClickSourceRegister clickSource;
            internal ClickThresholdRegister clickThreshold;
            internal TimeLimitRegister timeLimit;
            internal TimeLatencyRegister timeLatency;
            internal TimeWindowRegister timeWindow;
            internal ActivationThresholdRegister activationThreshold;
            internal ActivationDurationRegister activationDuration;

            internal class TempOutRegister : Register
            {
                internal TempOutRegister(RegisterManager regManager) : base(regManager, 0x05, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFF) << (32 - 12)) >> (32 - 12);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 12)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x07, 1, false) { }

                public int xDataAvailable { get; set; }
                public int yDataAvailable { get; set; }
                public int zDataAvailable { get; set; }
                public int zyxDataAvailable { get; set; }
                public int xDataOverrun { get; set; }
                public int yDataOverrun { get; set; }
                public int zDataOverrun { get; set; }
                public int zyxDataOverrun { get; set; }

                internal override long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xDataAvailable = (int)((_value >> 0) & 0x1);
                    yDataAvailable = (int)((_value >> 1) & 0x1);
                    zDataAvailable = (int)((_value >> 2) & 0x1);
                    zyxDataAvailable = (int)((_value >> 3) & 0x1);
                    xDataOverrun = (int)((_value >> 4) & 0x1);
                    yDataOverrun = (int)((_value >> 5) & 0x1);
                    zDataOverrun = (int)((_value >> 6) & 0x1);
                    zyxDataOverrun = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XDataAvailable: { xDataAvailable } (offset: 0, width: 1)\r\n";
                    retVal += $"YDataAvailable: { yDataAvailable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZDataAvailable: { zDataAvailable } (offset: 2, width: 1)\r\n";
                    retVal += $"ZyxDataAvailable: { zyxDataAvailable } (offset: 3, width: 1)\r\n";
                    retVal += $"XDataOverrun: { xDataOverrun } (offset: 4, width: 1)\r\n";
                    retVal += $"YDataOverrun: { yDataOverrun } (offset: 5, width: 1)\r\n";
                    retVal += $"ZDataOverrun: { zDataOverrun } (offset: 6, width: 1)\r\n";
                    retVal += $"ZyxDataOverrun: { zyxDataOverrun } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OutXRegister : Register
            {
                internal OutXRegister(RegisterManager regManager) : base(regManager, 0x08, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutYRegister : Register
            {
                internal OutYRegister(RegisterManager regManager) : base(regManager, 0x0A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutZRegister : Register
            {
                internal OutZRegister(RegisterManager regManager) : base(regManager, 0x0C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class IntCtrlRegister : Register
            {
                internal IntCtrlRegister(RegisterManager regManager) : base(regManager, 0x12, 1, false) { }

                public int magInterruptEnable { get; set; }
                public int enable4D { get; set; }
                public int latchInterruptRequest { get; set; }
                public int interruptPolarity { get; set; }
                public int interruptPinPushPull { get; set; }
                public int zInterruptEnable { get; set; }
                public int yInterruptEnable { get; set; }
                public int xInterruptEnable { get; set; }

                internal override long getValue() { return ((magInterruptEnable & 0x1) << 0) | ((enable4D & 0x1) << 1) | ((latchInterruptRequest & 0x1) << 2) | ((interruptPolarity & 0x1) << 3) | ((interruptPinPushPull & 0x1) << 4) | ((zInterruptEnable & 0x1) << 5) | ((yInterruptEnable & 0x1) << 6) | ((xInterruptEnable & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    magInterruptEnable = (int)((_value >> 0) & 0x1);
                    enable4D = (int)((_value >> 1) & 0x1);
                    latchInterruptRequest = (int)((_value >> 2) & 0x1);
                    interruptPolarity = (int)((_value >> 3) & 0x1);
                    interruptPinPushPull = (int)((_value >> 4) & 0x1);
                    zInterruptEnable = (int)((_value >> 5) & 0x1);
                    yInterruptEnable = (int)((_value >> 6) & 0x1);
                    xInterruptEnable = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"MagInterruptEnable: { magInterruptEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"Enable4D: { enable4D } (offset: 1, width: 1)\r\n";
                    retVal += $"LatchInterruptRequest: { latchInterruptRequest } (offset: 2, width: 1)\r\n";
                    retVal += $"InterruptPolarity: { interruptPolarity } (offset: 3, width: 1)\r\n";
                    retVal += $"InterruptPinPushPull: { interruptPinPushPull } (offset: 4, width: 1)\r\n";
                    retVal += $"ZInterruptEnable: { zInterruptEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"YInterruptEnable: { yInterruptEnable } (offset: 6, width: 1)\r\n";
                    retVal += $"XInterruptEnable: { xInterruptEnable } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntSourceRegister : Register
            {
                internal IntSourceRegister(RegisterManager regManager) : base(regManager, 0x13, 1, false) { }

                public int mint { get; set; }
                public int measurementRangeOverflow { get; set; }
                public int negativeThresholdZ { get; set; }
                public int negativeThresholdY { get; set; }
                public int negativeThresholdX { get; set; }
                public int positiveThresholdZ { get; set; }
                public int positiveThresholdY { get; set; }
                public int positiveThresholdX { get; set; }

                internal override long getValue() { return ((mint & 0x1) << 0) | ((measurementRangeOverflow & 0x1) << 1) | ((negativeThresholdZ & 0x1) << 2) | ((negativeThresholdY & 0x1) << 3) | ((negativeThresholdX & 0x1) << 4) | ((positiveThresholdZ & 0x1) << 5) | ((positiveThresholdY & 0x1) << 6) | ((positiveThresholdX & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    mint = (int)((_value >> 0) & 0x1);
                    measurementRangeOverflow = (int)((_value >> 1) & 0x1);
                    negativeThresholdZ = (int)((_value >> 2) & 0x1);
                    negativeThresholdY = (int)((_value >> 3) & 0x1);
                    negativeThresholdX = (int)((_value >> 4) & 0x1);
                    positiveThresholdZ = (int)((_value >> 5) & 0x1);
                    positiveThresholdY = (int)((_value >> 6) & 0x1);
                    positiveThresholdX = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Mint: { mint } (offset: 0, width: 1)\r\n";
                    retVal += $"MeasurementRangeOverflow: { measurementRangeOverflow } (offset: 1, width: 1)\r\n";
                    retVal += $"NegativeThresholdZ: { negativeThresholdZ } (offset: 2, width: 1)\r\n";
                    retVal += $"NegativeThresholdY: { negativeThresholdY } (offset: 3, width: 1)\r\n";
                    retVal += $"NegativeThresholdX: { negativeThresholdX } (offset: 4, width: 1)\r\n";
                    retVal += $"PositiveThresholdZ: { positiveThresholdZ } (offset: 5, width: 1)\r\n";
                    retVal += $"PositiveThresholdY: { positiveThresholdY } (offset: 6, width: 1)\r\n";
                    retVal += $"PositiveThresholdX: { positiveThresholdX } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntThresholdRegister : Register
            {
                internal IntThresholdRegister(RegisterManager regManager) : base(regManager, 0x14, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OffsetXRegister : Register
            {
                internal OffsetXRegister(RegisterManager regManager) : base(regManager, 0x16, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OffsetYRegister : Register
            {
                internal OffsetYRegister(RegisterManager regManager) : base(regManager, 0x18, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OffsetZRegister : Register
            {
                internal OffsetZRegister(RegisterManager regManager) : base(regManager, 0x1A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceXRegister : Register
            {
                internal ReferenceXRegister(RegisterManager regManager) : base(regManager, 0x1c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceYRegister : Register
            {
                internal ReferenceYRegister(RegisterManager regManager) : base(regManager, 0x1d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceZRegister : Register
            {
                internal ReferenceZRegister(RegisterManager regManager) : base(regManager, 0x1E, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl0Register : Register
            {
                internal Ctrl0Register(RegisterManager regManager) : base(regManager, 0x1f, 1, false) { }

                public int hpis2 { get; set; }
                public int hpis1 { get; set; }
                public int hpClick { get; set; }
                public int fifoThresholdEnable { get; set; }
                public int fifoEnable { get; set; }
                public int boot { get; set; }

                internal override long getValue() { return ((hpis2 & 0x1) << 0) | ((hpis1 & 0x1) << 1) | ((hpClick & 0x1) << 2) | ((fifoThresholdEnable & 0x1) << 5) | ((fifoEnable & 0x1) << 6) | ((boot & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    hpis2 = (int)((_value >> 0) & 0x1);
                    hpis1 = (int)((_value >> 1) & 0x1);
                    hpClick = (int)((_value >> 2) & 0x1);
                    fifoThresholdEnable = (int)((_value >> 5) & 0x1);
                    fifoEnable = (int)((_value >> 6) & 0x1);
                    boot = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Hpis2: { hpis2 } (offset: 0, width: 1)\r\n";
                    retVal += $"Hpis1: { hpis1 } (offset: 1, width: 1)\r\n";
                    retVal += $"HpClick: { hpClick } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoThresholdEnable: { fifoThresholdEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"FifoEnable: { fifoEnable } (offset: 6, width: 1)\r\n";
                    retVal += $"Boot: { boot } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0x20, 1, false) { }

                public int xEnable { get; set; }
                public int yEnable { get; set; }
                public int zEnable { get; set; }
                public int blockDataUpdate { get; set; }
                public int outputDataRate { get; set; }
                public OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

                internal override long getValue() { return ((xEnable & 0x1) << 0) | ((yEnable & 0x1) << 1) | ((zEnable & 0x1) << 2) | ((blockDataUpdate & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
                internal override void setValue(long _value)
                {
                    xEnable = (int)((_value >> 0) & 0x1);
                    yEnable = (int)((_value >> 1) & 0x1);
                    zEnable = (int)((_value >> 2) & 0x1);
                    blockDataUpdate = (int)((_value >> 3) & 0x1);
                    outputDataRate = (int)((_value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XEnable: { xEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"YEnable: { yEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZEnable: { zEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"BlockDataUpdate: { blockDataUpdate } (offset: 3, width: 1)\r\n";
                    retVal += $"OutputDataRate: { outputDataRate } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x21, 1, false) { }

                public int spiModeSelection { get; set; }
                public int accelerationSelfTest { get; set; }
                public int fullScaleSelection { get; set; }
                public int antiAliasFilterBandwidth { get; set; }
                public FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
                public void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }
                public AntiAliasFilterBandwidths getAntiAliasFilterBandwidth() { return (AntiAliasFilterBandwidths)antiAliasFilterBandwidth; }
                public void setAntiAliasFilterBandwidth(AntiAliasFilterBandwidths enumVal) { antiAliasFilterBandwidth = (int)enumVal; }

                internal override long getValue() { return ((spiModeSelection & 0x1) << 0) | ((accelerationSelfTest & 0x1) << 1) | ((fullScaleSelection & 0x7) << 3) | ((antiAliasFilterBandwidth & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    spiModeSelection = (int)((_value >> 0) & 0x1);
                    accelerationSelfTest = (int)((_value >> 1) & 0x1);
                    fullScaleSelection = (int)((_value >> 3) & 0x7);
                    antiAliasFilterBandwidth = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SpiModeSelection: { spiModeSelection } (offset: 0, width: 1)\r\n";
                    retVal += $"AccelerationSelfTest: { accelerationSelfTest } (offset: 1, width: 1)\r\n";
                    retVal += $"FullScaleSelection: { fullScaleSelection } (offset: 3, width: 3)\r\n";
                    retVal += $"AntiAliasFilterBandwidth: { antiAliasFilterBandwidth } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl3Register : Register
            {
                internal Ctrl3Register(RegisterManager regManager) : base(regManager, 0x22, 1, false) { }

                public int fifoEmptyOnInt1 { get; set; }
                public int magReadyOnInt1 { get; set; }
                public int accelReadyOnInt1 { get; set; }
                public int magGenOnInt1 { get; set; }
                public int inertialGen2OnInt1 { get; set; }
                public int inertialGen1OnInt1 { get; set; }
                public int clickGenOnInt1 { get; set; }
                public int bootOnInt1 { get; set; }

                internal override long getValue() { return ((fifoEmptyOnInt1 & 0x1) << 0) | ((magReadyOnInt1 & 0x1) << 1) | ((accelReadyOnInt1 & 0x1) << 2) | ((magGenOnInt1 & 0x1) << 3) | ((inertialGen2OnInt1 & 0x1) << 4) | ((inertialGen1OnInt1 & 0x1) << 5) | ((clickGenOnInt1 & 0x1) << 6) | ((bootOnInt1 & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fifoEmptyOnInt1 = (int)((_value >> 0) & 0x1);
                    magReadyOnInt1 = (int)((_value >> 1) & 0x1);
                    accelReadyOnInt1 = (int)((_value >> 2) & 0x1);
                    magGenOnInt1 = (int)((_value >> 3) & 0x1);
                    inertialGen2OnInt1 = (int)((_value >> 4) & 0x1);
                    inertialGen1OnInt1 = (int)((_value >> 5) & 0x1);
                    clickGenOnInt1 = (int)((_value >> 6) & 0x1);
                    bootOnInt1 = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoEmptyOnInt1: { fifoEmptyOnInt1 } (offset: 0, width: 1)\r\n";
                    retVal += $"MagReadyOnInt1: { magReadyOnInt1 } (offset: 1, width: 1)\r\n";
                    retVal += $"AccelReadyOnInt1: { accelReadyOnInt1 } (offset: 2, width: 1)\r\n";
                    retVal += $"MagGenOnInt1: { magGenOnInt1 } (offset: 3, width: 1)\r\n";
                    retVal += $"InertialGen2OnInt1: { inertialGen2OnInt1 } (offset: 4, width: 1)\r\n";
                    retVal += $"InertialGen1OnInt1: { inertialGen1OnInt1 } (offset: 5, width: 1)\r\n";
                    retVal += $"ClickGenOnInt1: { clickGenOnInt1 } (offset: 6, width: 1)\r\n";
                    retVal += $"BootOnInt1: { bootOnInt1 } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl4Register : Register
            {
                internal Ctrl4Register(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int fifoThresholdOnInt2 { get; set; }
                public int fifoOverrunOnInt2 { get; set; }
                public int magDataReadyOnInt2 { get; set; }
                public int accelDataReadyOnInt2 { get; set; }
                public int magIntOnInt2 { get; set; }
                public int inertialGen2OnInt2 { get; set; }
                public int inertialGen1OnInt2 { get; set; }
                public int clickGenOnInt2 { get; set; }

                internal override long getValue() { return ((fifoThresholdOnInt2 & 0x1) << 0) | ((fifoOverrunOnInt2 & 0x1) << 1) | ((magDataReadyOnInt2 & 0x1) << 2) | ((accelDataReadyOnInt2 & 0x1) << 3) | ((magIntOnInt2 & 0x1) << 4) | ((inertialGen2OnInt2 & 0x1) << 5) | ((inertialGen1OnInt2 & 0x1) << 6) | ((clickGenOnInt2 & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fifoThresholdOnInt2 = (int)((_value >> 0) & 0x1);
                    fifoOverrunOnInt2 = (int)((_value >> 1) & 0x1);
                    magDataReadyOnInt2 = (int)((_value >> 2) & 0x1);
                    accelDataReadyOnInt2 = (int)((_value >> 3) & 0x1);
                    magIntOnInt2 = (int)((_value >> 4) & 0x1);
                    inertialGen2OnInt2 = (int)((_value >> 5) & 0x1);
                    inertialGen1OnInt2 = (int)((_value >> 6) & 0x1);
                    clickGenOnInt2 = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoThresholdOnInt2: { fifoThresholdOnInt2 } (offset: 0, width: 1)\r\n";
                    retVal += $"FifoOverrunOnInt2: { fifoOverrunOnInt2 } (offset: 1, width: 1)\r\n";
                    retVal += $"MagDataReadyOnInt2: { magDataReadyOnInt2 } (offset: 2, width: 1)\r\n";
                    retVal += $"AccelDataReadyOnInt2: { accelDataReadyOnInt2 } (offset: 3, width: 1)\r\n";
                    retVal += $"MagIntOnInt2: { magIntOnInt2 } (offset: 4, width: 1)\r\n";
                    retVal += $"InertialGen2OnInt2: { inertialGen2OnInt2 } (offset: 5, width: 1)\r\n";
                    retVal += $"InertialGen1OnInt2: { inertialGen1OnInt2 } (offset: 6, width: 1)\r\n";
                    retVal += $"ClickGenOnInt2: { clickGenOnInt2 } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl5Register : Register
            {
                internal Ctrl5Register(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int latchIntOnInt1 { get; set; }
                public int latchIntOnInt2 { get; set; }
                public int magDataRate { get; set; }
                public int magResolution { get; set; }
                public int tempEnable { get; set; }
                public MagDataRates getMagDataRate() { return (MagDataRates)magDataRate; }
                public void setMagDataRate(MagDataRates enumVal) { magDataRate = (int)enumVal; }
                public MagResolutions getMagResolution() { return (MagResolutions)magResolution; }
                public void setMagResolution(MagResolutions enumVal) { magResolution = (int)enumVal; }

                internal override long getValue() { return ((latchIntOnInt1 & 0x1) << 0) | ((latchIntOnInt2 & 0x1) << 1) | ((magDataRate & 0x7) << 2) | ((magResolution & 0x3) << 5) | ((tempEnable & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    latchIntOnInt1 = (int)((_value >> 0) & 0x1);
                    latchIntOnInt2 = (int)((_value >> 1) & 0x1);
                    magDataRate = (int)((_value >> 2) & 0x7);
                    magResolution = (int)((_value >> 5) & 0x3);
                    tempEnable = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"LatchIntOnInt1: { latchIntOnInt1 } (offset: 0, width: 1)\r\n";
                    retVal += $"LatchIntOnInt2: { latchIntOnInt2 } (offset: 1, width: 1)\r\n";
                    retVal += $"MagDataRate: { magDataRate } (offset: 2, width: 3)\r\n";
                    retVal += $"MagResolution: { magResolution } (offset: 5, width: 2)\r\n";
                    retVal += $"TempEnable: { tempEnable } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl6Register : Register
            {
                internal Ctrl6Register(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int magFullScaleSelection { get; set; }
                public MagFullScaleSelections getMagFullScaleSelection() { return (MagFullScaleSelections)magFullScaleSelection; }
                public void setMagFullScaleSelection(MagFullScaleSelections enumVal) { magFullScaleSelection = (int)enumVal; }

                internal override long getValue() { return ((magFullScaleSelection & 0x3) << 5); }
                internal override void setValue(long _value)
                {
                    magFullScaleSelection = (int)((_value >> 5) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"MagFullScaleSelection: { magFullScaleSelection } (offset: 5, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl7Register : Register
            {
                internal Ctrl7Register(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int magSensorMode { get; set; }
                public int magLowPowerMode { get; set; }
                public int tempOnly { get; set; }
                public int filteredAccelData { get; set; }
                public int accelhighPassMode { get; set; }
                public MagSensorModes getMagSensorMode() { return (MagSensorModes)magSensorMode; }
                public void setMagSensorMode(MagSensorModes enumVal) { magSensorMode = (int)enumVal; }
                public AccelhighPassModes getAccelhighPassMode() { return (AccelhighPassModes)accelhighPassMode; }
                public void setAccelhighPassMode(AccelhighPassModes enumVal) { accelhighPassMode = (int)enumVal; }

                internal override long getValue() { return ((magSensorMode & 0x3) << 0) | ((magLowPowerMode & 0x1) << 2) | ((tempOnly & 0x1) << 4) | ((filteredAccelData & 0x1) << 5) | ((accelhighPassMode & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    magSensorMode = (int)((_value >> 0) & 0x3);
                    magLowPowerMode = (int)((_value >> 2) & 0x1);
                    tempOnly = (int)((_value >> 4) & 0x1);
                    filteredAccelData = (int)((_value >> 5) & 0x1);
                    accelhighPassMode = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"MagSensorMode: { magSensorMode } (offset: 0, width: 2)\r\n";
                    retVal += $"MagLowPowerMode: { magLowPowerMode } (offset: 2, width: 1)\r\n";
                    retVal += $"TempOnly: { tempOnly } (offset: 4, width: 1)\r\n";
                    retVal += $"FilteredAccelData: { filteredAccelData } (offset: 5, width: 1)\r\n";
                    retVal += $"AccelhighPassMode: { accelhighPassMode } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class StatusARegister : Register
            {
                internal StatusARegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int accelXAvailable { get; set; }
                public int accelYAvailable { get; set; }
                public int accelZAvailable { get; set; }
                public int accelXYZAvailable { get; set; }
                public int accelXOverrun { get; set; }
                public int accelYOverrun { get; set; }
                public int accelZOverrun { get; set; }
                public int accelXYZOverrun { get; set; }

                internal override long getValue() { return ((accelXAvailable & 0x1) << 0) | ((accelYAvailable & 0x1) << 1) | ((accelZAvailable & 0x1) << 2) | ((accelXYZAvailable & 0x1) << 3) | ((accelXOverrun & 0x1) << 4) | ((accelYOverrun & 0x1) << 5) | ((accelZOverrun & 0x1) << 6) | ((accelXYZOverrun & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    accelXAvailable = (int)((_value >> 0) & 0x1);
                    accelYAvailable = (int)((_value >> 1) & 0x1);
                    accelZAvailable = (int)((_value >> 2) & 0x1);
                    accelXYZAvailable = (int)((_value >> 3) & 0x1);
                    accelXOverrun = (int)((_value >> 4) & 0x1);
                    accelYOverrun = (int)((_value >> 5) & 0x1);
                    accelZOverrun = (int)((_value >> 6) & 0x1);
                    accelXYZOverrun = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AccelXAvailable: { accelXAvailable } (offset: 0, width: 1)\r\n";
                    retVal += $"AccelYAvailable: { accelYAvailable } (offset: 1, width: 1)\r\n";
                    retVal += $"AccelZAvailable: { accelZAvailable } (offset: 2, width: 1)\r\n";
                    retVal += $"AccelXYZAvailable: { accelXYZAvailable } (offset: 3, width: 1)\r\n";
                    retVal += $"AccelXOverrun: { accelXOverrun } (offset: 4, width: 1)\r\n";
                    retVal += $"AccelYOverrun: { accelYOverrun } (offset: 5, width: 1)\r\n";
                    retVal += $"AccelZOverrun: { accelZOverrun } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelXYZOverrun: { accelXYZOverrun } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelXRegister : Register
            {
                internal OutAccelXRegister(RegisterManager regManager) : base(regManager, 0x28, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelYRegister : Register
            {
                internal OutAccelYRegister(RegisterManager regManager) : base(regManager, 0x2A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelZRegister : Register
            {
                internal OutAccelZRegister(RegisterManager regManager) : base(regManager, 0x2C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class FifoControlRegister : Register
            {
                internal FifoControlRegister(RegisterManager regManager) : base(regManager, 0x2E, 1, false) { }

                public int fifoThreshold { get; set; }
                public int fifoMode { get; set; }
                public FifoModes getFifoMode() { return (FifoModes)fifoMode; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

                internal override long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    fifoThreshold = (int)((_value >> 0) & 0x1F);
                    fifoMode = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoThreshold: { fifoThreshold } (offset: 0, width: 5)\r\n";
                    retVal += $"FifoMode: { fifoMode } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class FifoSourceRegister : Register
            {
                internal FifoSourceRegister(RegisterManager regManager) : base(regManager, 0x2f, 1, false) { }

                public int fifoStoredLevel { get; set; }
                public int empty { get; set; }
                public int overrun { get; set; }
                public int fifoThreshold { get; set; }

                internal override long getValue() { return ((fifoStoredLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((fifoThreshold & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fifoStoredLevel = (int)((_value >> 0) & 0x1F);
                    empty = (int)((_value >> 5) & 0x1);
                    overrun = (int)((_value >> 6) & 0x1);
                    fifoThreshold = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoStoredLevel: { fifoStoredLevel } (offset: 0, width: 5)\r\n";
                    retVal += $"Empty: { empty } (offset: 5, width: 1)\r\n";
                    retVal += $"Overrun: { overrun } (offset: 6, width: 1)\r\n";
                    retVal += $"FifoThreshold: { fifoThreshold } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1ConfigRegister : Register
            {
                internal InertialIntGen1ConfigRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int xLowInterruptEnable { get; set; }
                public int xHighInterruptEnable { get; set; }
                public int yLowInterruptEnable { get; set; }
                public int yHighInterruptEnable { get; set; }
                public int zLowInterruptEvent { get; set; }
                public int zHighInterruptEnable { get; set; }
                public int detect6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xLowInterruptEnable = (int)((_value >> 0) & 0x1);
                    xHighInterruptEnable = (int)((_value >> 1) & 0x1);
                    yLowInterruptEnable = (int)((_value >> 2) & 0x1);
                    yHighInterruptEnable = (int)((_value >> 3) & 0x1);
                    zLowInterruptEvent = (int)((_value >> 4) & 0x1);
                    zHighInterruptEnable = (int)((_value >> 5) & 0x1);
                    detect6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLowInterruptEnable: { xLowInterruptEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"XHighInterruptEnable: { xHighInterruptEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"YLowInterruptEnable: { yLowInterruptEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"YHighInterruptEnable: { yHighInterruptEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLowInterruptEvent: { zLowInterruptEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHighInterruptEnable: { zHighInterruptEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"Detect6D: { detect6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1StatusRegister : Register
            {
                internal InertialIntGen1StatusRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int intStatus { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    intStatus = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"IntStatus: { intStatus } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1ThresholdRegister : Register
            {
                internal InertialIntGen1ThresholdRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1DurationRegister : Register
            {
                internal InertialIntGen1DurationRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2ConfigRegister : Register
            {
                internal InertialIntGen2ConfigRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int xLowInterruptEnable { get; set; }
                public int xHighInterruptEnable { get; set; }
                public int yLowInterruptEnable { get; set; }
                public int yHighInterruptEnable { get; set; }
                public int zLowInterruptEvent { get; set; }
                public int zHighInterruptEnable { get; set; }
                public int detect6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xLowInterruptEnable = (int)((_value >> 0) & 0x1);
                    xHighInterruptEnable = (int)((_value >> 1) & 0x1);
                    yLowInterruptEnable = (int)((_value >> 2) & 0x1);
                    yHighInterruptEnable = (int)((_value >> 3) & 0x1);
                    zLowInterruptEvent = (int)((_value >> 4) & 0x1);
                    zHighInterruptEnable = (int)((_value >> 5) & 0x1);
                    detect6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLowInterruptEnable: { xLowInterruptEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"XHighInterruptEnable: { xHighInterruptEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"YLowInterruptEnable: { yLowInterruptEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"YHighInterruptEnable: { yHighInterruptEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLowInterruptEvent: { zLowInterruptEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHighInterruptEnable: { zHighInterruptEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"Detect6D: { detect6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2StatusRegister : Register
            {
                internal InertialIntGen2StatusRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int intStatus { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    intStatus = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"IntStatus: { intStatus } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2ThresholdRegister : Register
            {
                internal InertialIntGen2ThresholdRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2DurationRegister : Register
            {
                internal InertialIntGen2DurationRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ClickConfigRegister : Register
            {
                internal ClickConfigRegister(RegisterManager regManager) : base(regManager, 0x38, 1, false) { }

                public int xSingleClick { get; set; }
                public int xDoubleClick { get; set; }
                public int ySingleClick { get; set; }
                public int yDoubleClick { get; set; }
                public int zSingleClick { get; set; }
                public int zDoubleClick { get; set; }

                internal override long getValue() { return ((xSingleClick & 0x1) << 0) | ((xDoubleClick & 0x1) << 1) | ((ySingleClick & 0x1) << 2) | ((yDoubleClick & 0x1) << 3) | ((zSingleClick & 0x1) << 4) | ((zDoubleClick & 0x1) << 5); }
                internal override void setValue(long _value)
                {
                    xSingleClick = (int)((_value >> 0) & 0x1);
                    xDoubleClick = (int)((_value >> 1) & 0x1);
                    ySingleClick = (int)((_value >> 2) & 0x1);
                    yDoubleClick = (int)((_value >> 3) & 0x1);
                    zSingleClick = (int)((_value >> 4) & 0x1);
                    zDoubleClick = (int)((_value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XSingleClick: { xSingleClick } (offset: 0, width: 1)\r\n";
                    retVal += $"XDoubleClick: { xDoubleClick } (offset: 1, width: 1)\r\n";
                    retVal += $"YSingleClick: { ySingleClick } (offset: 2, width: 1)\r\n";
                    retVal += $"YDoubleClick: { yDoubleClick } (offset: 3, width: 1)\r\n";
                    retVal += $"ZSingleClick: { zSingleClick } (offset: 4, width: 1)\r\n";
                    retVal += $"ZDoubleClick: { zDoubleClick } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickSourceRegister : Register
            {
                internal ClickSourceRegister(RegisterManager regManager) : base(regManager, 0x39, 1, false) { }

                public int x { get; set; }
                public int y { get; set; }
                public int z { get; set; }
                public int sign { get; set; }
                public int singleClickEn { get; set; }
                public int doubleClickEn { get; set; }
                public int interruptActive { get; set; }

                internal override long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEn & 0x1) << 4) | ((doubleClickEn & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    x = (int)((_value >> 0) & 0x1);
                    y = (int)((_value >> 1) & 0x1);
                    z = (int)((_value >> 2) & 0x1);
                    sign = (int)((_value >> 3) & 0x1);
                    singleClickEn = (int)((_value >> 4) & 0x1);
                    doubleClickEn = (int)((_value >> 5) & 0x1);
                    interruptActive = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { x } (offset: 0, width: 1)\r\n";
                    retVal += $"Y: { y } (offset: 1, width: 1)\r\n";
                    retVal += $"Z: { z } (offset: 2, width: 1)\r\n";
                    retVal += $"Sign: { sign } (offset: 3, width: 1)\r\n";
                    retVal += $"SingleClickEn: { singleClickEn } (offset: 4, width: 1)\r\n";
                    retVal += $"DoubleClickEn: { doubleClickEn } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { interruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickThresholdRegister : Register
            {
                internal ClickThresholdRegister(RegisterManager regManager) : base(regManager, 0x3A, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLimitRegister : Register
            {
                internal TimeLimitRegister(RegisterManager regManager) : base(regManager, 0x3b, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLatencyRegister : Register
            {
                internal TimeLatencyRegister(RegisterManager regManager) : base(regManager, 0x3c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class TimeWindowRegister : Register
            {
                internal TimeWindowRegister(RegisterManager regManager) : base(regManager, 0x3d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ActivationThresholdRegister : Register
            {
                internal ActivationThresholdRegister(RegisterManager regManager) : base(regManager, 0x3e, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ActivationDurationRegister : Register
            {
                internal ActivationDurationRegister(RegisterManager regManager) : base(regManager, 0x3f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
        }
    }
}