/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Lis3dsh
    {
        internal enum OutputDataRates
        {
            PowerDown = 0,
            Hz_3P125 = 1,
            Hz_6P25 = 2,
            Hz_12P5 = 3,
            Hz_25 = 4,
            Hz_50 = 5,
            Hz_100 = 6,
            Hz_400 = 7,
            Hz_800 = 8,
            Hz_1600 = 9
        }

        internal enum Fscales
        {
            g_2 = 0,
            g_4 = 1,
            g_6 = 2,
            g_8 = 3,
            g_16 = 4
        }

        internal enum Bandwidths
        {
            Hz_800 = 0,
            Hz_200 = 1,
            Hz_400 = 2,
            Hz_50 = 3
        }

        internal enum FifoModes
        {
            bypass = 0,
            fifoMode = 1,
            streamMode = 2,
            streamUntilTriggerThenFifo = 3,
            bypassUntilTriggerThenStream = 4,
            bypassUntilTriggerThenFIFO = 7
        }

        protected class Lis3dshRegisters : RegisterManager
        {
            internal Lis3dshRegisters(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                outT = new OutTRegister(this);
                _registers.Add(outT);
                info1 = new Info1Register(this);
                _registers.Add(info1);
                info2 = new Info2Register(this);
                _registers.Add(info2);
                whoAmI = new WhoAmIRegister(this);
                _registers.Add(whoAmI);
                offX = new OffXRegister(this);
                _registers.Add(offX);
                offY = new OffYRegister(this);
                _registers.Add(offY);
                offZ = new OffZRegister(this);
                _registers.Add(offZ);
                csX = new CsXRegister(this);
                _registers.Add(csX);
                csY = new CsYRegister(this);
                _registers.Add(csY);
                csZ = new CsZRegister(this);
                _registers.Add(csZ);
                lc = new LcRegister(this);
                _registers.Add(lc);
                stat = new StatRegister(this);
                _registers.Add(stat);
                peak1 = new Peak1Register(this);
                _registers.Add(peak1);
                peak2 = new Peak2Register(this);
                _registers.Add(peak2);
                vfc1 = new Vfc1Register(this);
                _registers.Add(vfc1);
                vfc2 = new Vfc2Register(this);
                _registers.Add(vfc2);
                vfc3 = new Vfc3Register(this);
                _registers.Add(vfc3);
                vfc4 = new Vfc4Register(this);
                _registers.Add(vfc4);
                thrs3 = new Thrs3Register(this);
                _registers.Add(thrs3);
                ctrlReg4 = new CtrlReg4Register(this);
                _registers.Add(ctrlReg4);
                ctrlReg1 = new CtrlReg1Register(this);
                _registers.Add(ctrlReg1);
                ctrlReg2 = new CtrlReg2Register(this);
                _registers.Add(ctrlReg2);
                ctrlReg3 = new CtrlReg3Register(this);
                _registers.Add(ctrlReg3);
                ctrlReg5 = new CtrlReg5Register(this);
                _registers.Add(ctrlReg5);
                ctrlReg6 = new CtrlReg6Register(this);
                _registers.Add(ctrlReg6);
                status = new StatusRegister(this);
                _registers.Add(status);
                outX = new OutXRegister(this);
                _registers.Add(outX);
                outY = new OutYRegister(this);
                _registers.Add(outY);
                outZ = new OutZRegister(this);
                _registers.Add(outZ);
                fifoCtrl = new FifoCtrlRegister(this);
                _registers.Add(fifoCtrl);
                fifoSrc = new FifoSrcRegister(this);
                _registers.Add(fifoSrc);
            }

            internal OutTRegister outT;
            internal Info1Register info1;
            internal Info2Register info2;
            internal WhoAmIRegister whoAmI;
            internal OffXRegister offX;
            internal OffYRegister offY;
            internal OffZRegister offZ;
            internal CsXRegister csX;
            internal CsYRegister csY;
            internal CsZRegister csZ;
            internal LcRegister lc;
            internal StatRegister stat;
            internal Peak1Register peak1;
            internal Peak2Register peak2;
            internal Vfc1Register vfc1;
            internal Vfc2Register vfc2;
            internal Vfc3Register vfc3;
            internal Vfc4Register vfc4;
            internal Thrs3Register thrs3;
            internal CtrlReg4Register ctrlReg4;
            internal CtrlReg1Register ctrlReg1;
            internal CtrlReg2Register ctrlReg2;
            internal CtrlReg3Register ctrlReg3;
            internal CtrlReg5Register ctrlReg5;
            internal CtrlReg6Register ctrlReg6;
            internal StatusRegister status;
            internal OutXRegister outX;
            internal OutYRegister outY;
            internal OutZRegister outZ;
            internal FifoCtrlRegister fifoCtrl;
            internal FifoSrcRegister fifoSrc;

            internal class OutTRegister : Register
            {
                internal OutTRegister(RegisterManager regManager) : base(regManager, 0x0c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Info1Register : Register
            {
                internal Info1Register(RegisterManager regManager) : base(regManager, 0x0d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Info2Register : Register
            {
                internal Info2Register(RegisterManager regManager) : base(regManager, 0x0e, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OffXRegister : Register
            {
                internal OffXRegister(RegisterManager regManager) : base(regManager, 0x10, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OffYRegister : Register
            {
                internal OffYRegister(RegisterManager regManager) : base(regManager, 0x11, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OffZRegister : Register
            {
                internal OffZRegister(RegisterManager regManager) : base(regManager, 0x12, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class CsXRegister : Register
            {
                internal CsXRegister(RegisterManager regManager) : base(regManager, 0x13, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class CsYRegister : Register
            {
                internal CsYRegister(RegisterManager regManager) : base(regManager, 0x14, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class CsZRegister : Register
            {
                internal CsZRegister(RegisterManager regManager) : base(regManager, 0x15, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class LcRegister : Register
            {
                internal LcRegister(RegisterManager regManager) : base(regManager, 0x16, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class StatRegister : Register
            {
                internal StatRegister(RegisterManager regManager) : base(regManager, 0x18, 1, false) { }

                public int drdy { get; set; }
                public int dor { get; set; }
                public int intSm2 { get; set; }
                public int intSm1 { get; set; }
                public int sync2 { get; set; }
                public int sync1 { get; set; }
                public int syncw { get; set; }
                public int longInterrupt { get; set; }

                internal override long getValue() { return ((drdy & 0x1) << 0) | ((dor & 0x1) << 1) | ((intSm2 & 0x1) << 2) | ((intSm1 & 0x1) << 3) | ((sync2 & 0x1) << 4) | ((sync1 & 0x1) << 5) | ((syncw & 0x1) << 6) | ((longInterrupt & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    drdy = (int)((_value >> 0) & 0x1);
                    dor = (int)((_value >> 1) & 0x1);
                    intSm2 = (int)((_value >> 2) & 0x1);
                    intSm1 = (int)((_value >> 3) & 0x1);
                    sync2 = (int)((_value >> 4) & 0x1);
                    sync1 = (int)((_value >> 5) & 0x1);
                    syncw = (int)((_value >> 6) & 0x1);
                    longInterrupt = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Drdy: { drdy } (offset: 0, width: 1)\r\n";
                    retVal += $"Dor: { dor } (offset: 1, width: 1)\r\n";
                    retVal += $"IntSm2: { intSm2 } (offset: 2, width: 1)\r\n";
                    retVal += $"IntSm1: { intSm1 } (offset: 3, width: 1)\r\n";
                    retVal += $"Sync2: { sync2 } (offset: 4, width: 1)\r\n";
                    retVal += $"Sync1: { sync1 } (offset: 5, width: 1)\r\n";
                    retVal += $"Syncw: { syncw } (offset: 6, width: 1)\r\n";
                    retVal += $"LongInterrupt: { longInterrupt } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Peak1Register : Register
            {
                internal Peak1Register(RegisterManager regManager) : base(regManager, 0x19, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Peak2Register : Register
            {
                internal Peak2Register(RegisterManager regManager) : base(regManager, 0x1A, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Vfc1Register : Register
            {
                internal Vfc1Register(RegisterManager regManager) : base(regManager, 0x1b, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Vfc2Register : Register
            {
                internal Vfc2Register(RegisterManager regManager) : base(regManager, 0x1c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Vfc3Register : Register
            {
                internal Vfc3Register(RegisterManager regManager) : base(regManager, 0x1d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Vfc4Register : Register
            {
                internal Vfc4Register(RegisterManager regManager) : base(regManager, 0x1e, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Thrs3Register : Register
            {
                internal Thrs3Register(RegisterManager regManager) : base(regManager, 0x1f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg4Register : Register
            {
                internal CtrlReg4Register(RegisterManager regManager) : base(regManager, 0x20, 1, false) { }

                public int xen { get; set; }
                public int yen { get; set; }
                public int zen { get; set; }
                public int bdu { get; set; }
                public int outputDataRate { get; set; }
                public OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

                internal override long getValue() { return ((xen & 0x1) << 0) | ((yen & 0x1) << 1) | ((zen & 0x1) << 2) | ((bdu & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
                internal override void setValue(long _value)
                {
                    xen = (int)((_value >> 0) & 0x1);
                    yen = (int)((_value >> 1) & 0x1);
                    zen = (int)((_value >> 2) & 0x1);
                    bdu = (int)((_value >> 3) & 0x1);
                    outputDataRate = (int)((_value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Xen: { xen } (offset: 0, width: 1)\r\n";
                    retVal += $"Yen: { yen } (offset: 1, width: 1)\r\n";
                    retVal += $"Zen: { zen } (offset: 2, width: 1)\r\n";
                    retVal += $"Bdu: { bdu } (offset: 3, width: 1)\r\n";
                    retVal += $"OutputDataRate: { outputDataRate } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg1Register : Register
            {
                internal CtrlReg1Register(RegisterManager regManager) : base(regManager, 0x21, 1, false) { }

                public int sm1En { get; set; }
                public int sm1Pin { get; set; }
                public int Hyst1 { get; set; }

                internal override long getValue() { return ((sm1En & 0x1) << 0) | ((sm1Pin & 0x1) << 3) | ((Hyst1 & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    sm1En = (int)((_value >> 0) & 0x1);
                    sm1Pin = (int)((_value >> 3) & 0x1);
                    Hyst1 = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Sm1En: { sm1En } (offset: 0, width: 1)\r\n";
                    retVal += $"Sm1Pin: { sm1Pin } (offset: 3, width: 1)\r\n";
                    retVal += $"Hyst1: { Hyst1 } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg2Register : Register
            {
                internal CtrlReg2Register(RegisterManager regManager) : base(regManager, 0x22, 1, false) { }

                public int sm2En { get; set; }
                public int sm2Pin { get; set; }
                public int Hyst2 { get; set; }

                internal override long getValue() { return ((sm2En & 0x1) << 0) | ((sm2Pin & 0x1) << 3) | ((Hyst2 & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    sm2En = (int)((_value >> 0) & 0x1);
                    sm2Pin = (int)((_value >> 3) & 0x1);
                    Hyst2 = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Sm2En: { sm2En } (offset: 0, width: 1)\r\n";
                    retVal += $"Sm2Pin: { sm2Pin } (offset: 3, width: 1)\r\n";
                    retVal += $"Hyst2: { Hyst2 } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg3Register : Register
            {
                internal CtrlReg3Register(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int strt { get; set; }
                public int vfilt { get; set; }
                public int int1En { get; set; }
                public int int2En { get; set; }
                public int iel { get; set; }
                public int iea { get; set; }
                public int drEn { get; set; }

                internal override long getValue() { return ((strt & 0x1) << 0) | ((vfilt & 0x1) << 2) | ((int1En & 0x1) << 3) | ((int2En & 0x1) << 4) | ((iel & 0x1) << 5) | ((iea & 0x1) << 6) | ((drEn & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    strt = (int)((_value >> 0) & 0x1);
                    vfilt = (int)((_value >> 2) & 0x1);
                    int1En = (int)((_value >> 3) & 0x1);
                    int2En = (int)((_value >> 4) & 0x1);
                    iel = (int)((_value >> 5) & 0x1);
                    iea = (int)((_value >> 6) & 0x1);
                    drEn = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Strt: { strt } (offset: 0, width: 1)\r\n";
                    retVal += $"Vfilt: { vfilt } (offset: 2, width: 1)\r\n";
                    retVal += $"Int1En: { int1En } (offset: 3, width: 1)\r\n";
                    retVal += $"Int2En: { int2En } (offset: 4, width: 1)\r\n";
                    retVal += $"Iel: { iel } (offset: 5, width: 1)\r\n";
                    retVal += $"Iea: { iea } (offset: 6, width: 1)\r\n";
                    retVal += $"DrEn: { drEn } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg5Register : Register
            {
                internal CtrlReg5Register(RegisterManager regManager) : base(regManager, 0x24, 2, false) { }

                public int sim { get; set; }
                public int st1 { get; set; }
                public int st2 { get; set; }
                public int fscale { get; set; }
                public int bandwidth { get; set; }
                public Fscales getFscale() { return (Fscales)fscale; }
                public void setFscale(Fscales enumVal) { fscale = (int)enumVal; }
                public Bandwidths getBandwidth() { return (Bandwidths)bandwidth; }
                public void setBandwidth(Bandwidths enumVal) { bandwidth = (int)enumVal; }

                internal override long getValue() { return ((sim & 0x1) << 0) | ((st1 & 0x1) << 1) | ((st2 & 0x1) << 2) | ((fscale & 0x7) << 3) | ((bandwidth & 0x7) << 6); }
                internal override void setValue(long _value)
                {
                    sim = (int)((_value >> 0) & 0x1);
                    st1 = (int)((_value >> 1) & 0x1);
                    st2 = (int)((_value >> 2) & 0x1);
                    fscale = (int)((_value >> 3) & 0x7);
                    bandwidth = (int)((_value >> 6) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Sim: { sim } (offset: 0, width: 1)\r\n";
                    retVal += $"St1: { st1 } (offset: 1, width: 1)\r\n";
                    retVal += $"St2: { st2 } (offset: 2, width: 1)\r\n";
                    retVal += $"Fscale: { fscale } (offset: 3, width: 3)\r\n";
                    retVal += $"Bandwidth: { bandwidth } (offset: 6, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class CtrlReg6Register : Register
            {
                internal CtrlReg6Register(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int p2boot { get; set; }
                public int p1overrun { get; set; }
                public int p1wtm { get; set; }
                public int p1empty { get; set; }
                public int addInc { get; set; }
                public int wtmEn { get; set; }
                public int fifoEn { get; set; }
                public int boot { get; set; }

                internal override long getValue() { return ((p2boot & 0x1) << 0) | ((p1overrun & 0x1) << 1) | ((p1wtm & 0x1) << 2) | ((p1empty & 0x1) << 3) | ((addInc & 0x1) << 4) | ((wtmEn & 0x1) << 5) | ((fifoEn & 0x1) << 6) | ((boot & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    p2boot = (int)((_value >> 0) & 0x1);
                    p1overrun = (int)((_value >> 1) & 0x1);
                    p1wtm = (int)((_value >> 2) & 0x1);
                    p1empty = (int)((_value >> 3) & 0x1);
                    addInc = (int)((_value >> 4) & 0x1);
                    wtmEn = (int)((_value >> 5) & 0x1);
                    fifoEn = (int)((_value >> 6) & 0x1);
                    boot = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"P2boot: { p2boot } (offset: 0, width: 1)\r\n";
                    retVal += $"P1overrun: { p1overrun } (offset: 1, width: 1)\r\n";
                    retVal += $"P1wtm: { p1wtm } (offset: 2, width: 1)\r\n";
                    retVal += $"P1empty: { p1empty } (offset: 3, width: 1)\r\n";
                    retVal += $"AddInc: { addInc } (offset: 4, width: 1)\r\n";
                    retVal += $"WtmEn: { wtmEn } (offset: 5, width: 1)\r\n";
                    retVal += $"FifoEn: { fifoEn } (offset: 6, width: 1)\r\n";
                    retVal += $"Boot: { boot } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int xda { get; set; }
                public int yda { get; set; }
                public int zda { get; set; }
                public int zyxda { get; set; }
                public int xor { get; set; }
                public int yor { get; set; }
                public int zor { get; set; }
                public int zyxor { get; set; }

                internal override long getValue() { return ((xda & 0x1) << 0) | ((yda & 0x1) << 1) | ((zda & 0x1) << 2) | ((zyxda & 0x1) << 3) | ((xor & 0x1) << 4) | ((yor & 0x1) << 5) | ((zor & 0x1) << 6) | ((zyxor & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xda = (int)((_value >> 0) & 0x1);
                    yda = (int)((_value >> 1) & 0x1);
                    zda = (int)((_value >> 2) & 0x1);
                    zyxda = (int)((_value >> 3) & 0x1);
                    xor = (int)((_value >> 4) & 0x1);
                    yor = (int)((_value >> 5) & 0x1);
                    zor = (int)((_value >> 6) & 0x1);
                    zyxor = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Xda: { xda } (offset: 0, width: 1)\r\n";
                    retVal += $"Yda: { yda } (offset: 1, width: 1)\r\n";
                    retVal += $"Zda: { zda } (offset: 2, width: 1)\r\n";
                    retVal += $"Zyxda: { zyxda } (offset: 3, width: 1)\r\n";
                    retVal += $"Xor: { xor } (offset: 4, width: 1)\r\n";
                    retVal += $"Yor: { yor } (offset: 5, width: 1)\r\n";
                    retVal += $"Zor: { zor } (offset: 6, width: 1)\r\n";
                    retVal += $"Zyxor: { zyxor } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OutXRegister : Register
            {
                internal OutXRegister(RegisterManager regManager) : base(regManager, 0x28, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutYRegister : Register
            {
                internal OutYRegister(RegisterManager regManager) : base(regManager, 0x2a, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutZRegister : Register
            {
                internal OutZRegister(RegisterManager regManager) : base(regManager, 0x2c, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class FifoCtrlRegister : Register
            {
                internal FifoCtrlRegister(RegisterManager regManager) : base(regManager, 0x2e, 1, false) { }

                public int wtmp { get; set; }
                public int fifoMode { get; set; }
                public FifoModes getFifoMode() { return (FifoModes)fifoMode; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

                internal override long getValue() { return ((wtmp & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    wtmp = (int)((_value >> 0) & 0x1F);
                    fifoMode = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Wtmp: { wtmp } (offset: 0, width: 5)\r\n";
                    retVal += $"FifoMode: { fifoMode } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class FifoSrcRegister : Register
            {
                internal FifoSrcRegister(RegisterManager regManager) : base(regManager, 0x2f, 1, false) { }

                public int fss { get; set; }
                public int empty { get; set; }
                public int ovrnFifo { get; set; }
                public int wtm { get; set; }

                internal override long getValue() { return ((fss & 0x1F) << 0) | ((empty & 0x1) << 5) | ((ovrnFifo & 0x1) << 6) | ((wtm & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fss = (int)((_value >> 0) & 0x1F);
                    empty = (int)((_value >> 5) & 0x1);
                    ovrnFifo = (int)((_value >> 6) & 0x1);
                    wtm = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Fss: { fss } (offset: 0, width: 5)\r\n";
                    retVal += $"Empty: { empty } (offset: 5, width: 1)\r\n";
                    retVal += $"OvrnFifo: { ovrnFifo } (offset: 6, width: 1)\r\n";
                    retVal += $"Wtm: { wtm } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
        }
    }
}