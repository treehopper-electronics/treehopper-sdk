/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Mpu6050
    {
        public enum ExtSyncSets
        {
            Disabled = 0,
            TempOutL = 1,
            GyroXoutL = 2,
            GyroYoutL = 3,
            GyroZoutL = 4,
            AccelXoutL = 5,
            AccelYoutL = 6,
            AccelZoutL = 7
        }

        public enum GyroScales
        {
            Dps_250 = 0,
            Dps_500 = 1,
            Dps_1000 = 2,
            Dps_2000 = 3
        }

        public enum AccelScales
        {
            Fs_2g = 0,
            Fs_4g = 1,
            Fs_8g = 2,
            Fs_16g = 3
        }

        public enum ClockSels
        {
            InternalOscillator = 0,
            AutoSelect = 1,
            Reset = 7
        }

        protected class Mpu6050Registers : RegisterManager
        {
            internal Mpu6050Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                self_test_x_gyro = new Self_test_x_gyroRegister(this);
                _registers.Add(self_test_x_gyro);
                self_test_y_gyro = new Self_test_y_gyroRegister(this);
                _registers.Add(self_test_y_gyro);
                self_test_z_gyro = new Self_test_z_gyroRegister(this);
                _registers.Add(self_test_z_gyro);
                self_test_x_accel = new Self_test_x_accelRegister(this);
                _registers.Add(self_test_x_accel);
                self_test_y_accel = new Self_test_y_accelRegister(this);
                _registers.Add(self_test_y_accel);
                self_test_z_accel = new Self_test_z_accelRegister(this);
                _registers.Add(self_test_z_accel);
                xGyroOffsUsr = new XGyroOffsUsrRegister(this);
                _registers.Add(xGyroOffsUsr);
                yGyroOffsUsr = new YGyroOffsUsrRegister(this);
                _registers.Add(yGyroOffsUsr);
                zGyroOffsUsr = new ZGyroOffsUsrRegister(this);
                _registers.Add(zGyroOffsUsr);
                sampleRateDivider = new SampleRateDividerRegister(this);
                _registers.Add(sampleRateDivider);
                configuration = new ConfigurationRegister(this);
                _registers.Add(configuration);
                gyroConfig = new GyroConfigRegister(this);
                _registers.Add(gyroConfig);
                accelConfig = new AccelConfigRegister(this);
                _registers.Add(accelConfig);
                accelConfig2 = new AccelConfig2Register(this);
                _registers.Add(accelConfig2);
                lowPowerAccelerometerOdrControl = new LowPowerAccelerometerOdrControlRegister(this);
                _registers.Add(lowPowerAccelerometerOdrControl);
                womThreshold = new WomThresholdRegister(this);
                _registers.Add(womThreshold);
                fifoEnable = new FifoEnableRegister(this);
                _registers.Add(fifoEnable);
                i2cMasterControl = new I2cMasterControlRegister(this);
                _registers.Add(i2cMasterControl);
                i2cSlv0Addr = new I2cSlv0AddrRegister(this);
                _registers.Add(i2cSlv0Addr);
                i2cSlv0Reg = new I2cSlv0RegRegister(this);
                _registers.Add(i2cSlv0Reg);
                i2cSlv0Ctrl = new I2cSlv0CtrlRegister(this);
                _registers.Add(i2cSlv0Ctrl);
                i2cSlv1Addr = new I2cSlv1AddrRegister(this);
                _registers.Add(i2cSlv1Addr);
                i2cSlv1Reg = new I2cSlv1RegRegister(this);
                _registers.Add(i2cSlv1Reg);
                i2cSlv1Ctrl = new I2cSlv1CtrlRegister(this);
                _registers.Add(i2cSlv1Ctrl);
                i2cSlv2Addr = new I2cSlv2AddrRegister(this);
                _registers.Add(i2cSlv2Addr);
                i2cSlv2Reg = new I2cSlv2RegRegister(this);
                _registers.Add(i2cSlv2Reg);
                i2cSlv2Ctrl = new I2cSlv2CtrlRegister(this);
                _registers.Add(i2cSlv2Ctrl);
                i2cSlv3Addr = new I2cSlv3AddrRegister(this);
                _registers.Add(i2cSlv3Addr);
                i2cSlv3Reg = new I2cSlv3RegRegister(this);
                _registers.Add(i2cSlv3Reg);
                i2cSlv3Ctrl = new I2cSlv3CtrlRegister(this);
                _registers.Add(i2cSlv3Ctrl);
                i2cSlv4Addr = new I2cSlv4AddrRegister(this);
                _registers.Add(i2cSlv4Addr);
                i2cSlv4Reg = new I2cSlv4RegRegister(this);
                _registers.Add(i2cSlv4Reg);
                i2cSlv4Do = new I2cSlv4DoRegister(this);
                _registers.Add(i2cSlv4Do);
                i2cSlv4Ctrl = new I2cSlv4CtrlRegister(this);
                _registers.Add(i2cSlv4Ctrl);
                i2cSlv4Di = new I2cSlv4DiRegister(this);
                _registers.Add(i2cSlv4Di);
                i2cMstStatus = new I2cMstStatusRegister(this);
                _registers.Add(i2cMstStatus);
                intPinCfg = new IntPinCfgRegister(this);
                _registers.Add(intPinCfg);
                intEnable = new IntEnableRegister(this);
                _registers.Add(intEnable);
                intStatus = new IntStatusRegister(this);
                _registers.Add(intStatus);
                accel_x = new Accel_xRegister(this);
                _registers.Add(accel_x);
                accel_y = new Accel_yRegister(this);
                _registers.Add(accel_y);
                accel_z = new Accel_zRegister(this);
                _registers.Add(accel_z);
                temp = new TempRegister(this);
                _registers.Add(temp);
                gyro_x = new Gyro_xRegister(this);
                _registers.Add(gyro_x);
                gyro_y = new Gyro_yRegister(this);
                _registers.Add(gyro_y);
                gyro_z = new Gyro_zRegister(this);
                _registers.Add(gyro_z);
                extSensData = new ExtSensDataRegister(this);
                _registers.Add(extSensData);
                i2cSlv0do = new I2cSlv0doRegister(this);
                _registers.Add(i2cSlv0do);
                i2cSlv1do = new I2cSlv1doRegister(this);
                _registers.Add(i2cSlv1do);
                i2cSlv2do = new I2cSlv2doRegister(this);
                _registers.Add(i2cSlv2do);
                i2cSlv3do = new I2cSlv3doRegister(this);
                _registers.Add(i2cSlv3do);
                i2cMstDelayCtrl = new I2cMstDelayCtrlRegister(this);
                _registers.Add(i2cMstDelayCtrl);
                signalPathReset = new SignalPathResetRegister(this);
                _registers.Add(signalPathReset);
                accelIntCtrl = new AccelIntCtrlRegister(this);
                _registers.Add(accelIntCtrl);
                userCtrl = new UserCtrlRegister(this);
                _registers.Add(userCtrl);
                powerMgmt1 = new PowerMgmt1Register(this);
                _registers.Add(powerMgmt1);
                powerMgmt2 = new PowerMgmt2Register(this);
                _registers.Add(powerMgmt2);
                fifoCount = new FifoCountRegister(this);
                _registers.Add(fifoCount);
                fifoRW = new FifoRWRegister(this);
                _registers.Add(fifoRW);
                whoAmI = new WhoAmIRegister(this);
                _registers.Add(whoAmI);
                xAccelOffset = new XAccelOffsetRegister(this);
                _registers.Add(xAccelOffset);
                yAccelOffset = new YAccelOffsetRegister(this);
                _registers.Add(yAccelOffset);
                zAccelOffset = new ZAccelOffsetRegister(this);
                _registers.Add(zAccelOffset);
            }

            internal Self_test_x_gyroRegister self_test_x_gyro;
            internal Self_test_y_gyroRegister self_test_y_gyro;
            internal Self_test_z_gyroRegister self_test_z_gyro;
            internal Self_test_x_accelRegister self_test_x_accel;
            internal Self_test_y_accelRegister self_test_y_accel;
            internal Self_test_z_accelRegister self_test_z_accel;
            internal XGyroOffsUsrRegister xGyroOffsUsr;
            internal YGyroOffsUsrRegister yGyroOffsUsr;
            internal ZGyroOffsUsrRegister zGyroOffsUsr;
            internal SampleRateDividerRegister sampleRateDivider;
            internal ConfigurationRegister configuration;
            internal GyroConfigRegister gyroConfig;
            internal AccelConfigRegister accelConfig;
            internal AccelConfig2Register accelConfig2;
            internal LowPowerAccelerometerOdrControlRegister lowPowerAccelerometerOdrControl;
            internal WomThresholdRegister womThreshold;
            internal FifoEnableRegister fifoEnable;
            internal I2cMasterControlRegister i2cMasterControl;
            internal I2cSlv0AddrRegister i2cSlv0Addr;
            internal I2cSlv0RegRegister i2cSlv0Reg;
            internal I2cSlv0CtrlRegister i2cSlv0Ctrl;
            internal I2cSlv1AddrRegister i2cSlv1Addr;
            internal I2cSlv1RegRegister i2cSlv1Reg;
            internal I2cSlv1CtrlRegister i2cSlv1Ctrl;
            internal I2cSlv2AddrRegister i2cSlv2Addr;
            internal I2cSlv2RegRegister i2cSlv2Reg;
            internal I2cSlv2CtrlRegister i2cSlv2Ctrl;
            internal I2cSlv3AddrRegister i2cSlv3Addr;
            internal I2cSlv3RegRegister i2cSlv3Reg;
            internal I2cSlv3CtrlRegister i2cSlv3Ctrl;
            internal I2cSlv4AddrRegister i2cSlv4Addr;
            internal I2cSlv4RegRegister i2cSlv4Reg;
            internal I2cSlv4DoRegister i2cSlv4Do;
            internal I2cSlv4CtrlRegister i2cSlv4Ctrl;
            internal I2cSlv4DiRegister i2cSlv4Di;
            internal I2cMstStatusRegister i2cMstStatus;
            internal IntPinCfgRegister intPinCfg;
            internal IntEnableRegister intEnable;
            internal IntStatusRegister intStatus;
            internal Accel_xRegister accel_x;
            internal Accel_yRegister accel_y;
            internal Accel_zRegister accel_z;
            internal TempRegister temp;
            internal Gyro_xRegister gyro_x;
            internal Gyro_yRegister gyro_y;
            internal Gyro_zRegister gyro_z;
            internal ExtSensDataRegister extSensData;
            internal I2cSlv0doRegister i2cSlv0do;
            internal I2cSlv1doRegister i2cSlv1do;
            internal I2cSlv2doRegister i2cSlv2do;
            internal I2cSlv3doRegister i2cSlv3do;
            internal I2cMstDelayCtrlRegister i2cMstDelayCtrl;
            internal SignalPathResetRegister signalPathReset;
            internal AccelIntCtrlRegister accelIntCtrl;
            internal UserCtrlRegister userCtrl;
            internal PowerMgmt1Register powerMgmt1;
            internal PowerMgmt2Register powerMgmt2;
            internal FifoCountRegister fifoCount;
            internal FifoRWRegister fifoRW;
            internal WhoAmIRegister whoAmI;
            internal XAccelOffsetRegister xAccelOffset;
            internal YAccelOffsetRegister yAccelOffset;
            internal ZAccelOffsetRegister zAccelOffset;

            internal class Self_test_x_gyroRegister : Register
            {
                internal Self_test_x_gyroRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_y_gyroRegister : Register
            {
                internal Self_test_y_gyroRegister(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_z_gyroRegister : Register
            {
                internal Self_test_z_gyroRegister(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_x_accelRegister : Register
            {
                internal Self_test_x_accelRegister(RegisterManager regManager) : base(regManager, 0x0d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_y_accelRegister : Register
            {
                internal Self_test_y_accelRegister(RegisterManager regManager) : base(regManager, 0x0e, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Self_test_z_accelRegister : Register
            {
                internal Self_test_z_accelRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class XGyroOffsUsrRegister : Register
            {
                internal XGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x13, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class YGyroOffsUsrRegister : Register
            {
                internal YGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x15, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ZGyroOffsUsrRegister : Register
            {
                internal ZGyroOffsUsrRegister(RegisterManager regManager) : base(regManager, 0x17, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class SampleRateDividerRegister : Register
            {
                internal SampleRateDividerRegister(RegisterManager regManager) : base(regManager, 0x19, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ConfigurationRegister : Register
            {
                internal ConfigurationRegister(RegisterManager regManager) : base(regManager, 0x1a, 1, false) { }

                public int dlpf { get; set; }
                public int extSyncSet { get; set; }
                public int fifoMode { get; set; }
                public ExtSyncSets getExtSyncSet() { return (ExtSyncSets)extSyncSet; }
                public void setExtSyncSet(ExtSyncSets enumVal) { extSyncSet = (int)enumVal; }

                internal override long getValue() { return ((dlpf & 0x7) << 0) | ((extSyncSet & 0x7) << 3) | ((fifoMode & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    dlpf = (int)((_value >> 0) & 0x7);
                    extSyncSet = (int)((_value >> 3) & 0x7);
                    fifoMode = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Dlpf: { dlpf } (offset: 0, width: 3)\r\n";
                    retVal += $"ExtSyncSet: { extSyncSet } (offset: 3, width: 3)\r\n";
                    retVal += $"FifoMode: { fifoMode } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class GyroConfigRegister : Register
            {
                internal GyroConfigRegister(RegisterManager regManager) : base(regManager, 0x1b, 1, false) { }

                public int fChoiceBypass { get; set; }
                public int gyroScale { get; set; }
                public int zGyroCten { get; set; }
                public int yGyroCten { get; set; }
                public GyroScales getGyroScale() { return (GyroScales)gyroScale; }
                public void setGyroScale(GyroScales enumVal) { gyroScale = (int)enumVal; }

                internal override long getValue() { return ((fChoiceBypass & 0x3) << 0) | ((gyroScale & 0x3) << 3) | ((zGyroCten & 0x1) << 5) | ((yGyroCten & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    fChoiceBypass = (int)((_value >> 0) & 0x3);
                    gyroScale = (int)((_value >> 3) & 0x3);
                    zGyroCten = (int)((_value >> 5) & 0x1);
                    yGyroCten = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FChoiceBypass: { fChoiceBypass } (offset: 0, width: 2)\r\n";
                    retVal += $"GyroScale: { gyroScale } (offset: 3, width: 2)\r\n";
                    retVal += $"ZGyroCten: { zGyroCten } (offset: 5, width: 1)\r\n";
                    retVal += $"YGyroCten: { yGyroCten } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelConfigRegister : Register
            {
                internal AccelConfigRegister(RegisterManager regManager) : base(regManager, 0x1c, 1, false) { }

                public int accelScale { get; set; }
                public int accelZselfTest { get; set; }
                public int accelYselfTest { get; set; }
                public int accelXselfTest { get; set; }
                public AccelScales getAccelScale() { return (AccelScales)accelScale; }
                public void setAccelScale(AccelScales enumVal) { accelScale = (int)enumVal; }

                internal override long getValue() { return ((accelScale & 0x3) << 3) | ((accelZselfTest & 0x1) << 5) | ((accelYselfTest & 0x1) << 6) | ((accelXselfTest & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    accelScale = (int)((_value >> 3) & 0x3);
                    accelZselfTest = (int)((_value >> 5) & 0x1);
                    accelYselfTest = (int)((_value >> 6) & 0x1);
                    accelXselfTest = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AccelScale: { accelScale } (offset: 3, width: 2)\r\n";
                    retVal += $"AccelZselfTest: { accelZselfTest } (offset: 5, width: 1)\r\n";
                    retVal += $"AccelYselfTest: { accelYselfTest } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelXselfTest: { accelXselfTest } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelConfig2Register : Register
            {
                internal AccelConfig2Register(RegisterManager regManager) : base(regManager, 0x1d, 1, false) { }

                public int dlpfCfg { get; set; }
                public int accelFchoice { get; set; }

                internal override long getValue() { return ((dlpfCfg & 0x7) << 0) | ((accelFchoice & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    dlpfCfg = (int)((_value >> 0) & 0x7);
                    accelFchoice = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"DlpfCfg: { dlpfCfg } (offset: 0, width: 3)\r\n";
                    retVal += $"AccelFchoice: { accelFchoice } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class LowPowerAccelerometerOdrControlRegister : Register
            {
                internal LowPowerAccelerometerOdrControlRegister(RegisterManager regManager) : base(regManager, 0x1e, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class WomThresholdRegister : Register
            {
                internal WomThresholdRegister(RegisterManager regManager) : base(regManager, 0x1f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class FifoEnableRegister : Register
            {
                internal FifoEnableRegister(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int slv0 { get; set; }
                public int slv1 { get; set; }
                public int slv2 { get; set; }
                public int accel { get; set; }
                public int gyroZout { get; set; }
                public int gyroYout { get; set; }
                public int gyroXout { get; set; }
                public int tempOut { get; set; }

                internal override long getValue() { return ((slv0 & 0x1) << 0) | ((slv1 & 0x1) << 1) | ((slv2 & 0x1) << 2) | ((accel & 0x1) << 3) | ((gyroZout & 0x1) << 4) | ((gyroYout & 0x1) << 5) | ((gyroXout & 0x1) << 6) | ((tempOut & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    slv0 = (int)((_value >> 0) & 0x1);
                    slv1 = (int)((_value >> 1) & 0x1);
                    slv2 = (int)((_value >> 2) & 0x1);
                    accel = (int)((_value >> 3) & 0x1);
                    gyroZout = (int)((_value >> 4) & 0x1);
                    gyroYout = (int)((_value >> 5) & 0x1);
                    gyroXout = (int)((_value >> 6) & 0x1);
                    tempOut = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0: { slv0 } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1: { slv1 } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2: { slv2 } (offset: 2, width: 1)\r\n";
                    retVal += $"Accel: { accel } (offset: 3, width: 1)\r\n";
                    retVal += $"GyroZout: { gyroZout } (offset: 4, width: 1)\r\n";
                    retVal += $"GyroYout: { gyroYout } (offset: 5, width: 1)\r\n";
                    retVal += $"GyroXout: { gyroXout } (offset: 6, width: 1)\r\n";
                    retVal += $"TempOut: { tempOut } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cMasterControlRegister : Register
            {
                internal I2cMasterControlRegister(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int i2cMasterClock { get; set; }
                public int i2cMstPnsr { get; set; }
                public int slv3FifoEn { get; set; }
                public int waitForEs { get; set; }
                public int multMstEn { get; set; }

                internal override long getValue() { return ((i2cMasterClock & 0xF) << 0) | ((i2cMstPnsr & 0x1) << 4) | ((slv3FifoEn & 0x1) << 5) | ((waitForEs & 0x1) << 6) | ((multMstEn & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    i2cMasterClock = (int)((_value >> 0) & 0xF);
                    i2cMstPnsr = (int)((_value >> 4) & 0x1);
                    slv3FifoEn = (int)((_value >> 5) & 0x1);
                    waitForEs = (int)((_value >> 6) & 0x1);
                    multMstEn = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"I2cMasterClock: { i2cMasterClock } (offset: 0, width: 4)\r\n";
                    retVal += $"I2cMstPnsr: { i2cMstPnsr } (offset: 4, width: 1)\r\n";
                    retVal += $"Slv3FifoEn: { slv3FifoEn } (offset: 5, width: 1)\r\n";
                    retVal += $"WaitForEs: { waitForEs } (offset: 6, width: 1)\r\n";
                    retVal += $"MultMstEn: { multMstEn } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0AddrRegister : Register
            {
                internal I2cSlv0AddrRegister(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int id { get; set; }
                public int rnw { get; set; }

                internal override long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    id = (int)((_value >> 0) & 0x7F);
                    rnw = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0RegRegister : Register
            {
                internal I2cSlv0RegRegister(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0CtrlRegister : Register
            {
                internal I2cSlv0CtrlRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1AddrRegister : Register
            {
                internal I2cSlv1AddrRegister(RegisterManager regManager) : base(regManager, 0x28, 1, false) { }

                public int id { get; set; }
                public int rnw { get; set; }

                internal override long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    id = (int)((_value >> 0) & 0x7F);
                    rnw = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1RegRegister : Register
            {
                internal I2cSlv1RegRegister(RegisterManager regManager) : base(regManager, 0x29, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1CtrlRegister : Register
            {
                internal I2cSlv1CtrlRegister(RegisterManager regManager) : base(regManager, 0x2a, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2AddrRegister : Register
            {
                internal I2cSlv2AddrRegister(RegisterManager regManager) : base(regManager, 0x2b, 1, false) { }

                public int id { get; set; }
                public int rnw { get; set; }

                internal override long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    id = (int)((_value >> 0) & 0x7F);
                    rnw = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2RegRegister : Register
            {
                internal I2cSlv2RegRegister(RegisterManager regManager) : base(regManager, 0x2c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2CtrlRegister : Register
            {
                internal I2cSlv2CtrlRegister(RegisterManager regManager) : base(regManager, 0x2d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3AddrRegister : Register
            {
                internal I2cSlv3AddrRegister(RegisterManager regManager) : base(regManager, 0x2e, 1, false) { }

                public int id { get; set; }
                public int rnw { get; set; }

                internal override long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    id = (int)((_value >> 0) & 0x7F);
                    rnw = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3RegRegister : Register
            {
                internal I2cSlv3RegRegister(RegisterManager regManager) : base(regManager, 0x2f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3CtrlRegister : Register
            {
                internal I2cSlv3CtrlRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4AddrRegister : Register
            {
                internal I2cSlv4AddrRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int id { get; set; }
                public int rnw { get; set; }

                internal override long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    id = (int)((_value >> 0) & 0x7F);
                    rnw = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Id: { id } (offset: 0, width: 7)\r\n";
                    retVal += $"Rnw: { rnw } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4RegRegister : Register
            {
                internal I2cSlv4RegRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4DoRegister : Register
            {
                internal I2cSlv4DoRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4CtrlRegister : Register
            {
                internal I2cSlv4CtrlRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv4DiRegister : Register
            {
                internal I2cSlv4DiRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cMstStatusRegister : Register
            {
                internal I2cMstStatusRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int slv0Nack { get; set; }
                public int slv1Nack { get; set; }
                public int slv2Nack { get; set; }
                public int slv3Nack { get; set; }
                public int slv4Nack { get; set; }
                public int lostArb { get; set; }
                public int slv4Done { get; set; }
                public int passThrough { get; set; }

                internal override long getValue() { return ((slv0Nack & 0x1) << 0) | ((slv1Nack & 0x1) << 1) | ((slv2Nack & 0x1) << 2) | ((slv3Nack & 0x1) << 3) | ((slv4Nack & 0x1) << 4) | ((lostArb & 0x1) << 5) | ((slv4Done & 0x1) << 6) | ((passThrough & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    slv0Nack = (int)((_value >> 0) & 0x1);
                    slv1Nack = (int)((_value >> 1) & 0x1);
                    slv2Nack = (int)((_value >> 2) & 0x1);
                    slv3Nack = (int)((_value >> 3) & 0x1);
                    slv4Nack = (int)((_value >> 4) & 0x1);
                    lostArb = (int)((_value >> 5) & 0x1);
                    slv4Done = (int)((_value >> 6) & 0x1);
                    passThrough = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0Nack: { slv0Nack } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1Nack: { slv1Nack } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2Nack: { slv2Nack } (offset: 2, width: 1)\r\n";
                    retVal += $"Slv3Nack: { slv3Nack } (offset: 3, width: 1)\r\n";
                    retVal += $"Slv4Nack: { slv4Nack } (offset: 4, width: 1)\r\n";
                    retVal += $"LostArb: { lostArb } (offset: 5, width: 1)\r\n";
                    retVal += $"Slv4Done: { slv4Done } (offset: 6, width: 1)\r\n";
                    retVal += $"PassThrough: { passThrough } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntPinCfgRegister : Register
            {
                internal IntPinCfgRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int bypassEn { get; set; }
                public int fsyncIntModeEnable { get; set; }
                public int actlFsync { get; set; }
                public int intAnyRd2Clear { get; set; }
                public int latchIntEn { get; set; }
                public int open { get; set; }
                public int actl { get; set; }

                internal override long getValue() { return ((bypassEn & 0x1) << 1) | ((fsyncIntModeEnable & 0x1) << 2) | ((actlFsync & 0x1) << 3) | ((intAnyRd2Clear & 0x1) << 4) | ((latchIntEn & 0x1) << 5) | ((open & 0x1) << 6) | ((actl & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    bypassEn = (int)((_value >> 1) & 0x1);
                    fsyncIntModeEnable = (int)((_value >> 2) & 0x1);
                    actlFsync = (int)((_value >> 3) & 0x1);
                    intAnyRd2Clear = (int)((_value >> 4) & 0x1);
                    latchIntEn = (int)((_value >> 5) & 0x1);
                    open = (int)((_value >> 6) & 0x1);
                    actl = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"BypassEn: { bypassEn } (offset: 1, width: 1)\r\n";
                    retVal += $"FsyncIntModeEnable: { fsyncIntModeEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"ActlFsync: { actlFsync } (offset: 3, width: 1)\r\n";
                    retVal += $"IntAnyRd2Clear: { intAnyRd2Clear } (offset: 4, width: 1)\r\n";
                    retVal += $"LatchIntEn: { latchIntEn } (offset: 5, width: 1)\r\n";
                    retVal += $"Open: { open } (offset: 6, width: 1)\r\n";
                    retVal += $"Actl: { actl } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntEnableRegister : Register
            {
                internal IntEnableRegister(RegisterManager regManager) : base(regManager, 0x38, 1, false) { }

                public int RawReadyEnable { get; set; }
                public int fsyncIntEnable { get; set; }
                public int fifoIntEnable { get; set; }
                public int fifoOverflowEnable { get; set; }
                public int womEnable { get; set; }

                internal override long getValue() { return ((RawReadyEnable & 0x1) << 0) | ((fsyncIntEnable & 0x1) << 2) | ((fifoIntEnable & 0x1) << 3) | ((fifoOverflowEnable & 0x1) << 4) | ((womEnable & 0x1) << 1); }
                internal override void setValue(long _value)
                {
                    RawReadyEnable = (int)((_value >> 0) & 0x1);
                    fsyncIntEnable = (int)((_value >> 2) & 0x1);
                    fifoIntEnable = (int)((_value >> 3) & 0x1);
                    fifoOverflowEnable = (int)((_value >> 4) & 0x1);
                    womEnable = (int)((_value >> 1) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RawReadyEnable: { RawReadyEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"FsyncIntEnable: { fsyncIntEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoIntEnable: { fifoIntEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"FifoOverflowEnable: { fifoOverflowEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"WomEnable: { womEnable } (offset: 1, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IntStatusRegister : Register
            {
                internal IntStatusRegister(RegisterManager regManager) : base(regManager, 0x3a, 1, false) { }

                public int rawDataReadyInt { get; set; }
                public int fsyncInt { get; set; }
                public int fifoOverflowInt { get; set; }
                public int womInt { get; set; }

                internal override long getValue() { return ((rawDataReadyInt & 0x1) << 0) | ((fsyncInt & 0x1) << 2) | ((fifoOverflowInt & 0x1) << 3) | ((womInt & 0x1) << 1); }
                internal override void setValue(long _value)
                {
                    rawDataReadyInt = (int)((_value >> 0) & 0x1);
                    fsyncInt = (int)((_value >> 2) & 0x1);
                    fifoOverflowInt = (int)((_value >> 3) & 0x1);
                    womInt = (int)((_value >> 1) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RawDataReadyInt: { rawDataReadyInt } (offset: 0, width: 1)\r\n";
                    retVal += $"FsyncInt: { fsyncInt } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoOverflowInt: { fifoOverflowInt } (offset: 3, width: 1)\r\n";
                    retVal += $"WomInt: { womInt } (offset: 1, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Accel_xRegister : Register
            {
                internal Accel_xRegister(RegisterManager regManager) : base(regManager, 0x3b, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Accel_yRegister : Register
            {
                internal Accel_yRegister(RegisterManager regManager) : base(regManager, 0x3d, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Accel_zRegister : Register
            {
                internal Accel_zRegister(RegisterManager regManager) : base(regManager, 0x3f, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class TempRegister : Register
            {
                internal TempRegister(RegisterManager regManager) : base(regManager, 0x41, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_xRegister : Register
            {
                internal Gyro_xRegister(RegisterManager regManager) : base(regManager, 0x43, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_yRegister : Register
            {
                internal Gyro_yRegister(RegisterManager regManager) : base(regManager, 0x45, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Gyro_zRegister : Register
            {
                internal Gyro_zRegister(RegisterManager regManager) : base(regManager, 0x47, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ExtSensDataRegister : Register
            {
                internal ExtSensDataRegister(RegisterManager regManager) : base(regManager, 0x49, 24, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x0) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x0);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 192)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv0doRegister : Register
            {
                internal I2cSlv0doRegister(RegisterManager regManager) : base(regManager, 0x63, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv1doRegister : Register
            {
                internal I2cSlv1doRegister(RegisterManager regManager) : base(regManager, 0x64, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv2doRegister : Register
            {
                internal I2cSlv2doRegister(RegisterManager regManager) : base(regManager, 0x65, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cSlv3doRegister : Register
            {
                internal I2cSlv3doRegister(RegisterManager regManager) : base(regManager, 0x66, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class I2cMstDelayCtrlRegister : Register
            {
                internal I2cMstDelayCtrlRegister(RegisterManager regManager) : base(regManager, 0x67, 1, false) { }

                public int slv0DelayEn { get; set; }
                public int slv1DelayEn { get; set; }
                public int slv2DelayEn { get; set; }
                public int slv3DelayEn { get; set; }
                public int slv4DelayEn { get; set; }
                public int delayEsShadow { get; set; }

                internal override long getValue() { return ((slv0DelayEn & 0x1) << 0) | ((slv1DelayEn & 0x1) << 1) | ((slv2DelayEn & 0x1) << 2) | ((slv3DelayEn & 0x1) << 3) | ((slv4DelayEn & 0x1) << 4) | ((delayEsShadow & 0x1) << 2); }
                internal override void setValue(long _value)
                {
                    slv0DelayEn = (int)((_value >> 0) & 0x1);
                    slv1DelayEn = (int)((_value >> 1) & 0x1);
                    slv2DelayEn = (int)((_value >> 2) & 0x1);
                    slv3DelayEn = (int)((_value >> 3) & 0x1);
                    slv4DelayEn = (int)((_value >> 4) & 0x1);
                    delayEsShadow = (int)((_value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Slv0DelayEn: { slv0DelayEn } (offset: 0, width: 1)\r\n";
                    retVal += $"Slv1DelayEn: { slv1DelayEn } (offset: 1, width: 1)\r\n";
                    retVal += $"Slv2DelayEn: { slv2DelayEn } (offset: 2, width: 1)\r\n";
                    retVal += $"Slv3DelayEn: { slv3DelayEn } (offset: 3, width: 1)\r\n";
                    retVal += $"Slv4DelayEn: { slv4DelayEn } (offset: 4, width: 1)\r\n";
                    retVal += $"DelayEsShadow: { delayEsShadow } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class SignalPathResetRegister : Register
            {
                internal SignalPathResetRegister(RegisterManager regManager) : base(regManager, 0x68, 1, false) { }

                public int tempReset { get; set; }
                public int accelReset { get; set; }
                public int gyroReset { get; set; }

                internal override long getValue() { return ((tempReset & 0x1) << 0) | ((accelReset & 0x1) << 1) | ((gyroReset & 0x1) << 2); }
                internal override void setValue(long _value)
                {
                    tempReset = (int)((_value >> 0) & 0x1);
                    accelReset = (int)((_value >> 1) & 0x1);
                    gyroReset = (int)((_value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"TempReset: { tempReset } (offset: 0, width: 1)\r\n";
                    retVal += $"AccelReset: { accelReset } (offset: 1, width: 1)\r\n";
                    retVal += $"GyroReset: { gyroReset } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelIntCtrlRegister : Register
            {
                internal AccelIntCtrlRegister(RegisterManager regManager) : base(regManager, 0x69, 1, false) { }

                public int accelIntelMode { get; set; }
                public int accelIntelEnable { get; set; }

                internal override long getValue() { return ((accelIntelMode & 0x1) << 6) | ((accelIntelEnable & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    accelIntelMode = (int)((_value >> 6) & 0x1);
                    accelIntelEnable = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AccelIntelMode: { accelIntelMode } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelIntelEnable: { accelIntelEnable } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class UserCtrlRegister : Register
            {
                internal UserCtrlRegister(RegisterManager regManager) : base(regManager, 0x6a, 1, false) { }

                public int sigConditionReset { get; set; }
                public int i2cMasterReset { get; set; }
                public int fifoReset { get; set; }
                public int i2cIfDisable { get; set; }
                public int i2cMasterEnable { get; set; }
                public int fifoEnable { get; set; }

                internal override long getValue() { return ((sigConditionReset & 0x1) << 0) | ((i2cMasterReset & 0x1) << 1) | ((fifoReset & 0x1) << 2) | ((i2cIfDisable & 0x1) << 1) | ((i2cMasterEnable & 0x1) << 2) | ((fifoEnable & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    sigConditionReset = (int)((_value >> 0) & 0x1);
                    i2cMasterReset = (int)((_value >> 1) & 0x1);
                    fifoReset = (int)((_value >> 2) & 0x1);
                    i2cIfDisable = (int)((_value >> 1) & 0x1);
                    i2cMasterEnable = (int)((_value >> 2) & 0x1);
                    fifoEnable = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SigConditionReset: { sigConditionReset } (offset: 0, width: 1)\r\n";
                    retVal += $"I2cMasterReset: { i2cMasterReset } (offset: 1, width: 1)\r\n";
                    retVal += $"FifoReset: { fifoReset } (offset: 2, width: 1)\r\n";
                    retVal += $"I2cIfDisable: { i2cIfDisable } (offset: 1, width: 1)\r\n";
                    retVal += $"I2cMasterEnable: { i2cMasterEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FifoEnable: { fifoEnable } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class PowerMgmt1Register : Register
            {
                internal PowerMgmt1Register(RegisterManager regManager) : base(regManager, 0x6b, 1, false) { }

                public int clockSel { get; set; }
                public int powerDownPtat { get; set; }
                public int gyroStandby { get; set; }
                public int cycle { get; set; }
                public int sleep { get; set; }
                public int reset { get; set; }
                public ClockSels getClockSel() { return (ClockSels)clockSel; }
                public void setClockSel(ClockSels enumVal) { clockSel = (int)enumVal; }

                internal override long getValue() { return ((clockSel & 0x7) << 0) | ((powerDownPtat & 0x1) << 3) | ((gyroStandby & 0x1) << 4) | ((cycle & 0x1) << 5) | ((sleep & 0x1) << 6) | ((reset & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    clockSel = (int)((_value >> 0) & 0x7);
                    powerDownPtat = (int)((_value >> 3) & 0x1);
                    gyroStandby = (int)((_value >> 4) & 0x1);
                    cycle = (int)((_value >> 5) & 0x1);
                    sleep = (int)((_value >> 6) & 0x1);
                    reset = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ClockSel: { clockSel } (offset: 0, width: 3)\r\n";
                    retVal += $"PowerDownPtat: { powerDownPtat } (offset: 3, width: 1)\r\n";
                    retVal += $"GyroStandby: { gyroStandby } (offset: 4, width: 1)\r\n";
                    retVal += $"Cycle: { cycle } (offset: 5, width: 1)\r\n";
                    retVal += $"Sleep: { sleep } (offset: 6, width: 1)\r\n";
                    retVal += $"Reset: { reset } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class PowerMgmt2Register : Register
            {
                internal PowerMgmt2Register(RegisterManager regManager) : base(regManager, 0x6c, 1, false) { }

                public int disableZG { get; set; }
                public int disableYG { get; set; }
                public int disableXG { get; set; }
                public int disableZA { get; set; }
                public int disableYA { get; set; }
                public int disableXA { get; set; }

                internal override long getValue() { return ((disableZG & 0x1) << 0) | ((disableYG & 0x1) << 1) | ((disableXG & 0x1) << 2) | ((disableZA & 0x1) << 3) | ((disableYA & 0x1) << 4) | ((disableXA & 0x1) << 5); }
                internal override void setValue(long _value)
                {
                    disableZG = (int)((_value >> 0) & 0x1);
                    disableYG = (int)((_value >> 1) & 0x1);
                    disableXG = (int)((_value >> 2) & 0x1);
                    disableZA = (int)((_value >> 3) & 0x1);
                    disableYA = (int)((_value >> 4) & 0x1);
                    disableXA = (int)((_value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"DisableZG: { disableZG } (offset: 0, width: 1)\r\n";
                    retVal += $"DisableYG: { disableYG } (offset: 1, width: 1)\r\n";
                    retVal += $"DisableXG: { disableXG } (offset: 2, width: 1)\r\n";
                    retVal += $"DisableZA: { disableZA } (offset: 3, width: 1)\r\n";
                    retVal += $"DisableYA: { disableYA } (offset: 4, width: 1)\r\n";
                    retVal += $"DisableXA: { disableXA } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class FifoCountRegister : Register
            {
                internal FifoCountRegister(RegisterManager regManager) : base(regManager, 0x72, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x1FFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x1FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 13)\r\n";
                    return retVal;
                }
            }
            internal class FifoRWRegister : Register
            {
                internal FifoRWRegister(RegisterManager regManager) : base(regManager, 0x74, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x75, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class XAccelOffsetRegister : Register
            {
                internal XAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x77, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7FFF) << 1); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
            internal class YAccelOffsetRegister : Register
            {
                internal YAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x7a, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7FFF) << 1); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
            internal class ZAccelOffsetRegister : Register
            {
                internal ZAccelOffsetRegister(RegisterManager regManager) : base(regManager, 0x7d, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7FFF) << 1); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 1) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 1, width: 15)\r\n";
                    return retVal;
                }
            }
        }
    }
}