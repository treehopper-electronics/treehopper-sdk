/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Lis3dh
    {
        internal enum SdoPuDiscs
        {
            SdoPullUpDisconnected = 144,
            SdoPullUpConnected = 16
        }

        internal enum HighPassFilterModeSelections
        {
            NormalMode = 0,
            ReferenceSignal = 1,
            Normal = 2,
            AutoresetOnInterrupt = 3
        }

        internal enum FullScaleSelections
        {
            Scale_2G = 0,
            Scale_4G = 1,
            Scale_8G = 2,
            Scale_16G = 3
        }

        internal enum FifoModes
        {
            Bypass = 0,
            Fifo = 1,
            Stream = 2,
            StreamToFifo = 3
        }

        internal enum OutputDataRates
        {
            PowerDown = 0,
            Hz_1 = 1,
            Hz_10 = 2,
            Hz_25 = 3,
            Hz_50 = 4,
            Hz_100 = 5,
            Hz_200 = 6,
            Hz_400 = 7,
            Hz_1600 = 8,
            Hz_1344_5376 = 9
        }

        protected class Lis3dhRegisters : RegisterManager
        {
            internal Lis3dhRegisters(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                statusRegAux = new StatusRegAuxRegister(this);
                _registers.Add(statusRegAux);
                outAdc1 = new OutAdc1Register(this);
                _registers.Add(outAdc1);
                outAdc2 = new OutAdc2Register(this);
                _registers.Add(outAdc2);
                outAdc3 = new OutAdc3Register(this);
                _registers.Add(outAdc3);
                whoAmI = new WhoAmIRegister(this);
                _registers.Add(whoAmI);
                ctrl0 = new Ctrl0Register(this);
                _registers.Add(ctrl0);
                tempCfgReg = new TempCfgRegRegister(this);
                _registers.Add(tempCfgReg);
                ctrl2 = new Ctrl2Register(this);
                _registers.Add(ctrl2);
                ctrl3 = new Ctrl3Register(this);
                _registers.Add(ctrl3);
                ctrl4 = new Ctrl4Register(this);
                _registers.Add(ctrl4);
                ctrl5 = new Ctrl5Register(this);
                _registers.Add(ctrl5);
                ctrl6 = new Ctrl6Register(this);
                _registers.Add(ctrl6);
                reference = new ReferenceRegister(this);
                _registers.Add(reference);
                status = new StatusRegister(this);
                _registers.Add(status);
                fifoCtrl = new FifoCtrlRegister(this);
                _registers.Add(fifoCtrl);
                fifoSrc = new FifoSrcRegister(this);
                _registers.Add(fifoSrc);
                int1Cfg = new Int1CfgRegister(this);
                _registers.Add(int1Cfg);
                int1Src = new Int1SrcRegister(this);
                _registers.Add(int1Src);
                int1Threshold = new Int1ThresholdRegister(this);
                _registers.Add(int1Threshold);
                int1Duration = new Int1DurationRegister(this);
                _registers.Add(int1Duration);
                int2Cfg = new Int2CfgRegister(this);
                _registers.Add(int2Cfg);
                int2Src = new Int2SrcRegister(this);
                _registers.Add(int2Src);
                int2Threshold = new Int2ThresholdRegister(this);
                _registers.Add(int2Threshold);
                int2Duration = new Int2DurationRegister(this);
                _registers.Add(int2Duration);
                clickSource = new ClickSourceRegister(this);
                _registers.Add(clickSource);
                clickThreshold = new ClickThresholdRegister(this);
                _registers.Add(clickThreshold);
                timeLimit = new TimeLimitRegister(this);
                _registers.Add(timeLimit);
                timeLatency = new TimeLatencyRegister(this);
                _registers.Add(timeLatency);
                timeWindow = new TimeWindowRegister(this);
                _registers.Add(timeWindow);
                activationThreshold = new ActivationThresholdRegister(this);
                _registers.Add(activationThreshold);
                activationDuration = new ActivationDurationRegister(this);
                _registers.Add(activationDuration);
                ctrl1 = new Ctrl1Register(this);
                _registers.Add(ctrl1);
                outX = new OutXRegister(this);
                _registers.Add(outX);
                outY = new OutYRegister(this);
                _registers.Add(outY);
                outZ = new OutZRegister(this);
                _registers.Add(outZ);
            }

            internal StatusRegAuxRegister statusRegAux;
            internal OutAdc1Register outAdc1;
            internal OutAdc2Register outAdc2;
            internal OutAdc3Register outAdc3;
            internal WhoAmIRegister whoAmI;
            internal Ctrl0Register ctrl0;
            internal TempCfgRegRegister tempCfgReg;
            internal Ctrl2Register ctrl2;
            internal Ctrl3Register ctrl3;
            internal Ctrl4Register ctrl4;
            internal Ctrl5Register ctrl5;
            internal Ctrl6Register ctrl6;
            internal ReferenceRegister reference;
            internal StatusRegister status;
            internal FifoCtrlRegister fifoCtrl;
            internal FifoSrcRegister fifoSrc;
            internal Int1CfgRegister int1Cfg;
            internal Int1SrcRegister int1Src;
            internal Int1ThresholdRegister int1Threshold;
            internal Int1DurationRegister int1Duration;
            internal Int2CfgRegister int2Cfg;
            internal Int2SrcRegister int2Src;
            internal Int2ThresholdRegister int2Threshold;
            internal Int2DurationRegister int2Duration;
            internal ClickSourceRegister clickSource;
            internal ClickThresholdRegister clickThreshold;
            internal TimeLimitRegister timeLimit;
            internal TimeLatencyRegister timeLatency;
            internal TimeWindowRegister timeWindow;
            internal ActivationThresholdRegister activationThreshold;
            internal ActivationDurationRegister activationDuration;
            internal Ctrl1Register ctrl1;
            internal OutXRegister outX;
            internal OutYRegister outY;
            internal OutZRegister outZ;

            internal class StatusRegAuxRegister : Register
            {
                internal StatusRegAuxRegister(RegisterManager regManager) : base(regManager, 0x07, 1, false) { }

                public int oneAxisDataAvailable { get; set; }
                public int twoAxisDataAvailable { get; set; }
                public int threeAxisDataAvailable { get; set; }
                public int dataAvailable { get; set; }
                public int oneAxisDataOverrun { get; set; }
                public int twoAxisDataOverrun { get; set; }
                public int dataOverrun { get; set; }

                internal override long getValue() { return ((oneAxisDataAvailable & 0x1) << 0) | ((twoAxisDataAvailable & 0x1) << 1) | ((threeAxisDataAvailable & 0x1) << 2) | ((dataAvailable & 0x1) << 3) | ((oneAxisDataOverrun & 0x1) << 4) | ((twoAxisDataOverrun & 0x1) << 5) | ((dataOverrun & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    oneAxisDataAvailable = (int)((_value >> 0) & 0x1);
                    twoAxisDataAvailable = (int)((_value >> 1) & 0x1);
                    threeAxisDataAvailable = (int)((_value >> 2) & 0x1);
                    dataAvailable = (int)((_value >> 3) & 0x1);
                    oneAxisDataOverrun = (int)((_value >> 4) & 0x1);
                    twoAxisDataOverrun = (int)((_value >> 5) & 0x1);
                    dataOverrun = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"OneAxisDataAvailable: { oneAxisDataAvailable } (offset: 0, width: 1)\r\n";
                    retVal += $"TwoAxisDataAvailable: { twoAxisDataAvailable } (offset: 1, width: 1)\r\n";
                    retVal += $"ThreeAxisDataAvailable: { threeAxisDataAvailable } (offset: 2, width: 1)\r\n";
                    retVal += $"DataAvailable: { dataAvailable } (offset: 3, width: 1)\r\n";
                    retVal += $"OneAxisDataOverrun: { oneAxisDataOverrun } (offset: 4, width: 1)\r\n";
                    retVal += $"TwoAxisDataOverrun: { twoAxisDataOverrun } (offset: 5, width: 1)\r\n";
                    retVal += $"DataOverrun: { dataOverrun } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc1Register : Register
            {
                internal OutAdc1Register(RegisterManager regManager) : base(regManager, 0x08, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc2Register : Register
            {
                internal OutAdc2Register(RegisterManager regManager) : base(regManager, 0x0A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc3Register : Register
            {
                internal OutAdc3Register(RegisterManager regManager) : base(regManager, 0x0C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl0Register : Register
            {
                internal Ctrl0Register(RegisterManager regManager) : base(regManager, 0x1E, 1, false) { }

                public int sdoPuDisc { get; set; }
                public SdoPuDiscs getSdoPuDisc() { return (SdoPuDiscs)sdoPuDisc; }
                public void setSdoPuDisc(SdoPuDiscs enumVal) { sdoPuDisc = (int)enumVal; }

                internal override long getValue() { return ((sdoPuDisc & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    sdoPuDisc = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SdoPuDisc: { sdoPuDisc } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class TempCfgRegRegister : Register
            {
                internal TempCfgRegRegister(RegisterManager regManager) : base(regManager, 0x1F, 1, false) { }

                public int adcEn { get; set; }
                public int tempEn { get; set; }

                internal override long getValue() { return ((adcEn & 0x1) << 7) | ((tempEn & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    adcEn = (int)((_value >> 7) & 0x1);
                    tempEn = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AdcEn: { adcEn } (offset: 7, width: 1)\r\n";
                    retVal += $"TempEn: { tempEn } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x21, 1, false) { }

                public int highPassAoiInt1Enable { get; set; }
                public int highPassAoiInt2Enable { get; set; }
                public int highPassClickEnable { get; set; }
                public int filterDataPassThru { get; set; }
                public int highPassFilterCutoffFrequency { get; set; }
                public int highPassFilterModeSelection { get; set; }
                public HighPassFilterModeSelections getHighPassFilterModeSelection() { return (HighPassFilterModeSelections)highPassFilterModeSelection; }
                public void setHighPassFilterModeSelection(HighPassFilterModeSelections enumVal) { highPassFilterModeSelection = (int)enumVal; }

                internal override long getValue() { return ((highPassAoiInt1Enable & 0x1) << 0) | ((highPassAoiInt2Enable & 0x1) << 1) | ((highPassClickEnable & 0x1) << 2) | ((filterDataPassThru & 0x1) << 3) | ((highPassFilterCutoffFrequency & 0x3) << 4) | ((highPassFilterModeSelection & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    highPassAoiInt1Enable = (int)((_value >> 0) & 0x1);
                    highPassAoiInt2Enable = (int)((_value >> 1) & 0x1);
                    highPassClickEnable = (int)((_value >> 2) & 0x1);
                    filterDataPassThru = (int)((_value >> 3) & 0x1);
                    highPassFilterCutoffFrequency = (int)((_value >> 4) & 0x3);
                    highPassFilterModeSelection = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"HighPassAoiInt1Enable: { highPassAoiInt1Enable } (offset: 0, width: 1)\r\n";
                    retVal += $"HighPassAoiInt2Enable: { highPassAoiInt2Enable } (offset: 1, width: 1)\r\n";
                    retVal += $"HighPassClickEnable: { highPassClickEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FilterDataPassThru: { filterDataPassThru } (offset: 3, width: 1)\r\n";
                    retVal += $"HighPassFilterCutoffFrequency: { highPassFilterCutoffFrequency } (offset: 4, width: 2)\r\n";
                    retVal += $"HighPassFilterModeSelection: { highPassFilterModeSelection } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl3Register : Register
            {
                internal Ctrl3Register(RegisterManager regManager) : base(regManager, 0x22, 1, false) { }

                public int overrun { get; set; }
                public int fifoWatermark { get; set; }
                public int da321 { get; set; }
                public int zyxda { get; set; }
                public int ia2 { get; set; }
                public int ia1 { get; set; }
                public int click { get; set; }

                internal override long getValue() { return ((overrun & 0x1) << 1) | ((fifoWatermark & 0x1) << 2) | ((da321 & 0x1) << 3) | ((zyxda & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    overrun = (int)((_value >> 1) & 0x1);
                    fifoWatermark = (int)((_value >> 2) & 0x1);
                    da321 = (int)((_value >> 3) & 0x1);
                    zyxda = (int)((_value >> 4) & 0x1);
                    ia2 = (int)((_value >> 5) & 0x1);
                    ia1 = (int)((_value >> 6) & 0x1);
                    click = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Overrun: { overrun } (offset: 1, width: 1)\r\n";
                    retVal += $"FifoWatermark: { fifoWatermark } (offset: 2, width: 1)\r\n";
                    retVal += $"Da321: { da321 } (offset: 3, width: 1)\r\n";
                    retVal += $"Zyxda: { zyxda } (offset: 4, width: 1)\r\n";
                    retVal += $"Ia2: { ia2 } (offset: 5, width: 1)\r\n";
                    retVal += $"Ia1: { ia1 } (offset: 6, width: 1)\r\n";
                    retVal += $"Click: { click } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl4Register : Register
            {
                internal Ctrl4Register(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int spiInterfaceMode { get; set; }
                public int selfTestEnable { get; set; }
                public int highResolutionOutput { get; set; }
                public int fullScaleSelection { get; set; }
                public int bigEndian { get; set; }
                public int blockDataUpdate { get; set; }
                public FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
                public void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }

                internal override long getValue() { return ((spiInterfaceMode & 0x1) << 0) | ((selfTestEnable & 0x3) << 1) | ((highResolutionOutput & 0x1) << 3) | ((fullScaleSelection & 0x3) << 4) | ((bigEndian & 0x1) << 6) | ((blockDataUpdate & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    spiInterfaceMode = (int)((_value >> 0) & 0x1);
                    selfTestEnable = (int)((_value >> 1) & 0x3);
                    highResolutionOutput = (int)((_value >> 3) & 0x1);
                    fullScaleSelection = (int)((_value >> 4) & 0x3);
                    bigEndian = (int)((_value >> 6) & 0x1);
                    blockDataUpdate = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SpiInterfaceMode: { spiInterfaceMode } (offset: 0, width: 1)\r\n";
                    retVal += $"SelfTestEnable: { selfTestEnable } (offset: 1, width: 2)\r\n";
                    retVal += $"HighResolutionOutput: { highResolutionOutput } (offset: 3, width: 1)\r\n";
                    retVal += $"FullScaleSelection: { fullScaleSelection } (offset: 4, width: 2)\r\n";
                    retVal += $"BigEndian: { bigEndian } (offset: 6, width: 1)\r\n";
                    retVal += $"BlockDataUpdate: { blockDataUpdate } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl5Register : Register
            {
                internal Ctrl5Register(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int enable4DInt2 { get; set; }
                public int latchInt2 { get; set; }
                public int enable4DInt1 { get; set; }
                public int latchInt1 { get; set; }
                public int fifoEnable { get; set; }
                public int rebootMemoryContent { get; set; }

                internal override long getValue() { return ((enable4DInt2 & 0x1) << 0) | ((latchInt2 & 0x1) << 1) | ((enable4DInt1 & 0x1) << 2) | ((latchInt1 & 0x1) << 3) | ((fifoEnable & 0x1) << 4) | ((rebootMemoryContent & 0x1) << 5); }
                internal override void setValue(long _value)
                {
                    enable4DInt2 = (int)((_value >> 0) & 0x1);
                    latchInt2 = (int)((_value >> 1) & 0x1);
                    enable4DInt1 = (int)((_value >> 2) & 0x1);
                    latchInt1 = (int)((_value >> 3) & 0x1);
                    fifoEnable = (int)((_value >> 4) & 0x1);
                    rebootMemoryContent = (int)((_value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Enable4DInt2: { enable4DInt2 } (offset: 0, width: 1)\r\n";
                    retVal += $"LatchInt2: { latchInt2 } (offset: 1, width: 1)\r\n";
                    retVal += $"Enable4DInt1: { enable4DInt1 } (offset: 2, width: 1)\r\n";
                    retVal += $"LatchInt1: { latchInt1 } (offset: 3, width: 1)\r\n";
                    retVal += $"FifoEnable: { fifoEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"RebootMemoryContent: { rebootMemoryContent } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl6Register : Register
            {
                internal Ctrl6Register(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int intPolarity { get; set; }
                public int act { get; set; }
                public int boot { get; set; }
                public int ia2 { get; set; }
                public int ia1 { get; set; }
                public int click { get; set; }

                internal override long getValue() { return ((intPolarity & 0x1) << 1) | ((act & 0x1) << 3) | ((boot & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    intPolarity = (int)((_value >> 1) & 0x1);
                    act = (int)((_value >> 3) & 0x1);
                    boot = (int)((_value >> 4) & 0x1);
                    ia2 = (int)((_value >> 5) & 0x1);
                    ia1 = (int)((_value >> 6) & 0x1);
                    click = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IntPolarity: { intPolarity } (offset: 1, width: 1)\r\n";
                    retVal += $"Act: { act } (offset: 3, width: 1)\r\n";
                    retVal += $"Boot: { boot } (offset: 4, width: 1)\r\n";
                    retVal += $"Ia2: { ia2 } (offset: 5, width: 1)\r\n";
                    retVal += $"Ia1: { ia1 } (offset: 6, width: 1)\r\n";
                    retVal += $"Click: { click } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceRegister : Register
            {
                internal ReferenceRegister(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int xda { get; set; }
                public int yda { get; set; }
                public int zda { get; set; }
                public int zyxda { get; set; }
                public int x_or { get; set; }
                public int y_or { get; set; }
                public int z_or { get; set; }
                public int zyx_or { get; set; }

                internal override long getValue() { return ((xda & 0x1) << 0) | ((yda & 0x1) << 1) | ((zda & 0x1) << 2) | ((zyxda & 0x1) << 3) | ((x_or & 0x1) << 4) | ((y_or & 0x1) << 5) | ((z_or & 0x1) << 6) | ((zyx_or & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xda = (int)((_value >> 0) & 0x1);
                    yda = (int)((_value >> 1) & 0x1);
                    zda = (int)((_value >> 2) & 0x1);
                    zyxda = (int)((_value >> 3) & 0x1);
                    x_or = (int)((_value >> 4) & 0x1);
                    y_or = (int)((_value >> 5) & 0x1);
                    z_or = (int)((_value >> 6) & 0x1);
                    zyx_or = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Xda: { xda } (offset: 0, width: 1)\r\n";
                    retVal += $"Yda: { yda } (offset: 1, width: 1)\r\n";
                    retVal += $"Zda: { zda } (offset: 2, width: 1)\r\n";
                    retVal += $"Zyxda: { zyxda } (offset: 3, width: 1)\r\n";
                    retVal += $"X_or: { x_or } (offset: 4, width: 1)\r\n";
                    retVal += $"Y_or: { y_or } (offset: 5, width: 1)\r\n";
                    retVal += $"Z_or: { z_or } (offset: 6, width: 1)\r\n";
                    retVal += $"Zyx_or: { zyx_or } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class FifoCtrlRegister : Register
            {
                internal FifoCtrlRegister(RegisterManager regManager) : base(regManager, 0x2E, 1, false) { }

                public int fifoThreshold { get; set; }
                public int triggerSelection { get; set; }
                public int fifoMode { get; set; }
                public FifoModes getFifoMode() { return (FifoModes)fifoMode; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

                internal override long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((triggerSelection & 0x1) << 5) | ((fifoMode & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    fifoThreshold = (int)((_value >> 0) & 0x1F);
                    triggerSelection = (int)((_value >> 5) & 0x1);
                    fifoMode = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoThreshold: { fifoThreshold } (offset: 0, width: 5)\r\n";
                    retVal += $"TriggerSelection: { triggerSelection } (offset: 5, width: 1)\r\n";
                    retVal += $"FifoMode: { fifoMode } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class FifoSrcRegister : Register
            {
                internal FifoSrcRegister(RegisterManager regManager) : base(regManager, 0x2F, 1, false) { }

                public int fss { get; set; }
                public int emtpy { get; set; }
                public int overrunFifo { get; set; }
                public int watermark { get; set; }

                internal override long getValue() { return ((fss & 0x1F) << 0) | ((emtpy & 0x1) << 5) | ((overrunFifo & 0x1) << 6) | ((watermark & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fss = (int)((_value >> 0) & 0x1F);
                    emtpy = (int)((_value >> 5) & 0x1);
                    overrunFifo = (int)((_value >> 6) & 0x1);
                    watermark = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Fss: { fss } (offset: 0, width: 5)\r\n";
                    retVal += $"Emtpy: { emtpy } (offset: 5, width: 1)\r\n";
                    retVal += $"OverrunFifo: { overrunFifo } (offset: 6, width: 1)\r\n";
                    retVal += $"Watermark: { watermark } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1CfgRegister : Register
            {
                internal Int1CfgRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int enableXLowEvent { get; set; }
                public int enableXHighEvent { get; set; }
                public int enableYLowEvent { get; set; }
                public int enableYHighEvent { get; set; }
                public int enableZLowEvent { get; set; }
                public int enableZHighEvent { get; set; }
                public int enable6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    enableXLowEvent = (int)((_value >> 0) & 0x1);
                    enableXHighEvent = (int)((_value >> 1) & 0x1);
                    enableYLowEvent = (int)((_value >> 2) & 0x1);
                    enableYHighEvent = (int)((_value >> 3) & 0x1);
                    enableZLowEvent = (int)((_value >> 4) & 0x1);
                    enableZHighEvent = (int)((_value >> 5) & 0x1);
                    enable6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"EnableXLowEvent: { enableXLowEvent } (offset: 0, width: 1)\r\n";
                    retVal += $"EnableXHighEvent: { enableXHighEvent } (offset: 1, width: 1)\r\n";
                    retVal += $"EnableYLowEvent: { enableYLowEvent } (offset: 2, width: 1)\r\n";
                    retVal += $"EnableYHighEvent: { enableYHighEvent } (offset: 3, width: 1)\r\n";
                    retVal += $"EnableZLowEvent: { enableZLowEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"EnableZHighEvent: { enableZHighEvent } (offset: 5, width: 1)\r\n";
                    retVal += $"Enable6D: { enable6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1SrcRegister : Register
            {
                internal Int1SrcRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int interruptActive { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    interruptActive = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { interruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1ThresholdRegister : Register
            {
                internal Int1ThresholdRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int1DurationRegister : Register
            {
                internal Int1DurationRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int2CfgRegister : Register
            {
                internal Int2CfgRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int enableXLowEvent { get; set; }
                public int enableXHighEvent { get; set; }
                public int enableYLowEvent { get; set; }
                public int enableYHighEvent { get; set; }
                public int enableZLowEvent { get; set; }
                public int enableZHighEvent { get; set; }
                public int enable6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    enableXLowEvent = (int)((_value >> 0) & 0x1);
                    enableXHighEvent = (int)((_value >> 1) & 0x1);
                    enableYLowEvent = (int)((_value >> 2) & 0x1);
                    enableYHighEvent = (int)((_value >> 3) & 0x1);
                    enableZLowEvent = (int)((_value >> 4) & 0x1);
                    enableZHighEvent = (int)((_value >> 5) & 0x1);
                    enable6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"EnableXLowEvent: { enableXLowEvent } (offset: 0, width: 1)\r\n";
                    retVal += $"EnableXHighEvent: { enableXHighEvent } (offset: 1, width: 1)\r\n";
                    retVal += $"EnableYLowEvent: { enableYLowEvent } (offset: 2, width: 1)\r\n";
                    retVal += $"EnableYHighEvent: { enableYHighEvent } (offset: 3, width: 1)\r\n";
                    retVal += $"EnableZLowEvent: { enableZLowEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"EnableZHighEvent: { enableZHighEvent } (offset: 5, width: 1)\r\n";
                    retVal += $"Enable6D: { enable6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int2SrcRegister : Register
            {
                internal Int2SrcRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int interruptActive { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    interruptActive = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { interruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int2ThresholdRegister : Register
            {
                internal Int2ThresholdRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int2DurationRegister : Register
            {
                internal Int2DurationRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ClickSourceRegister : Register
            {
                internal ClickSourceRegister(RegisterManager regManager) : base(regManager, 0x39, 1, false) { }

                public int x { get; set; }
                public int y { get; set; }
                public int z { get; set; }
                public int sign { get; set; }
                public int singleClickEnable { get; set; }
                public int doubleClickEnable { get; set; }
                public int interruptActive { get; set; }

                internal override long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEnable & 0x1) << 4) | ((doubleClickEnable & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    x = (int)((_value >> 0) & 0x1);
                    y = (int)((_value >> 1) & 0x1);
                    z = (int)((_value >> 2) & 0x1);
                    sign = (int)((_value >> 3) & 0x1);
                    singleClickEnable = (int)((_value >> 4) & 0x1);
                    doubleClickEnable = (int)((_value >> 5) & 0x1);
                    interruptActive = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { x } (offset: 0, width: 1)\r\n";
                    retVal += $"Y: { y } (offset: 1, width: 1)\r\n";
                    retVal += $"Z: { z } (offset: 2, width: 1)\r\n";
                    retVal += $"Sign: { sign } (offset: 3, width: 1)\r\n";
                    retVal += $"SingleClickEnable: { singleClickEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"DoubleClickEnable: { doubleClickEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { interruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickThresholdRegister : Register
            {
                internal ClickThresholdRegister(RegisterManager regManager) : base(regManager, 0x3A, 1, false) { }

                public int threshold { get; set; }
                public int lirClick { get; set; }

                internal override long getValue() { return ((threshold & 0x7F) << 0) | ((lirClick & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    threshold = (int)((_value >> 0) & 0x7F);
                    lirClick = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Threshold: { threshold } (offset: 0, width: 7)\r\n";
                    retVal += $"LirClick: { lirClick } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class TimeLimitRegister : Register
            {
                internal TimeLimitRegister(RegisterManager regManager) : base(regManager, 0x3B, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLatencyRegister : Register
            {
                internal TimeLatencyRegister(RegisterManager regManager) : base(regManager, 0x3C, 10, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7FFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 79)\r\n";
                    return retVal;
                }
            }
            internal class TimeWindowRegister : Register
            {
                internal TimeWindowRegister(RegisterManager regManager) : base(regManager, 0x3D, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ActivationThresholdRegister : Register
            {
                internal ActivationThresholdRegister(RegisterManager regManager) : base(regManager, 0x3E, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ActivationDurationRegister : Register
            {
                internal ActivationDurationRegister(RegisterManager regManager) : base(regManager, 0x3F, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0xA0, 1, false) { }

                public int xAxisEnable { get; set; }
                public int yAxisEnable { get; set; }
                public int zAxisEnable { get; set; }
                public int lowPowerEnable { get; set; }
                public int outputDataRate { get; set; }
                public OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

                internal override long getValue() { return ((xAxisEnable & 0x1) << 0) | ((yAxisEnable & 0x1) << 1) | ((zAxisEnable & 0x1) << 2) | ((lowPowerEnable & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
                internal override void setValue(long _value)
                {
                    xAxisEnable = (int)((_value >> 0) & 0x1);
                    yAxisEnable = (int)((_value >> 1) & 0x1);
                    zAxisEnable = (int)((_value >> 2) & 0x1);
                    lowPowerEnable = (int)((_value >> 3) & 0x1);
                    outputDataRate = (int)((_value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XAxisEnable: { xAxisEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"YAxisEnable: { yAxisEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZAxisEnable: { zAxisEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"LowPowerEnable: { lowPowerEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"OutputDataRate: { outputDataRate } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class OutXRegister : Register
            {
                internal OutXRegister(RegisterManager regManager) : base(regManager, 0xA8, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutYRegister : Register
            {
                internal OutYRegister(RegisterManager regManager) : base(regManager, 0xAA, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutZRegister : Register
            {
                internal OutZRegister(RegisterManager regManager) : base(regManager, 0xAC, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x3FF) << 6); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
        }
    }
}