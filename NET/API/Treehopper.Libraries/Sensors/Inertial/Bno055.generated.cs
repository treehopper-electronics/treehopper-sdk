/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Bno055
    {
        internal enum OperatingModes
        {
            ConfigMode = 0,
            AccelOnly = 1,
            MagOnly = 2,
            GyroOnly = 3,
            AccelMag = 4,
            AccelGyro = 5,
            MagGyro = 6,
            AccelMagGyro = 7,
            IMU = 8,
            Compass = 9,
            MagnetForGyroscope = 10,
            NdofFmcOff = 11,
            NineDegreesOfFreedom = 12
        }

        internal enum PowerModes
        {
            Normal = 0,
            LowPower = 1,
            Suspend = 2
        }

        protected class Bno055Registers : RegisterManager
        {
            internal Bno055Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                chipId = new ChipIdRegister(this);
                _registers.Add(chipId);
                accelChipId = new AccelChipIdRegister(this);
                _registers.Add(accelChipId);
                magChipId = new MagChipIdRegister(this);
                _registers.Add(magChipId);
                gyroChipId = new GyroChipIdRegister(this);
                _registers.Add(gyroChipId);
                swRevision = new SwRevisionRegister(this);
                _registers.Add(swRevision);
                bootloaderVersion = new BootloaderVersionRegister(this);
                _registers.Add(bootloaderVersion);
                pageId = new PageIdRegister(this);
                _registers.Add(pageId);
                accelX = new AccelXRegister(this);
                _registers.Add(accelX);
                accelY = new AccelYRegister(this);
                _registers.Add(accelY);
                accelZ = new AccelZRegister(this);
                _registers.Add(accelZ);
                magnetometerX = new MagnetometerXRegister(this);
                _registers.Add(magnetometerX);
                magnetometerY = new MagnetometerYRegister(this);
                _registers.Add(magnetometerY);
                magnetometerZ = new MagnetometerZRegister(this);
                _registers.Add(magnetometerZ);
                gyroX = new GyroXRegister(this);
                _registers.Add(gyroX);
                gyroY = new GyroYRegister(this);
                _registers.Add(gyroY);
                gyroZ = new GyroZRegister(this);
                _registers.Add(gyroZ);
                eulHeading = new EulHeadingRegister(this);
                _registers.Add(eulHeading);
                eulRoll = new EulRollRegister(this);
                _registers.Add(eulRoll);
                eulPitch = new EulPitchRegister(this);
                _registers.Add(eulPitch);
                quaW = new QuaWRegister(this);
                _registers.Add(quaW);
                quaX = new QuaXRegister(this);
                _registers.Add(quaX);
                quaY = new QuaYRegister(this);
                _registers.Add(quaY);
                quaZ = new QuaZRegister(this);
                _registers.Add(quaZ);
                linX = new LinXRegister(this);
                _registers.Add(linX);
                linY = new LinYRegister(this);
                _registers.Add(linY);
                linZ = new LinZRegister(this);
                _registers.Add(linZ);
                gravX = new GravXRegister(this);
                _registers.Add(gravX);
                gravY = new GravYRegister(this);
                _registers.Add(gravY);
                gravZ = new GravZRegister(this);
                _registers.Add(gravZ);
                temp = new TempRegister(this);
                _registers.Add(temp);
                calibStat = new CalibStatRegister(this);
                _registers.Add(calibStat);
                selfTestResult = new SelfTestResultRegister(this);
                _registers.Add(selfTestResult);
                interruptStatus = new InterruptStatusRegister(this);
                _registers.Add(interruptStatus);
                sysClockStatus = new SysClockStatusRegister(this);
                _registers.Add(sysClockStatus);
                sysStatus = new SysStatusRegister(this);
                _registers.Add(sysStatus);
                sysErr = new SysErrRegister(this);
                _registers.Add(sysErr);
                unitSel = new UnitSelRegister(this);
                _registers.Add(unitSel);
                operatingMode = new OperatingModeRegister(this);
                _registers.Add(operatingMode);
                powerMode = new PowerModeRegister(this);
                _registers.Add(powerMode);
                sysTrigger = new SysTriggerRegister(this);
                _registers.Add(sysTrigger);
                tempSource = new TempSourceRegister(this);
                _registers.Add(tempSource);
                axisMapConfig = new AxisMapConfigRegister(this);
                _registers.Add(axisMapConfig);
                axisMapSign = new AxisMapSignRegister(this);
                _registers.Add(axisMapSign);
                accelOffsetX = new AccelOffsetXRegister(this);
                _registers.Add(accelOffsetX);
                accelOffsetY = new AccelOffsetYRegister(this);
                _registers.Add(accelOffsetY);
                accelOffsetZ = new AccelOffsetZRegister(this);
                _registers.Add(accelOffsetZ);
                magnetometerOffsetX = new MagnetometerOffsetXRegister(this);
                _registers.Add(magnetometerOffsetX);
                magnetometerOffsetY = new MagnetometerOffsetYRegister(this);
                _registers.Add(magnetometerOffsetY);
                magnetometerOffsetZ = new MagnetometerOffsetZRegister(this);
                _registers.Add(magnetometerOffsetZ);
                gyroOffsetX = new GyroOffsetXRegister(this);
                _registers.Add(gyroOffsetX);
                gyroOffsetY = new GyroOffsetYRegister(this);
                _registers.Add(gyroOffsetY);
                gyroOffsetZ = new GyroOffsetZRegister(this);
                _registers.Add(gyroOffsetZ);
                accelRadius = new AccelRadiusRegister(this);
                _registers.Add(accelRadius);
                magRadius = new MagRadiusRegister(this);
                _registers.Add(magRadius);
            }

            internal ChipIdRegister chipId;
            internal AccelChipIdRegister accelChipId;
            internal MagChipIdRegister magChipId;
            internal GyroChipIdRegister gyroChipId;
            internal SwRevisionRegister swRevision;
            internal BootloaderVersionRegister bootloaderVersion;
            internal PageIdRegister pageId;
            internal AccelXRegister accelX;
            internal AccelYRegister accelY;
            internal AccelZRegister accelZ;
            internal MagnetometerXRegister magnetometerX;
            internal MagnetometerYRegister magnetometerY;
            internal MagnetometerZRegister magnetometerZ;
            internal GyroXRegister gyroX;
            internal GyroYRegister gyroY;
            internal GyroZRegister gyroZ;
            internal EulHeadingRegister eulHeading;
            internal EulRollRegister eulRoll;
            internal EulPitchRegister eulPitch;
            internal QuaWRegister quaW;
            internal QuaXRegister quaX;
            internal QuaYRegister quaY;
            internal QuaZRegister quaZ;
            internal LinXRegister linX;
            internal LinYRegister linY;
            internal LinZRegister linZ;
            internal GravXRegister gravX;
            internal GravYRegister gravY;
            internal GravZRegister gravZ;
            internal TempRegister temp;
            internal CalibStatRegister calibStat;
            internal SelfTestResultRegister selfTestResult;
            internal InterruptStatusRegister interruptStatus;
            internal SysClockStatusRegister sysClockStatus;
            internal SysStatusRegister sysStatus;
            internal SysErrRegister sysErr;
            internal UnitSelRegister unitSel;
            internal OperatingModeRegister operatingMode;
            internal PowerModeRegister powerMode;
            internal SysTriggerRegister sysTrigger;
            internal TempSourceRegister tempSource;
            internal AxisMapConfigRegister axisMapConfig;
            internal AxisMapSignRegister axisMapSign;
            internal AccelOffsetXRegister accelOffsetX;
            internal AccelOffsetYRegister accelOffsetY;
            internal AccelOffsetZRegister accelOffsetZ;
            internal MagnetometerOffsetXRegister magnetometerOffsetX;
            internal MagnetometerOffsetYRegister magnetometerOffsetY;
            internal MagnetometerOffsetZRegister magnetometerOffsetZ;
            internal GyroOffsetXRegister gyroOffsetX;
            internal GyroOffsetYRegister gyroOffsetY;
            internal GyroOffsetZRegister gyroOffsetZ;
            internal AccelRadiusRegister accelRadius;
            internal MagRadiusRegister magRadius;

            internal class ChipIdRegister : Register
            {
                internal ChipIdRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class AccelChipIdRegister : Register
            {
                internal AccelChipIdRegister(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class MagChipIdRegister : Register
            {
                internal MagChipIdRegister(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class GyroChipIdRegister : Register
            {
                internal GyroChipIdRegister(RegisterManager regManager) : base(regManager, 0x03, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class SwRevisionRegister : Register
            {
                internal SwRevisionRegister(RegisterManager regManager) : base(regManager, 0x04, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFFFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class BootloaderVersionRegister : Register
            {
                internal BootloaderVersionRegister(RegisterManager regManager) : base(regManager, 0x06, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class PageIdRegister : Register
            {
                internal PageIdRegister(RegisterManager regManager) : base(regManager, 0x07, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class AccelXRegister : Register
            {
                internal AccelXRegister(RegisterManager regManager) : base(regManager, 0x08, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class AccelYRegister : Register
            {
                internal AccelYRegister(RegisterManager regManager) : base(regManager, 0x0A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class AccelZRegister : Register
            {
                internal AccelZRegister(RegisterManager regManager) : base(regManager, 0x0C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerXRegister : Register
            {
                internal MagnetometerXRegister(RegisterManager regManager) : base(regManager, 0x0E, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerYRegister : Register
            {
                internal MagnetometerYRegister(RegisterManager regManager) : base(regManager, 0x10, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerZRegister : Register
            {
                internal MagnetometerZRegister(RegisterManager regManager) : base(regManager, 0x12, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroXRegister : Register
            {
                internal GyroXRegister(RegisterManager regManager) : base(regManager, 0x14, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroYRegister : Register
            {
                internal GyroYRegister(RegisterManager regManager) : base(regManager, 0x16, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroZRegister : Register
            {
                internal GyroZRegister(RegisterManager regManager) : base(regManager, 0x18, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class EulHeadingRegister : Register
            {
                internal EulHeadingRegister(RegisterManager regManager) : base(regManager, 0x1A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class EulRollRegister : Register
            {
                internal EulRollRegister(RegisterManager regManager) : base(regManager, 0x1C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class EulPitchRegister : Register
            {
                internal EulPitchRegister(RegisterManager regManager) : base(regManager, 0x1E, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class QuaWRegister : Register
            {
                internal QuaWRegister(RegisterManager regManager) : base(regManager, 0x20, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class QuaXRegister : Register
            {
                internal QuaXRegister(RegisterManager regManager) : base(regManager, 0x22, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class QuaYRegister : Register
            {
                internal QuaYRegister(RegisterManager regManager) : base(regManager, 0x24, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class QuaZRegister : Register
            {
                internal QuaZRegister(RegisterManager regManager) : base(regManager, 0x26, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class LinXRegister : Register
            {
                internal LinXRegister(RegisterManager regManager) : base(regManager, 0x28, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class LinYRegister : Register
            {
                internal LinYRegister(RegisterManager regManager) : base(regManager, 0x2A, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class LinZRegister : Register
            {
                internal LinZRegister(RegisterManager regManager) : base(regManager, 0x2C, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GravXRegister : Register
            {
                internal GravXRegister(RegisterManager regManager) : base(regManager, 0x2E, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GravYRegister : Register
            {
                internal GravYRegister(RegisterManager regManager) : base(regManager, 0x30, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GravZRegister : Register
            {
                internal GravZRegister(RegisterManager regManager) : base(regManager, 0x32, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class TempRegister : Register
            {
                internal TempRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class CalibStatRegister : Register
            {
                internal CalibStatRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int magCalibStatus { get; set; }
                public int accelCalibStatus { get; set; }
                public int gyroCalibStatus { get; set; }
                public int sysCalibStatus { get; set; }

                internal override long getValue() { return ((magCalibStatus & 0x3) << 0) | ((accelCalibStatus & 0x3) << 2) | ((gyroCalibStatus & 0x3) << 4) | ((sysCalibStatus & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    magCalibStatus = (int)((_value >> 0) & 0x3);
                    accelCalibStatus = (int)((_value >> 2) & 0x3);
                    gyroCalibStatus = (int)((_value >> 4) & 0x3);
                    sysCalibStatus = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"MagCalibStatus: { magCalibStatus } (offset: 0, width: 2)\r\n";
                    retVal += $"AccelCalibStatus: { accelCalibStatus } (offset: 2, width: 2)\r\n";
                    retVal += $"GyroCalibStatus: { gyroCalibStatus } (offset: 4, width: 2)\r\n";
                    retVal += $"SysCalibStatus: { sysCalibStatus } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class SelfTestResultRegister : Register
            {
                internal SelfTestResultRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int accel { get; set; }
                public int mag { get; set; }
                public int gyro { get; set; }
                public int mcu { get; set; }

                internal override long getValue() { return ((accel & 0x1) << 0) | ((mag & 0x1) << 1) | ((gyro & 0x1) << 2) | ((mcu & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    accel = (int)((_value >> 0) & 0x1);
                    mag = (int)((_value >> 1) & 0x1);
                    gyro = (int)((_value >> 2) & 0x1);
                    mcu = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Accel: { accel } (offset: 0, width: 1)\r\n";
                    retVal += $"Mag: { mag } (offset: 1, width: 1)\r\n";
                    retVal += $"Gyro: { gyro } (offset: 2, width: 1)\r\n";
                    retVal += $"Mcu: { mcu } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InterruptStatusRegister : Register
            {
                internal InterruptStatusRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int gyroAnyMotion { get; set; }
                public int gyroHighRate { get; set; }
                public int accelHighG { get; set; }
                public int accelAnyMotion { get; set; }
                public int accelNoMotion { get; set; }

                internal override long getValue() { return ((gyroAnyMotion & 0x1) << 2) | ((gyroHighRate & 0x1) << 3) | ((accelHighG & 0x1) << 5) | ((accelAnyMotion & 0x1) << 6) | ((accelNoMotion & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    gyroAnyMotion = (int)((_value >> 2) & 0x1);
                    gyroHighRate = (int)((_value >> 3) & 0x1);
                    accelHighG = (int)((_value >> 5) & 0x1);
                    accelAnyMotion = (int)((_value >> 6) & 0x1);
                    accelNoMotion = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"GyroAnyMotion: { gyroAnyMotion } (offset: 2, width: 1)\r\n";
                    retVal += $"GyroHighRate: { gyroHighRate } (offset: 3, width: 1)\r\n";
                    retVal += $"AccelHighG: { accelHighG } (offset: 5, width: 1)\r\n";
                    retVal += $"AccelAnyMotion: { accelAnyMotion } (offset: 6, width: 1)\r\n";
                    retVal += $"AccelNoMotion: { accelNoMotion } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class SysClockStatusRegister : Register
            {
                internal SysClockStatusRegister(RegisterManager regManager) : base(regManager, 0x38, 1, false) { }

                public int mainClock { get; set; }

                internal override long getValue() { return ((mainClock & 0x1) << 0); }
                internal override void setValue(long _value)
                {
                    mainClock = (int)((_value >> 0) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"MainClock: { mainClock } (offset: 0, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class SysStatusRegister : Register
            {
                internal SysStatusRegister(RegisterManager regManager) : base(regManager, 0x39, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class SysErrRegister : Register
            {
                internal SysErrRegister(RegisterManager regManager) : base(regManager, 0x3a, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class UnitSelRegister : Register
            {
                internal UnitSelRegister(RegisterManager regManager) : base(regManager, 0x3b, 1, false) { }

                public int accel { get; set; }
                public int gyro { get; set; }
                public int eular { get; set; }
                public int temp { get; set; }
                public int orientationMode { get; set; }

                internal override long getValue() { return ((accel & 0x1) << 0) | ((gyro & 0x1) << 1) | ((eular & 0x1) << 2) | ((temp & 0x1) << 4) | ((orientationMode & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    accel = (int)((_value >> 0) & 0x1);
                    gyro = (int)((_value >> 1) & 0x1);
                    eular = (int)((_value >> 2) & 0x1);
                    temp = (int)((_value >> 4) & 0x1);
                    orientationMode = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Accel: { accel } (offset: 0, width: 1)\r\n";
                    retVal += $"Gyro: { gyro } (offset: 1, width: 1)\r\n";
                    retVal += $"Eular: { eular } (offset: 2, width: 1)\r\n";
                    retVal += $"Temp: { temp } (offset: 4, width: 1)\r\n";
                    retVal += $"OrientationMode: { orientationMode } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OperatingModeRegister : Register
            {
                internal OperatingModeRegister(RegisterManager regManager) : base(regManager, 0x3d, 1, false) { }

                public int operatingMode { get; set; }
                public OperatingModes getOperatingMode() { return (OperatingModes)operatingMode; }
                public void setOperatingMode(OperatingModes enumVal) { operatingMode = (int)enumVal; }

                internal override long getValue() { return ((operatingMode & 0xF) << 0); }
                internal override void setValue(long _value)
                {
                    operatingMode = (int)((_value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"OperatingMode: { operatingMode } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class PowerModeRegister : Register
            {
                internal PowerModeRegister(RegisterManager regManager) : base(regManager, 0x3e, 1, false) { }

                public int powerMode { get; set; }
                public PowerModes getPowerMode() { return (PowerModes)powerMode; }
                public void setPowerMode(PowerModes enumVal) { powerMode = (int)enumVal; }

                internal override long getValue() { return ((powerMode & 0x3) << 0); }
                internal override void setValue(long _value)
                {
                    powerMode = (int)((_value >> 0) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"PowerMode: { powerMode } (offset: 0, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class SysTriggerRegister : Register
            {
                internal SysTriggerRegister(RegisterManager regManager) : base(regManager, 0x3f, 1, false) { }

                public int selfTest { get; set; }
                public int resetSys { get; set; }
                public int resetInt { get; set; }
                public int clockSel { get; set; }

                internal override long getValue() { return ((selfTest & 0x1) << 0) | ((resetSys & 0x1) << 5) | ((resetInt & 0x1) << 6) | ((clockSel & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    selfTest = (int)((_value >> 0) & 0x1);
                    resetSys = (int)((_value >> 5) & 0x1);
                    resetInt = (int)((_value >> 6) & 0x1);
                    clockSel = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SelfTest: { selfTest } (offset: 0, width: 1)\r\n";
                    retVal += $"ResetSys: { resetSys } (offset: 5, width: 1)\r\n";
                    retVal += $"ResetInt: { resetInt } (offset: 6, width: 1)\r\n";
                    retVal += $"ClockSel: { clockSel } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class TempSourceRegister : Register
            {
                internal TempSourceRegister(RegisterManager regManager) : base(regManager, 0x40, 1, false) { }

                public int source { get; set; }

                internal override long getValue() { return ((source & 0x3) << 0); }
                internal override void setValue(long _value)
                {
                    source = (int)((_value >> 0) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Source: { source } (offset: 0, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class AxisMapConfigRegister : Register
            {
                internal AxisMapConfigRegister(RegisterManager regManager) : base(regManager, 0x41, 1, false) { }

                public int x { get; set; }
                public int y { get; set; }
                public int z { get; set; }

                internal override long getValue() { return ((x & 0x3) << 0) | ((y & 0x3) << 2) | ((z & 0x3) << 4); }
                internal override void setValue(long _value)
                {
                    x = (int)((_value >> 0) & 0x3);
                    y = (int)((_value >> 2) & 0x3);
                    z = (int)((_value >> 4) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { x } (offset: 0, width: 2)\r\n";
                    retVal += $"Y: { y } (offset: 2, width: 2)\r\n";
                    retVal += $"Z: { z } (offset: 4, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class AxisMapSignRegister : Register
            {
                internal AxisMapSignRegister(RegisterManager regManager) : base(regManager, 0x41, 1, false) { }

                public int x { get; set; }
                public int y { get; set; }
                public int z { get; set; }

                internal override long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2); }
                internal override void setValue(long _value)
                {
                    x = (int)((_value >> 0) & 0x1);
                    y = (int)((_value >> 1) & 0x1);
                    z = (int)((_value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { x } (offset: 0, width: 1)\r\n";
                    retVal += $"Y: { y } (offset: 1, width: 1)\r\n";
                    retVal += $"Z: { z } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AccelOffsetXRegister : Register
            {
                internal AccelOffsetXRegister(RegisterManager regManager) : base(regManager, 0x55, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class AccelOffsetYRegister : Register
            {
                internal AccelOffsetYRegister(RegisterManager regManager) : base(regManager, 0x57, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class AccelOffsetZRegister : Register
            {
                internal AccelOffsetZRegister(RegisterManager regManager) : base(regManager, 0x59, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerOffsetXRegister : Register
            {
                internal MagnetometerOffsetXRegister(RegisterManager regManager) : base(regManager, 0x5B, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerOffsetYRegister : Register
            {
                internal MagnetometerOffsetYRegister(RegisterManager regManager) : base(regManager, 0x5D, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagnetometerOffsetZRegister : Register
            {
                internal MagnetometerOffsetZRegister(RegisterManager regManager) : base(regManager, 0x5F, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroOffsetXRegister : Register
            {
                internal GyroOffsetXRegister(RegisterManager regManager) : base(regManager, 0x61, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroOffsetYRegister : Register
            {
                internal GyroOffsetYRegister(RegisterManager regManager) : base(regManager, 0x63, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class GyroOffsetZRegister : Register
            {
                internal GyroOffsetZRegister(RegisterManager regManager) : base(regManager, 0x65, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class AccelRadiusRegister : Register
            {
                internal AccelRadiusRegister(RegisterManager regManager) : base(regManager, 0x67, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class MagRadiusRegister : Register
            {
                internal MagRadiusRegister(RegisterManager regManager) : base(regManager, 0x69, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
        }
    }
}