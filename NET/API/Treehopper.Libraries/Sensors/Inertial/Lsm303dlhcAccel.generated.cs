/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Lsm303dlhcAccel
    {
        internal enum OutputDataRates
        {
            powerDown = 0,
            Hz_1 = 1,
            Hz_10 = 2,
            Hz_25 = 3,
            Hz_50 = 4,
            Hz_100 = 5,
            Hz_200 = 6,
            Hz_400 = 7,
            Lp_1620Hz = 8,
            Hz_1344_LP_5376Hz = 9
        }

        internal enum AccelhighPassModes
        {
            Reset = 0,
            ReferenceSignal = 1,
            Normal = 2,
            AutoResetOnInterrupt = 3
        }

        internal enum FullScaleSelections
        {
            Fs_2g = 0,
            Fs_4g = 1,
            Fs_6g = 2,
            Fs_8g = 3,
            Fs_16g = 4
        }

        internal enum FifoModes
        {
            Bypass = 0,
            Fifo = 1,
            Stream = 2,
            StreamToFifo = 3,
            BypassToStream = 4
        }

        protected class Lsm303dlhcAccelRegisters : RegisterManager
        {
            internal Lsm303dlhcAccelRegisters(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                ctrl1 = new Ctrl1Register(this);
                _registers.Add(ctrl1);
                ctrl2 = new Ctrl2Register(this);
                _registers.Add(ctrl2);
                ctrl3 = new Ctrl3Register(this);
                _registers.Add(ctrl3);
                ctrl4 = new Ctrl4Register(this);
                _registers.Add(ctrl4);
                ctrl5 = new Ctrl5Register(this);
                _registers.Add(ctrl5);
                ctrl6 = new Ctrl6Register(this);
                _registers.Add(ctrl6);
                reference = new ReferenceRegister(this);
                _registers.Add(reference);
                status = new StatusRegister(this);
                _registers.Add(status);
                fifoControl = new FifoControlRegister(this);
                _registers.Add(fifoControl);
                fifoSource = new FifoSourceRegister(this);
                _registers.Add(fifoSource);
                inertialIntGen1Config = new InertialIntGen1ConfigRegister(this);
                _registers.Add(inertialIntGen1Config);
                inertialIntGen1Status = new InertialIntGen1StatusRegister(this);
                _registers.Add(inertialIntGen1Status);
                inertialIntGen1Threshold = new InertialIntGen1ThresholdRegister(this);
                _registers.Add(inertialIntGen1Threshold);
                inertialIntGen1Duration = new InertialIntGen1DurationRegister(this);
                _registers.Add(inertialIntGen1Duration);
                inertialIntGen2Config = new InertialIntGen2ConfigRegister(this);
                _registers.Add(inertialIntGen2Config);
                inertialIntGen2Status = new InertialIntGen2StatusRegister(this);
                _registers.Add(inertialIntGen2Status);
                inertialIntGen2Threshold = new InertialIntGen2ThresholdRegister(this);
                _registers.Add(inertialIntGen2Threshold);
                inertialIntGen2Duration = new InertialIntGen2DurationRegister(this);
                _registers.Add(inertialIntGen2Duration);
                clickConfig = new ClickConfigRegister(this);
                _registers.Add(clickConfig);
                clickSource = new ClickSourceRegister(this);
                _registers.Add(clickSource);
                clickThreshold = new ClickThresholdRegister(this);
                _registers.Add(clickThreshold);
                timeLimit = new TimeLimitRegister(this);
                _registers.Add(timeLimit);
                timeLatency = new TimeLatencyRegister(this);
                _registers.Add(timeLatency);
                timeWindow = new TimeWindowRegister(this);
                _registers.Add(timeWindow);
                outAccelX = new OutAccelXRegister(this);
                _registers.Add(outAccelX);
                outAccelY = new OutAccelYRegister(this);
                _registers.Add(outAccelY);
                outAccelZ = new OutAccelZRegister(this);
                _registers.Add(outAccelZ);
            }

            internal Ctrl1Register ctrl1;
            internal Ctrl2Register ctrl2;
            internal Ctrl3Register ctrl3;
            internal Ctrl4Register ctrl4;
            internal Ctrl5Register ctrl5;
            internal Ctrl6Register ctrl6;
            internal ReferenceRegister reference;
            internal StatusRegister status;
            internal FifoControlRegister fifoControl;
            internal FifoSourceRegister fifoSource;
            internal InertialIntGen1ConfigRegister inertialIntGen1Config;
            internal InertialIntGen1StatusRegister inertialIntGen1Status;
            internal InertialIntGen1ThresholdRegister inertialIntGen1Threshold;
            internal InertialIntGen1DurationRegister inertialIntGen1Duration;
            internal InertialIntGen2ConfigRegister inertialIntGen2Config;
            internal InertialIntGen2StatusRegister inertialIntGen2Status;
            internal InertialIntGen2ThresholdRegister inertialIntGen2Threshold;
            internal InertialIntGen2DurationRegister inertialIntGen2Duration;
            internal ClickConfigRegister clickConfig;
            internal ClickSourceRegister clickSource;
            internal ClickThresholdRegister clickThreshold;
            internal TimeLimitRegister timeLimit;
            internal TimeLatencyRegister timeLatency;
            internal TimeWindowRegister timeWindow;
            internal OutAccelXRegister outAccelX;
            internal OutAccelYRegister outAccelY;
            internal OutAccelZRegister outAccelZ;

            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0x20, 1, false) { }

                public int xEnable { get; set; }
                public int yEnable { get; set; }
                public int zEnable { get; set; }
                public int lowPowerEnable { get; set; }
                public int outputDataRate { get; set; }
                public OutputDataRates getOutputDataRate() { return (OutputDataRates)outputDataRate; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = (int)enumVal; }

                internal override long getValue() { return ((xEnable & 0x1) << 0) | ((yEnable & 0x1) << 1) | ((zEnable & 0x1) << 2) | ((lowPowerEnable & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
                internal override void setValue(long _value)
                {
                    xEnable = (int)((_value >> 0) & 0x1);
                    yEnable = (int)((_value >> 1) & 0x1);
                    zEnable = (int)((_value >> 2) & 0x1);
                    lowPowerEnable = (int)((_value >> 3) & 0x1);
                    outputDataRate = (int)((_value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XEnable: { xEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"YEnable: { yEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZEnable: { zEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"LowPowerEnable: { lowPowerEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"OutputDataRate: { outputDataRate } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x21, 1, false) { }

                public int hpis { get; set; }
                public int hpClick { get; set; }
                public int filterDataSelection { get; set; }
                public int hpcf { get; set; }
                public int accelhighPassMode { get; set; }
                public AccelhighPassModes getAccelhighPassMode() { return (AccelhighPassModes)accelhighPassMode; }
                public void setAccelhighPassMode(AccelhighPassModes enumVal) { accelhighPassMode = (int)enumVal; }

                internal override long getValue() { return ((hpis & 0x3) << 0) | ((hpClick & 0x1) << 2) | ((filterDataSelection & 0x1) << 3) | ((hpcf & 0x3) << 4) | ((accelhighPassMode & 0x3) << 6); }
                internal override void setValue(long _value)
                {
                    hpis = (int)((_value >> 0) & 0x3);
                    hpClick = (int)((_value >> 2) & 0x1);
                    filterDataSelection = (int)((_value >> 3) & 0x1);
                    hpcf = (int)((_value >> 4) & 0x3);
                    accelhighPassMode = (int)((_value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Hpis: { hpis } (offset: 0, width: 2)\r\n";
                    retVal += $"HpClick: { hpClick } (offset: 2, width: 1)\r\n";
                    retVal += $"FilterDataSelection: { filterDataSelection } (offset: 3, width: 1)\r\n";
                    retVal += $"Hpcf: { hpcf } (offset: 4, width: 2)\r\n";
                    retVal += $"AccelhighPassMode: { accelhighPassMode } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl3Register : Register
            {
                internal Ctrl3Register(RegisterManager regManager) : base(regManager, 0x22, 1, false) { }

                public int fifoOverrunOnInt1 { get; set; }
                public int fifoWatermarkOnInt1 { get; set; }
                public int drdy2OnInt1 { get; set; }
                public int drdy1OnInt1 { get; set; }
                public int aoi2OnInt1 { get; set; }
                public int aoi1OnInt1 { get; set; }
                public int clickOnInt2 { get; set; }

                internal override long getValue() { return ((fifoOverrunOnInt1 & 0x1) << 1) | ((fifoWatermarkOnInt1 & 0x1) << 2) | ((drdy2OnInt1 & 0x1) << 3) | ((drdy1OnInt1 & 0x1) << 4) | ((aoi2OnInt1 & 0x1) << 5) | ((aoi1OnInt1 & 0x1) << 6) | ((clickOnInt2 & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fifoOverrunOnInt1 = (int)((_value >> 1) & 0x1);
                    fifoWatermarkOnInt1 = (int)((_value >> 2) & 0x1);
                    drdy2OnInt1 = (int)((_value >> 3) & 0x1);
                    drdy1OnInt1 = (int)((_value >> 4) & 0x1);
                    aoi2OnInt1 = (int)((_value >> 5) & 0x1);
                    aoi1OnInt1 = (int)((_value >> 6) & 0x1);
                    clickOnInt2 = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoOverrunOnInt1: { fifoOverrunOnInt1 } (offset: 1, width: 1)\r\n";
                    retVal += $"FifoWatermarkOnInt1: { fifoWatermarkOnInt1 } (offset: 2, width: 1)\r\n";
                    retVal += $"Drdy2OnInt1: { drdy2OnInt1 } (offset: 3, width: 1)\r\n";
                    retVal += $"Drdy1OnInt1: { drdy1OnInt1 } (offset: 4, width: 1)\r\n";
                    retVal += $"Aoi2OnInt1: { aoi2OnInt1 } (offset: 5, width: 1)\r\n";
                    retVal += $"Aoi1OnInt1: { aoi1OnInt1 } (offset: 6, width: 1)\r\n";
                    retVal += $"ClickOnInt2: { clickOnInt2 } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl4Register : Register
            {
                internal Ctrl4Register(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int spiModeSelection { get; set; }
                public int highResolution { get; set; }
                public int fullScaleSelection { get; set; }
                public int ble { get; set; }
                public int bdu { get; set; }
                public FullScaleSelections getFullScaleSelection() { return (FullScaleSelections)fullScaleSelection; }
                public void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = (int)enumVal; }

                internal override long getValue() { return ((spiModeSelection & 0x1) << 0) | ((highResolution & 0x1) << 3) | ((fullScaleSelection & 0x7) << 3) | ((ble & 0x1) << 6) | ((bdu & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    spiModeSelection = (int)((_value >> 0) & 0x1);
                    highResolution = (int)((_value >> 3) & 0x1);
                    fullScaleSelection = (int)((_value >> 3) & 0x7);
                    ble = (int)((_value >> 6) & 0x1);
                    bdu = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SpiModeSelection: { spiModeSelection } (offset: 0, width: 1)\r\n";
                    retVal += $"HighResolution: { highResolution } (offset: 3, width: 1)\r\n";
                    retVal += $"FullScaleSelection: { fullScaleSelection } (offset: 3, width: 3)\r\n";
                    retVal += $"Ble: { ble } (offset: 6, width: 1)\r\n";
                    retVal += $"Bdu: { bdu } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl5Register : Register
            {
                internal Ctrl5Register(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int d4dInt2 { get; set; }
                public int lirInt2 { get; set; }
                public int d4dInt1 { get; set; }
                public int lirInt1 { get; set; }
                public int fifoEnable { get; set; }
                public int boot { get; set; }

                internal override long getValue() { return ((d4dInt2 & 0x1) << 0) | ((lirInt2 & 0x1) << 1) | ((d4dInt1 & 0x1) << 2) | ((lirInt1 & 0x1) << 3) | ((fifoEnable & 0x1) << 6) | ((boot & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    d4dInt2 = (int)((_value >> 0) & 0x1);
                    lirInt2 = (int)((_value >> 1) & 0x1);
                    d4dInt1 = (int)((_value >> 2) & 0x1);
                    lirInt1 = (int)((_value >> 3) & 0x1);
                    fifoEnable = (int)((_value >> 6) & 0x1);
                    boot = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"D4dInt2: { d4dInt2 } (offset: 0, width: 1)\r\n";
                    retVal += $"LirInt2: { lirInt2 } (offset: 1, width: 1)\r\n";
                    retVal += $"D4dInt1: { d4dInt1 } (offset: 2, width: 1)\r\n";
                    retVal += $"LirInt1: { lirInt1 } (offset: 3, width: 1)\r\n";
                    retVal += $"FifoEnable: { fifoEnable } (offset: 6, width: 1)\r\n";
                    retVal += $"Boot: { boot } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl6Register : Register
            {
                internal Ctrl6Register(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int interruptActiveHigh { get; set; }
                public int p2Act { get; set; }
                public int bootI1 { get; set; }
                public int i2Int2 { get; set; }
                public int i2Int1 { get; set; }
                public int i2ClickEnable { get; set; }

                internal override long getValue() { return ((interruptActiveHigh & 0x1) << 1) | ((p2Act & 0x1) << 3) | ((bootI1 & 0x1) << 4) | ((i2Int2 & 0x1) << 5) | ((i2Int1 & 0x1) << 6) | ((i2ClickEnable & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    interruptActiveHigh = (int)((_value >> 1) & 0x1);
                    p2Act = (int)((_value >> 3) & 0x1);
                    bootI1 = (int)((_value >> 4) & 0x1);
                    i2Int2 = (int)((_value >> 5) & 0x1);
                    i2Int1 = (int)((_value >> 6) & 0x1);
                    i2ClickEnable = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"InterruptActiveHigh: { interruptActiveHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"P2Act: { p2Act } (offset: 3, width: 1)\r\n";
                    retVal += $"BootI1: { bootI1 } (offset: 4, width: 1)\r\n";
                    retVal += $"I2Int2: { i2Int2 } (offset: 5, width: 1)\r\n";
                    retVal += $"I2Int1: { i2Int1 } (offset: 6, width: 1)\r\n";
                    retVal += $"I2ClickEnable: { i2ClickEnable } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceRegister : Register
            {
                internal ReferenceRegister(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int xDataAvailable { get; set; }
                public int yDataAvailable { get; set; }
                public int zDataAvailable { get; set; }
                public int zyxDataAvailable { get; set; }
                public int xDataOverrun { get; set; }
                public int yDataOverrun { get; set; }
                public int zDataOverrun { get; set; }
                public int zyxDataOverrun { get; set; }

                internal override long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xDataAvailable = (int)((_value >> 0) & 0x1);
                    yDataAvailable = (int)((_value >> 1) & 0x1);
                    zDataAvailable = (int)((_value >> 2) & 0x1);
                    zyxDataAvailable = (int)((_value >> 3) & 0x1);
                    xDataOverrun = (int)((_value >> 4) & 0x1);
                    yDataOverrun = (int)((_value >> 5) & 0x1);
                    zDataOverrun = (int)((_value >> 6) & 0x1);
                    zyxDataOverrun = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XDataAvailable: { xDataAvailable } (offset: 0, width: 1)\r\n";
                    retVal += $"YDataAvailable: { yDataAvailable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZDataAvailable: { zDataAvailable } (offset: 2, width: 1)\r\n";
                    retVal += $"ZyxDataAvailable: { zyxDataAvailable } (offset: 3, width: 1)\r\n";
                    retVal += $"XDataOverrun: { xDataOverrun } (offset: 4, width: 1)\r\n";
                    retVal += $"YDataOverrun: { yDataOverrun } (offset: 5, width: 1)\r\n";
                    retVal += $"ZDataOverrun: { zDataOverrun } (offset: 6, width: 1)\r\n";
                    retVal += $"ZyxDataOverrun: { zyxDataOverrun } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class FifoControlRegister : Register
            {
                internal FifoControlRegister(RegisterManager regManager) : base(regManager, 0x2E, 1, false) { }

                public int fifoThreshold { get; set; }
                public int fifoMode { get; set; }
                public FifoModes getFifoMode() { return (FifoModes)fifoMode; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = (int)enumVal; }

                internal override long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
                internal override void setValue(long _value)
                {
                    fifoThreshold = (int)((_value >> 0) & 0x1F);
                    fifoMode = (int)((_value >> 5) & 0x7);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoThreshold: { fifoThreshold } (offset: 0, width: 5)\r\n";
                    retVal += $"FifoMode: { fifoMode } (offset: 5, width: 3)\r\n";
                    return retVal;
                }
            }
            internal class FifoSourceRegister : Register
            {
                internal FifoSourceRegister(RegisterManager regManager) : base(regManager, 0x2f, 1, false) { }

                public int fifoStoredLevel { get; set; }
                public int empty { get; set; }
                public int overrun { get; set; }
                public int fifoThreshold { get; set; }

                internal override long getValue() { return ((fifoStoredLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((fifoThreshold & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    fifoStoredLevel = (int)((_value >> 0) & 0x1F);
                    empty = (int)((_value >> 5) & 0x1);
                    overrun = (int)((_value >> 6) & 0x1);
                    fifoThreshold = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoStoredLevel: { fifoStoredLevel } (offset: 0, width: 5)\r\n";
                    retVal += $"Empty: { empty } (offset: 5, width: 1)\r\n";
                    retVal += $"Overrun: { overrun } (offset: 6, width: 1)\r\n";
                    retVal += $"FifoThreshold: { fifoThreshold } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1ConfigRegister : Register
            {
                internal InertialIntGen1ConfigRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int xLowInterruptEnable { get; set; }
                public int xHighInterruptEnable { get; set; }
                public int yLowInterruptEnable { get; set; }
                public int yHighInterruptEnable { get; set; }
                public int zLowInterruptEvent { get; set; }
                public int zHighInterruptEnable { get; set; }
                public int detect6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xLowInterruptEnable = (int)((_value >> 0) & 0x1);
                    xHighInterruptEnable = (int)((_value >> 1) & 0x1);
                    yLowInterruptEnable = (int)((_value >> 2) & 0x1);
                    yHighInterruptEnable = (int)((_value >> 3) & 0x1);
                    zLowInterruptEvent = (int)((_value >> 4) & 0x1);
                    zHighInterruptEnable = (int)((_value >> 5) & 0x1);
                    detect6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLowInterruptEnable: { xLowInterruptEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"XHighInterruptEnable: { xHighInterruptEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"YLowInterruptEnable: { yLowInterruptEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"YHighInterruptEnable: { yHighInterruptEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLowInterruptEvent: { zLowInterruptEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHighInterruptEnable: { zHighInterruptEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"Detect6D: { detect6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1StatusRegister : Register
            {
                internal InertialIntGen1StatusRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int intStatus { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    intStatus = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"IntStatus: { intStatus } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1ThresholdRegister : Register
            {
                internal InertialIntGen1ThresholdRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen1DurationRegister : Register
            {
                internal InertialIntGen1DurationRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2ConfigRegister : Register
            {
                internal InertialIntGen2ConfigRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int xLowInterruptEnable { get; set; }
                public int xHighInterruptEnable { get; set; }
                public int yLowInterruptEnable { get; set; }
                public int yHighInterruptEnable { get; set; }
                public int zLowInterruptEvent { get; set; }
                public int zHighInterruptEnable { get; set; }
                public int detect6D { get; set; }
                public int andOrInterruptEvents { get; set; }

                internal override long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    xLowInterruptEnable = (int)((_value >> 0) & 0x1);
                    xHighInterruptEnable = (int)((_value >> 1) & 0x1);
                    yLowInterruptEnable = (int)((_value >> 2) & 0x1);
                    yHighInterruptEnable = (int)((_value >> 3) & 0x1);
                    zLowInterruptEvent = (int)((_value >> 4) & 0x1);
                    zHighInterruptEnable = (int)((_value >> 5) & 0x1);
                    detect6D = (int)((_value >> 6) & 0x1);
                    andOrInterruptEvents = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLowInterruptEnable: { xLowInterruptEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"XHighInterruptEnable: { xHighInterruptEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"YLowInterruptEnable: { yLowInterruptEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"YHighInterruptEnable: { yHighInterruptEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLowInterruptEvent: { zLowInterruptEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHighInterruptEnable: { zHighInterruptEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"Detect6D: { detect6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { andOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2StatusRegister : Register
            {
                internal InertialIntGen2StatusRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int xLow { get; set; }
                public int xHigh { get; set; }
                public int yLow { get; set; }
                public int yHigh { get; set; }
                public int zLow { get; set; }
                public int zHigh { get; set; }
                public int intStatus { get; set; }

                internal override long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    xLow = (int)((_value >> 0) & 0x1);
                    xHigh = (int)((_value >> 1) & 0x1);
                    yLow = (int)((_value >> 2) & 0x1);
                    yHigh = (int)((_value >> 3) & 0x1);
                    zLow = (int)((_value >> 4) & 0x1);
                    zHigh = (int)((_value >> 5) & 0x1);
                    intStatus = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { xLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { xHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { yLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { yHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { zLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { zHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"IntStatus: { intStatus } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2ThresholdRegister : Register
            {
                internal InertialIntGen2ThresholdRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class InertialIntGen2DurationRegister : Register
            {
                internal InertialIntGen2DurationRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ClickConfigRegister : Register
            {
                internal ClickConfigRegister(RegisterManager regManager) : base(regManager, 0x38, 1, false) { }

                public int xSingleClick { get; set; }
                public int xDoubleClick { get; set; }
                public int ySingleClick { get; set; }
                public int yDoubleClick { get; set; }
                public int zSingleClick { get; set; }
                public int zDoubleClick { get; set; }

                internal override long getValue() { return ((xSingleClick & 0x1) << 0) | ((xDoubleClick & 0x1) << 1) | ((ySingleClick & 0x1) << 2) | ((yDoubleClick & 0x1) << 3) | ((zSingleClick & 0x1) << 4) | ((zDoubleClick & 0x1) << 5); }
                internal override void setValue(long _value)
                {
                    xSingleClick = (int)((_value >> 0) & 0x1);
                    xDoubleClick = (int)((_value >> 1) & 0x1);
                    ySingleClick = (int)((_value >> 2) & 0x1);
                    yDoubleClick = (int)((_value >> 3) & 0x1);
                    zSingleClick = (int)((_value >> 4) & 0x1);
                    zDoubleClick = (int)((_value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XSingleClick: { xSingleClick } (offset: 0, width: 1)\r\n";
                    retVal += $"XDoubleClick: { xDoubleClick } (offset: 1, width: 1)\r\n";
                    retVal += $"YSingleClick: { ySingleClick } (offset: 2, width: 1)\r\n";
                    retVal += $"YDoubleClick: { yDoubleClick } (offset: 3, width: 1)\r\n";
                    retVal += $"ZSingleClick: { zSingleClick } (offset: 4, width: 1)\r\n";
                    retVal += $"ZDoubleClick: { zDoubleClick } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickSourceRegister : Register
            {
                internal ClickSourceRegister(RegisterManager regManager) : base(regManager, 0x39, 1, false) { }

                public int x { get; set; }
                public int y { get; set; }
                public int z { get; set; }
                public int sign { get; set; }
                public int singleClickEn { get; set; }
                public int doubleClickEn { get; set; }
                public int interruptActive { get; set; }

                internal override long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEn & 0x1) << 4) | ((doubleClickEn & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    x = (int)((_value >> 0) & 0x1);
                    y = (int)((_value >> 1) & 0x1);
                    z = (int)((_value >> 2) & 0x1);
                    sign = (int)((_value >> 3) & 0x1);
                    singleClickEn = (int)((_value >> 4) & 0x1);
                    doubleClickEn = (int)((_value >> 5) & 0x1);
                    interruptActive = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { x } (offset: 0, width: 1)\r\n";
                    retVal += $"Y: { y } (offset: 1, width: 1)\r\n";
                    retVal += $"Z: { z } (offset: 2, width: 1)\r\n";
                    retVal += $"Sign: { sign } (offset: 3, width: 1)\r\n";
                    retVal += $"SingleClickEn: { singleClickEn } (offset: 4, width: 1)\r\n";
                    retVal += $"DoubleClickEn: { doubleClickEn } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { interruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickThresholdRegister : Register
            {
                internal ClickThresholdRegister(RegisterManager regManager) : base(regManager, 0x3A, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLimitRegister : Register
            {
                internal TimeLimitRegister(RegisterManager regManager) : base(regManager, 0x3b, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x7F) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLatencyRegister : Register
            {
                internal TimeLatencyRegister(RegisterManager regManager) : base(regManager, 0x3c, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class TimeWindowRegister : Register
            {
                internal TimeWindowRegister(RegisterManager regManager) : base(regManager, 0x3d, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelXRegister : Register
            {
                internal OutAccelXRegister(RegisterManager regManager) : base(regManager, 0xa8, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelYRegister : Register
            {
                internal OutAccelYRegister(RegisterManager regManager) : base(regManager, 0xaA, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class OutAccelZRegister : Register
            {
                internal OutAccelZRegister(RegisterManager regManager) : base(regManager, 0xaC, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
        }
    }
}