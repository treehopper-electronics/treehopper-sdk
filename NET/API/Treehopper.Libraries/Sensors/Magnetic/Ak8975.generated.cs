/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Magnetic
{
    public partial class Ak8975
    {
        protected class Ak8975Registers : RegisterManager
        {
            internal Ak8975Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                wia = new WiaRegister(this);
                _registers.Add(wia);
                info = new InfoRegister(this);
                _registers.Add(info);
                status1 = new Status1Register(this);
                _registers.Add(status1);
                hx = new HxRegister(this);
                _registers.Add(hx);
                hy = new HyRegister(this);
                _registers.Add(hy);
                hz = new HzRegister(this);
                _registers.Add(hz);
                status2 = new Status2Register(this);
                _registers.Add(status2);
                control = new ControlRegister(this);
                _registers.Add(control);
                sensitivityX = new SensitivityXRegister(this);
                _registers.Add(sensitivityX);
                sensitivityY = new SensitivityYRegister(this);
                _registers.Add(sensitivityY);
                sensitivityZ = new SensitivityZRegister(this);
                _registers.Add(sensitivityZ);
            }

            internal WiaRegister wia;
            internal InfoRegister info;
            internal Status1Register status1;
            internal HxRegister hx;
            internal HyRegister hy;
            internal HzRegister hz;
            internal Status2Register status2;
            internal ControlRegister control;
            internal SensitivityXRegister sensitivityX;
            internal SensitivityYRegister sensitivityY;
            internal SensitivityZRegister sensitivityZ;

            internal class WiaRegister : Register
            {
                internal WiaRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class InfoRegister : Register
            {
                internal InfoRegister(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Status1Register : Register
            {
                internal Status1Register(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int drdy { get; set; }

                internal override long getValue() { return ((drdy & 0x1) << 0); }
                internal override void setValue(long _value)
                {
                    drdy = (int)((_value >> 0) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Drdy: { drdy } (offset: 0, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class HxRegister : Register
            {
                internal HxRegister(RegisterManager regManager) : base(regManager, 0x03, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HyRegister : Register
            {
                internal HyRegister(RegisterManager regManager) : base(regManager, 0x05, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HzRegister : Register
            {
                internal HzRegister(RegisterManager regManager) : base(regManager, 0x07, 2, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class Status2Register : Register
            {
                internal Status2Register(RegisterManager regManager) : base(regManager, 0x09, 1, false) { }

                public int derr { get; set; }
                public int hofl { get; set; }

                internal override long getValue() { return ((derr & 0x1) << 2) | ((hofl & 0x1) << 3); }
                internal override void setValue(long _value)
                {
                    derr = (int)((_value >> 2) & 0x1);
                    hofl = (int)((_value >> 3) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Derr: { derr } (offset: 2, width: 1)\r\n";
                    retVal += $"Hofl: { hofl } (offset: 3, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ControlRegister : Register
            {
                internal ControlRegister(RegisterManager regManager) : base(regManager, 0x0a, 1, false) { }

                public int mode { get; set; }

                internal override long getValue() { return ((mode & 0xF) << 0); }
                internal override void setValue(long _value)
                {
                    mode = (int)((_value >> 0) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Mode: { mode } (offset: 0, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class SensitivityXRegister : Register
            {
                internal SensitivityXRegister(RegisterManager regManager) : base(regManager, 0x10, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class SensitivityYRegister : Register
            {
                internal SensitivityYRegister(RegisterManager regManager) : base(regManager, 0x11, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class SensitivityZRegister : Register
            {
                internal SensitivityZRegister(RegisterManager regManager) : base(regManager, 0x12, 1, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
        }
    }
}