/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Motors
{
    public partial class Tmc5160
    {
        internal enum FastAndStills
        {
            shortTime = 0,
            normalTime = 1
        }

        internal enum ShortDelays
        {
        }

        protected class Tmc5160Registers : RegisterManager
        {
            internal Tmc5160Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                gConf = new GConfRegister(this);
                _registers.Add(gConf);
                gstat = new GstatRegister(this);
                _registers.Add(gstat);
                ifCnt = new IfCntRegister(this);
                _registers.Add(ifCnt);
                nodeConf = new NodeConfRegister(this);
                _registers.Add(nodeConf);
                ioIn = new IoInRegister(this);
                _registers.Add(ioIn);
                output = new OutputRegister(this);
                _registers.Add(output);
                xCompare = new XCompareRegister(this);
                _registers.Add(xCompare);
                otpProg = new OtpProgRegister(this);
                _registers.Add(otpProg);
                otpRead = new OtpReadRegister(this);
                _registers.Add(otpRead);
                factoryConf = new FactoryConfRegister(this);
                _registers.Add(factoryConf);
                shortConf = new ShortConfRegister(this);
                _registers.Add(shortConf);
                drvConf = new DrvConfRegister(this);
                _registers.Add(drvConf);
                globalScaler = new GlobalScalerRegister(this);
                _registers.Add(globalScaler);
                offsetRead = new OffsetReadRegister(this);
                _registers.Add(offsetRead);
                iHoldIRun = new IHoldIRunRegister(this);
                _registers.Add(iHoldIRun);
            }

            internal GConfRegister gConf;
            internal GstatRegister gstat;
            internal IfCntRegister ifCnt;
            internal NodeConfRegister nodeConf;
            internal IoInRegister ioIn;
            internal OutputRegister output;
            internal XCompareRegister xCompare;
            internal OtpProgRegister otpProg;
            internal OtpReadRegister otpRead;
            internal FactoryConfRegister factoryConf;
            internal ShortConfRegister shortConf;
            internal DrvConfRegister drvConf;
            internal GlobalScalerRegister globalScaler;
            internal OffsetReadRegister offsetRead;
            internal IHoldIRunRegister iHoldIRun;

            internal class GConfRegister : Register
            {
                internal GConfRegister(RegisterManager regManager) : base(regManager, 0x00, 4, false) { }

                public int recalibrate { get; set; }
                public int fastAndStill { get; set; }
                public int enPwmMode { get; set; }
                public int multiStepFilt { get; set; }
                public int shaft { get; set; }
                public int daig0Error { get; set; }
                public int diag0Otpw { get; set; }
                public int diag0Stall { get; set; }
                public int diag1Stall { get; set; }
                public int diag1Dir { get; set; }
                public int diag1Index { get; set; }
                public int diag1OnState { get; set; }
                public int diag1StepsSkipped { get; set; }
                public int diag0IntPushpull { get; set; }
                public int diag1PoscompPushpull { get; set; }
                public int smallHysteresis { get; set; }
                public int stopEnable { get; set; }
                public int directMode { get; set; }
                public int testMode { get; set; }
                public FastAndStills getFastAndStill() { return (FastAndStills)fastAndStill; }
                public void setFastAndStill(FastAndStills enumVal) { fastAndStill = (int)enumVal; }

                internal override long getValue() { return ((recalibrate & 0x1) << 0) | ((fastAndStill & 0x1) << 1) | ((enPwmMode & 0x1) << 2) | ((multiStepFilt & 0x1) << 3) | ((shaft & 0x1) << 4) | ((daig0Error & 0x1) << 5) | ((diag0Otpw & 0x1) << 6) | ((diag0Stall & 0x1) << 7) | ((diag1Stall & 0x1) << 8) | ((diag1Dir & 0x1) << 9) | ((diag1Index & 0x1) << 10) | ((diag1OnState & 0x1) << 11) | ((diag1StepsSkipped & 0x1) << 12) | ((diag0IntPushpull & 0x1) << 13) | ((diag1PoscompPushpull & 0x1) << 14) | ((smallHysteresis & 0x1) << 15) | ((stopEnable & 0x1) << 16) | ((directMode & 0x1) << 17) | ((testMode & 0x1) << 18); }
                internal override void setValue(long _value)
                {
                    recalibrate = (int)((_value >> 0) & 0x1);
                    fastAndStill = (int)((_value >> 1) & 0x1);
                    enPwmMode = (int)((_value >> 2) & 0x1);
                    multiStepFilt = (int)((_value >> 3) & 0x1);
                    shaft = (int)((_value >> 4) & 0x1);
                    daig0Error = (int)((_value >> 5) & 0x1);
                    diag0Otpw = (int)((_value >> 6) & 0x1);
                    diag0Stall = (int)((_value >> 7) & 0x1);
                    diag1Stall = (int)((_value >> 8) & 0x1);
                    diag1Dir = (int)((_value >> 9) & 0x1);
                    diag1Index = (int)((_value >> 10) & 0x1);
                    diag1OnState = (int)((_value >> 11) & 0x1);
                    diag1StepsSkipped = (int)((_value >> 12) & 0x1);
                    diag0IntPushpull = (int)((_value >> 13) & 0x1);
                    diag1PoscompPushpull = (int)((_value >> 14) & 0x1);
                    smallHysteresis = (int)((_value >> 15) & 0x1);
                    stopEnable = (int)((_value >> 16) & 0x1);
                    directMode = (int)((_value >> 17) & 0x1);
                    testMode = (int)((_value >> 18) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Recalibrate: { recalibrate } (offset: 0, width: 1)\r\n";
                    retVal += $"FastAndStill: { fastAndStill } (offset: 1, width: 1)\r\n";
                    retVal += $"EnPwmMode: { enPwmMode } (offset: 2, width: 1)\r\n";
                    retVal += $"MultiStepFilt: { multiStepFilt } (offset: 3, width: 1)\r\n";
                    retVal += $"Shaft: { shaft } (offset: 4, width: 1)\r\n";
                    retVal += $"Daig0Error: { daig0Error } (offset: 5, width: 1)\r\n";
                    retVal += $"Diag0Otpw: { diag0Otpw } (offset: 6, width: 1)\r\n";
                    retVal += $"Diag0Stall: { diag0Stall } (offset: 7, width: 1)\r\n";
                    retVal += $"Diag1Stall: { diag1Stall } (offset: 8, width: 1)\r\n";
                    retVal += $"Diag1Dir: { diag1Dir } (offset: 9, width: 1)\r\n";
                    retVal += $"Diag1Index: { diag1Index } (offset: 10, width: 1)\r\n";
                    retVal += $"Diag1OnState: { diag1OnState } (offset: 11, width: 1)\r\n";
                    retVal += $"Diag1StepsSkipped: { diag1StepsSkipped } (offset: 12, width: 1)\r\n";
                    retVal += $"Diag0IntPushpull: { diag0IntPushpull } (offset: 13, width: 1)\r\n";
                    retVal += $"Diag1PoscompPushpull: { diag1PoscompPushpull } (offset: 14, width: 1)\r\n";
                    retVal += $"SmallHysteresis: { smallHysteresis } (offset: 15, width: 1)\r\n";
                    retVal += $"StopEnable: { stopEnable } (offset: 16, width: 1)\r\n";
                    retVal += $"DirectMode: { directMode } (offset: 17, width: 1)\r\n";
                    retVal += $"TestMode: { testMode } (offset: 18, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class GstatRegister : Register
            {
                internal GstatRegister(RegisterManager regManager) : base(regManager, 0x01, 4, false) { }

                public int reset { get; set; }
                public int drvErr { get; set; }
                public int uvCp { get; set; }

                internal override long getValue() { return ((reset & 0x1) << 0) | ((drvErr & 0x1) << 1) | ((uvCp & 0x1) << 2); }
                internal override void setValue(long _value)
                {
                    reset = (int)((_value >> 0) & 0x1);
                    drvErr = (int)((_value >> 1) & 0x1);
                    uvCp = (int)((_value >> 2) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Reset: { reset } (offset: 0, width: 1)\r\n";
                    retVal += $"DrvErr: { drvErr } (offset: 1, width: 1)\r\n";
                    retVal += $"UvCp: { uvCp } (offset: 2, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class IfCntRegister : Register
            {
                internal IfCntRegister(RegisterManager regManager) : base(regManager, 0x02, 4, false) { }

                public int count { get; set; }

                internal override long getValue() { return ((count & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    count = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Count: { count } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class NodeConfRegister : Register
            {
                internal NodeConfRegister(RegisterManager regManager) : base(regManager, 0x03, 4, false) { }

                public int nodeAddr { get; set; }
                public int sendDelay { get; set; }

                internal override long getValue() { return ((nodeAddr & 0xFF) << 0) | ((sendDelay & 0xF) << 8); }
                internal override void setValue(long _value)
                {
                    nodeAddr = (int)((_value >> 0) & 0xFF);
                    sendDelay = (int)((_value >> 8) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"NodeAddr: { nodeAddr } (offset: 0, width: 8)\r\n";
                    retVal += $"SendDelay: { sendDelay } (offset: 8, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class IoInRegister : Register
            {
                internal IoInRegister(RegisterManager regManager) : base(regManager, 0x04, 4, false) { }

                public int reflStep { get; set; }
                public int refrDir { get; set; }
                public int encbDcenCfg4 { get; set; }
                public int drvEnn { get; set; }
                public int encNDcoCfg6 { get; set; }
                public int sdMode { get; set; }
                public int swCompIn { get; set; }
                public int version { get; set; }

                internal override long getValue() { return ((reflStep & 0x1) << 0) | ((refrDir & 0x1) << 1) | ((encbDcenCfg4 & 0x1) << 2) | ((drvEnn & 0x1) << 3) | ((encNDcoCfg6 & 0x1) << 4) | ((sdMode & 0x1) << 5) | ((swCompIn & 0x1) << 6) | ((version & 0xFF) << 16); }
                internal override void setValue(long _value)
                {
                    reflStep = (int)((_value >> 0) & 0x1);
                    refrDir = (int)((_value >> 1) & 0x1);
                    encbDcenCfg4 = (int)((_value >> 2) & 0x1);
                    drvEnn = (int)((_value >> 3) & 0x1);
                    encNDcoCfg6 = (int)((_value >> 4) & 0x1);
                    sdMode = (int)((_value >> 5) & 0x1);
                    swCompIn = (int)((_value >> 6) & 0x1);
                    version = (int)((_value >> 16) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ReflStep: { reflStep } (offset: 0, width: 1)\r\n";
                    retVal += $"RefrDir: { refrDir } (offset: 1, width: 1)\r\n";
                    retVal += $"EncbDcenCfg4: { encbDcenCfg4 } (offset: 2, width: 1)\r\n";
                    retVal += $"DrvEnn: { drvEnn } (offset: 3, width: 1)\r\n";
                    retVal += $"EncNDcoCfg6: { encNDcoCfg6 } (offset: 4, width: 1)\r\n";
                    retVal += $"SdMode: { sdMode } (offset: 5, width: 1)\r\n";
                    retVal += $"SwCompIn: { swCompIn } (offset: 6, width: 1)\r\n";
                    retVal += $"Version: { version } (offset: 16, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OutputRegister : Register
            {
                internal OutputRegister(RegisterManager regManager) : base(regManager, 0x04, 4, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x0) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x0);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 32)\r\n";
                    return retVal;
                }
            }
            internal class XCompareRegister : Register
            {
                internal XCompareRegister(RegisterManager regManager) : base(regManager, 0x05, 4, false) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0x0) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)((_value >> 0) & 0x0);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 32)\r\n";
                    return retVal;
                }
            }
            internal class OtpProgRegister : Register
            {
                internal OtpProgRegister(RegisterManager regManager) : base(regManager, 0x06, 4, false) { }

                public int otpbit { get; set; }
                public int otpbyte { get; set; }
                public int otpmagic { get; set; }

                internal override long getValue() { return ((otpbit & 0x7) << 0) | ((otpbyte & 0x3) << 3) | ((otpmagic & 0xFF) << 3); }
                internal override void setValue(long _value)
                {
                    otpbit = (int)((_value >> 0) & 0x7);
                    otpbyte = (int)((_value >> 3) & 0x3);
                    otpmagic = (int)((_value >> 3) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Otpbit: { otpbit } (offset: 0, width: 3)\r\n";
                    retVal += $"Otpbyte: { otpbyte } (offset: 3, width: 2)\r\n";
                    retVal += $"Otpmagic: { otpmagic } (offset: 3, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OtpReadRegister : Register
            {
                internal OtpReadRegister(RegisterManager regManager) : base(regManager, 0x07, 4, false) { }

                public int otpbit { get; set; }

                internal override long getValue() { return ((otpbit & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    otpbit = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Otpbit: { otpbit } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class FactoryConfRegister : Register
            {
                internal FactoryConfRegister(RegisterManager regManager) : base(regManager, 0x08, 4, false) { }

                public int fclktrim { get; set; }

                internal override long getValue() { return ((fclktrim & 0x1F) << 0); }
                internal override void setValue(long _value)
                {
                    fclktrim = (int)((_value >> 0) & 0x1F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Fclktrim: { fclktrim } (offset: 0, width: 5)\r\n";
                    return retVal;
                }
            }
            internal class ShortConfRegister : Register
            {
                internal ShortConfRegister(RegisterManager regManager) : base(regManager, 0x09, 4, false) { }

                public int s2vsLevel { get; set; }
                public int s2gLevel { get; set; }
                public int shortFilter { get; set; }
                public int shortDelay { get; set; }
                public ShortDelays getShortDelay() { return (ShortDelays)shortDelay; }
                public void setShortDelay(ShortDelays enumVal) { shortDelay = (int)enumVal; }

                internal override long getValue() { return ((s2vsLevel & 0xF) << 0) | ((s2gLevel & 0xF) << 5) | ((shortFilter & 0x3) << 5) | ((shortDelay & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    s2vsLevel = (int)((_value >> 0) & 0xF);
                    s2gLevel = (int)((_value >> 5) & 0xF);
                    shortFilter = (int)((_value >> 5) & 0x3);
                    shortDelay = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"S2vsLevel: { s2vsLevel } (offset: 0, width: 4)\r\n";
                    retVal += $"S2gLevel: { s2gLevel } (offset: 5, width: 4)\r\n";
                    retVal += $"ShortFilter: { shortFilter } (offset: 5, width: 2)\r\n";
                    retVal += $"ShortDelay: { shortDelay } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class DrvConfRegister : Register
            {
                internal DrvConfRegister(RegisterManager regManager) : base(regManager, 0x0a, 4, false) { }

                public int bbmTime { get; set; }
                public int bbmClks { get; set; }
                public int otSelect { get; set; }
                public int drvStrength { get; set; }
                public int filtISense { get; set; }

                internal override long getValue() { return ((bbmTime & 0x1F) << 0) | ((bbmClks & 0xF) << 4) | ((otSelect & 0x3) << 8) | ((drvStrength & 0x3) << 2) | ((filtISense & 0x3) << 2); }
                internal override void setValue(long _value)
                {
                    bbmTime = (int)((_value >> 0) & 0x1F);
                    bbmClks = (int)((_value >> 4) & 0xF);
                    otSelect = (int)((_value >> 8) & 0x3);
                    drvStrength = (int)((_value >> 2) & 0x3);
                    filtISense = (int)((_value >> 2) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"BbmTime: { bbmTime } (offset: 0, width: 5)\r\n";
                    retVal += $"BbmClks: { bbmClks } (offset: 4, width: 4)\r\n";
                    retVal += $"OtSelect: { otSelect } (offset: 8, width: 2)\r\n";
                    retVal += $"DrvStrength: { drvStrength } (offset: 2, width: 2)\r\n";
                    retVal += $"FiltISense: { filtISense } (offset: 2, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class GlobalScalerRegister : Register
            {
                internal GlobalScalerRegister(RegisterManager regManager) : base(regManager, 0x0b, 4, false) { }

                public int globalScaler { get; set; }

                internal override long getValue() { return ((globalScaler & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    globalScaler = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"GlobalScaler: { globalScaler } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class OffsetReadRegister : Register
            {
                internal OffsetReadRegister(RegisterManager regManager) : base(regManager, 0x0c, 4, false) { }

                public int offsetCalibrationResultPhaseB { get; set; }
                public int offsetCalibrationResultPhaseA { get; set; }

                internal override long getValue() { return ((offsetCalibrationResultPhaseB & 0xFF) << 0) | ((offsetCalibrationResultPhaseA & 0xFF) << 0); }
                internal override void setValue(long _value)
                {
                    offsetCalibrationResultPhaseB = (int)((_value >> 0) & 0xFF);
                    offsetCalibrationResultPhaseA = (int)((_value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"OffsetCalibrationResultPhaseB: { offsetCalibrationResultPhaseB } (offset: 0, width: 8)\r\n";
                    retVal += $"OffsetCalibrationResultPhaseA: { offsetCalibrationResultPhaseA } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class IHoldIRunRegister : Register
            {
                internal IHoldIRunRegister(RegisterManager regManager) : base(regManager, 0x10, 4, false) { }

                public int iHold { get; set; }
                public int iRun { get; set; }
                public int iHoldDelay { get; set; }

                internal override long getValue() { return ((iHold & 0x1F) << 0) | ((iRun & 0xFF) << 4) | ((iHoldDelay & 0xFF) << 12); }
                internal override void setValue(long _value)
                {
                    iHold = (int)((_value >> 0) & 0x1F);
                    iRun = (int)((_value >> 4) & 0xFF);
                    iHoldDelay = (int)((_value >> 12) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IHold: { iHold } (offset: 0, width: 5)\r\n";
                    retVal += $"IRun: { iRun } (offset: 4, width: 8)\r\n";
                    retVal += $"IHoldDelay: { iHoldDelay } (offset: 12, width: 8)\r\n";
                    return retVal;
                }
            }
        }
    }
}