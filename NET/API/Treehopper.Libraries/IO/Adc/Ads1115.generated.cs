/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.IO.Adc
{
    public partial class Ads1115
    {
        public enum ComparatorQueues
        {
            AssertAfterOneConversion = 0,
            AssertAfterTwoConversions = 1,
            AssertAfterFourConversions = 2,
            DisableComparator = 3
        }

        public enum DataRates
        {
            Sps_8 = 0,
            Sps_16 = 1,
            Sps_32 = 2,
            Sps_64 = 3,
            Sps_128 = 4,
            Sps_250 = 5,
            Sps_475 = 6,
            Sps_860 = 7
        }

        public enum Pgas
        {
            Fsr_6144 = 0,
            Fsr_4096 = 1,
            Fsr_2048 = 2,
            Fsr_1024 = 3,
            Fsr_512 = 4,
            Fsr_256 = 5
        }

        internal enum Muxes
        {
            ain0_ain1 = 0,
            ain0_ain3 = 1,
            ain1_ain3 = 2,
            ain2_ain3 = 3,
            ain0_gnd = 4,
            ain1_gnd = 5,
            ain2_gnd = 6,
            ain3_gnd = 7
        }

        protected class Ads1115Registers : RegisterManager
        {
            internal Ads1115Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                conversion = new ConversionRegister(this);
                _registers.Add(conversion);
                config = new ConfigRegister(this);
                _registers.Add(config);
                lowThreshold = new LowThresholdRegister(this);
                _registers.Add(lowThreshold);
                highThreshold = new HighThresholdRegister(this);
                _registers.Add(highThreshold);
            }

            internal ConversionRegister conversion;
            internal ConfigRegister config;
            internal LowThresholdRegister lowThreshold;
            internal HighThresholdRegister highThreshold;

            internal class ConversionRegister : Register
            {
                internal ConversionRegister(RegisterManager regManager) : base(regManager, 0x00, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class ConfigRegister : Register
            {
                internal ConfigRegister(RegisterManager regManager) : base(regManager, 0x01, 2, false) { }

                public int comparatorQueue { get; set; }
                public int latchingComparator { get; set; }
                public int comparatorPolarity { get; set; }
                public int comparatorMode { get; set; }
                public int dataRate { get; set; }
                public int operatingMode { get; set; }
                public int pga { get; set; }
                public int mux { get; set; }
                public int operationalStatus { get; set; }
                public ComparatorQueues getComparatorQueue() { return (ComparatorQueues)comparatorQueue; }
                public void setComparatorQueue(ComparatorQueues enumVal) { comparatorQueue = (int)enumVal; }
                public DataRates getDataRate() { return (DataRates)dataRate; }
                public void setDataRate(DataRates enumVal) { dataRate = (int)enumVal; }
                public Pgas getPga() { return (Pgas)pga; }
                public void setPga(Pgas enumVal) { pga = (int)enumVal; }
                public Muxes getMux() { return (Muxes)mux; }
                public void setMux(Muxes enumVal) { mux = (int)enumVal; }

                internal override long getValue() { return ((comparatorQueue & 0x3) << 0) | ((latchingComparator & 0x1) << 2) | ((comparatorPolarity & 0x1) << 3) | ((comparatorMode & 0x1) << 4) | ((dataRate & 0x7) << 5) | ((operatingMode & 0x1) << 8) | ((pga & 0x7) << 9) | ((mux & 0x7) << 12) | ((operationalStatus & 0x1) << 15); }
                internal override void setValue(long _value)
                {
                    comparatorQueue = (int)((_value >> 0) & 0x3);
                    latchingComparator = (int)((_value >> 2) & 0x1);
                    comparatorPolarity = (int)((_value >> 3) & 0x1);
                    comparatorMode = (int)((_value >> 4) & 0x1);
                    dataRate = (int)((_value >> 5) & 0x7);
                    operatingMode = (int)((_value >> 8) & 0x1);
                    pga = (int)((_value >> 9) & 0x7);
                    mux = (int)((_value >> 12) & 0x7);
                    operationalStatus = (int)((_value >> 15) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"ComparatorQueue: { comparatorQueue } (offset: 0, width: 2)\r\n";
                    retVal += $"LatchingComparator: { latchingComparator } (offset: 2, width: 1)\r\n";
                    retVal += $"ComparatorPolarity: { comparatorPolarity } (offset: 3, width: 1)\r\n";
                    retVal += $"ComparatorMode: { comparatorMode } (offset: 4, width: 1)\r\n";
                    retVal += $"DataRate: { dataRate } (offset: 5, width: 3)\r\n";
                    retVal += $"OperatingMode: { operatingMode } (offset: 8, width: 1)\r\n";
                    retVal += $"Pga: { pga } (offset: 9, width: 3)\r\n";
                    retVal += $"Mux: { mux } (offset: 12, width: 3)\r\n";
                    retVal += $"OperationalStatus: { operationalStatus } (offset: 15, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class LowThresholdRegister : Register
            {
                internal LowThresholdRegister(RegisterManager regManager) : base(regManager, 0x02, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
            internal class HighThresholdRegister : Register
            {
                internal HighThresholdRegister(RegisterManager regManager) : base(regManager, 0x03, 2, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 16)\r\n";
                    return retVal;
                }
            }
        }
    }
}