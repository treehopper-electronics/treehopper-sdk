/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.IO.Adc
{
    public partial class Nau7802
    {
        public enum Gains
        {
            x1 = 0,
            x4 = 1,
            x2 = 2,
            x8 = 3,
            x16 = 4,
            x32 = 5,
            x64 = 6,
            x128 = 7
        }

        public enum Vldoes
        {
            mV_4500 = 0,
            mV_4200 = 1,
            mV_3900 = 2,
            mV_3600 = 3,
            mV_3300 = 4,
            mV_3000 = 5,
            mV_2700 = 6,
            mV_2400 = 7
        }

        public enum CalMods
        {
            OffsetCalibrationInternal = 0,
            Reserved = 1,
            OffsetCalibrationSystem = 2,
            GainCalibrationSystem = 3
        }

        public enum ConversionRates
        {
            Sps_10 = 0,
            Sps_20 = 1,
            Sps_40 = 2,
            Sps_80 = 3,
            Sps_320 = 7
        }

        internal enum AdcVcms
        {
            ExtendedCommonModeRefp = 3,
            ExtendedCommonModeRefn = 2,
            disable = 0
        }

        internal enum RegChpFreqs
        {
            off = 3
        }

        protected class Nau7802Registers : RegisterManager
        {
            internal Nau7802Registers(IRegisterManagerAdapter adapter) : base(adapter, true)
            {
                puCtrl = new PuCtrlRegister(this);
                _registers.Add(puCtrl);
                ctrl1 = new Ctrl1Register(this);
                _registers.Add(ctrl1);
                ctrl2 = new Ctrl2Register(this);
                _registers.Add(ctrl2);
                i2cCtrl = new I2cCtrlRegister(this);
                _registers.Add(i2cCtrl);
                adcResult = new AdcResultRegister(this);
                _registers.Add(adcResult);
                adc = new AdcRegister(this);
                _registers.Add(adc);
                pga = new PgaRegister(this);
                _registers.Add(pga);
                powerCtrl = new PowerCtrlRegister(this);
                _registers.Add(powerCtrl);
            }

            internal PuCtrlRegister puCtrl;
            internal Ctrl1Register ctrl1;
            internal Ctrl2Register ctrl2;
            internal I2cCtrlRegister i2cCtrl;
            internal AdcResultRegister adcResult;
            internal AdcRegister adc;
            internal PgaRegister pga;
            internal PowerCtrlRegister powerCtrl;

            internal class PuCtrlRegister : Register
            {
                internal PuCtrlRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int registerReset { get; set; }
                public int powerUpDigital { get; set; }
                public int powerUpAnalog { get; set; }
                public int powerUpReady { get; set; }
                public int cycleStart { get; set; }
                public int cycleReady { get; set; }
                public int useExternalCrystal { get; set; }
                public int useInternalLdo { get; set; }

                internal override long getValue() { return ((registerReset & 0x1) << 0) | ((powerUpDigital & 0x1) << 1) | ((powerUpAnalog & 0x1) << 2) | ((powerUpReady & 0x1) << 3) | ((cycleStart & 0x1) << 4) | ((cycleReady & 0x1) << 5) | ((useExternalCrystal & 0x1) << 6) | ((useInternalLdo & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    registerReset = (int)((_value >> 0) & 0x1);
                    powerUpDigital = (int)((_value >> 1) & 0x1);
                    powerUpAnalog = (int)((_value >> 2) & 0x1);
                    powerUpReady = (int)((_value >> 3) & 0x1);
                    cycleStart = (int)((_value >> 4) & 0x1);
                    cycleReady = (int)((_value >> 5) & 0x1);
                    useExternalCrystal = (int)((_value >> 6) & 0x1);
                    useInternalLdo = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RegisterReset: { registerReset } (offset: 0, width: 1)\r\n";
                    retVal += $"PowerUpDigital: { powerUpDigital } (offset: 1, width: 1)\r\n";
                    retVal += $"PowerUpAnalog: { powerUpAnalog } (offset: 2, width: 1)\r\n";
                    retVal += $"PowerUpReady: { powerUpReady } (offset: 3, width: 1)\r\n";
                    retVal += $"CycleStart: { cycleStart } (offset: 4, width: 1)\r\n";
                    retVal += $"CycleReady: { cycleReady } (offset: 5, width: 1)\r\n";
                    retVal += $"UseExternalCrystal: { useExternalCrystal } (offset: 6, width: 1)\r\n";
                    retVal += $"UseInternalLdo: { useInternalLdo } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int gain { get; set; }
                public int vldo { get; set; }
                public int drdySelect { get; set; }
                public int conversionReadyPinPolarity { get; set; }
                public Gains getGain() { return (Gains)gain; }
                public void setGain(Gains enumVal) { gain = (int)enumVal; }
                public Vldoes getVldo() { return (Vldoes)vldo; }
                public void setVldo(Vldoes enumVal) { vldo = (int)enumVal; }

                internal override long getValue() { return ((gain & 0x7) << 0) | ((vldo & 0x7) << 3) | ((drdySelect & 0x1) << 6) | ((conversionReadyPinPolarity & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    gain = (int)((_value >> 0) & 0x7);
                    vldo = (int)((_value >> 3) & 0x7);
                    drdySelect = (int)((_value >> 6) & 0x1);
                    conversionReadyPinPolarity = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Gain: { gain } (offset: 0, width: 3)\r\n";
                    retVal += $"Vldo: { vldo } (offset: 3, width: 3)\r\n";
                    retVal += $"DrdySelect: { drdySelect } (offset: 6, width: 1)\r\n";
                    retVal += $"ConversionReadyPinPolarity: { conversionReadyPinPolarity } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int calMod { get; set; }
                public int calStart { get; set; }
                public int calError { get; set; }
                public int conversionRate { get; set; }
                public int channelSelect { get; set; }
                public CalMods getCalMod() { return (CalMods)calMod; }
                public void setCalMod(CalMods enumVal) { calMod = (int)enumVal; }
                public ConversionRates getConversionRate() { return (ConversionRates)conversionRate; }
                public void setConversionRate(ConversionRates enumVal) { conversionRate = (int)enumVal; }

                internal override long getValue() { return ((calMod & 0x3) << 0) | ((calStart & 0x1) << 2) | ((calError & 0x1) << 3) | ((conversionRate & 0x7) << 4) | ((channelSelect & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    calMod = (int)((_value >> 0) & 0x3);
                    calStart = (int)((_value >> 2) & 0x1);
                    calError = (int)((_value >> 3) & 0x1);
                    conversionRate = (int)((_value >> 4) & 0x7);
                    channelSelect = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"CalMod: { calMod } (offset: 0, width: 2)\r\n";
                    retVal += $"CalStart: { calStart } (offset: 2, width: 1)\r\n";
                    retVal += $"CalError: { calError } (offset: 3, width: 1)\r\n";
                    retVal += $"ConversionRate: { conversionRate } (offset: 4, width: 3)\r\n";
                    retVal += $"ChannelSelect: { channelSelect } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class I2cCtrlRegister : Register
            {
                internal I2cCtrlRegister(RegisterManager regManager) : base(regManager, 0x11, 1, false) { }

                public int bgpCp { get; set; }
                public int ts { get; set; }
                public int boPga { get; set; }
                public int si { get; set; }
                public int wpd { get; set; }
                public int spe { get; set; }
                public int frd { get; set; }
                public int crsd { get; set; }

                internal override long getValue() { return ((bgpCp & 0x1) << 0) | ((ts & 0x1) << 1) | ((boPga & 0x1) << 2) | ((si & 0x1) << 3) | ((wpd & 0x1) << 4) | ((spe & 0x1) << 5) | ((frd & 0x1) << 6) | ((crsd & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    bgpCp = (int)((_value >> 0) & 0x1);
                    ts = (int)((_value >> 1) & 0x1);
                    boPga = (int)((_value >> 2) & 0x1);
                    si = (int)((_value >> 3) & 0x1);
                    wpd = (int)((_value >> 4) & 0x1);
                    spe = (int)((_value >> 5) & 0x1);
                    frd = (int)((_value >> 6) & 0x1);
                    crsd = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"BgpCp: { bgpCp } (offset: 0, width: 1)\r\n";
                    retVal += $"Ts: { ts } (offset: 1, width: 1)\r\n";
                    retVal += $"BoPga: { boPga } (offset: 2, width: 1)\r\n";
                    retVal += $"Si: { si } (offset: 3, width: 1)\r\n";
                    retVal += $"Wpd: { wpd } (offset: 4, width: 1)\r\n";
                    retVal += $"Spe: { spe } (offset: 5, width: 1)\r\n";
                    retVal += $"Frd: { frd } (offset: 6, width: 1)\r\n";
                    retVal += $"Crsd: { crsd } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class AdcResultRegister : Register
            {
                internal AdcResultRegister(RegisterManager regManager) : base(regManager, 0x12, 3, true) { }

                public int value { get; set; }

                internal override long getValue() { return ((value & 0xFFFFFF) << 0); }
                internal override void setValue(long _value)
                {
                    value = (int)(((_value >> 0) & 0xFFFFFF) << (32 - 24)) >> (32 - 24);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { value } (offset: 0, width: 24)\r\n";
                    return retVal;
                }
            }
            internal class AdcRegister : Register
            {
                internal AdcRegister(RegisterManager regManager) : base(regManager, 0x15, 1, false) { }

                public int regChp { get; set; }
                public int adcVcm { get; set; }
                public int regChpFreq { get; set; }
                public AdcVcms getAdcVcm() { return (AdcVcms)adcVcm; }
                public void setAdcVcm(AdcVcms enumVal) { adcVcm = (int)enumVal; }
                public RegChpFreqs getRegChpFreq() { return (RegChpFreqs)regChpFreq; }
                public void setRegChpFreq(RegChpFreqs enumVal) { regChpFreq = (int)enumVal; }

                internal override long getValue() { return ((regChp & 0x3) << 0) | ((adcVcm & 0x3) << 2) | ((regChpFreq & 0x3) << 4); }
                internal override void setValue(long _value)
                {
                    regChp = (int)((_value >> 0) & 0x3);
                    adcVcm = (int)((_value >> 2) & 0x3);
                    regChpFreq = (int)((_value >> 4) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"RegChp: { regChp } (offset: 0, width: 2)\r\n";
                    retVal += $"AdcVcm: { adcVcm } (offset: 2, width: 2)\r\n";
                    retVal += $"RegChpFreq: { regChpFreq } (offset: 4, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class PgaRegister : Register
            {
                internal PgaRegister(RegisterManager regManager) : base(regManager, 0x1B, 1, false) { }

                public int disableChopper { get; set; }
                public int pgaInv { get; set; }
                public int pgaBypass { get; set; }
                public int ldoMode { get; set; }
                public int rdOptSel { get; set; }

                internal override long getValue() { return ((disableChopper & 0x1) << 0) | ((pgaInv & 0x1) << 3) | ((pgaBypass & 0x1) << 4) | ((ldoMode & 0x1) << 5) | ((rdOptSel & 0x1) << 6); }
                internal override void setValue(long _value)
                {
                    disableChopper = (int)((_value >> 0) & 0x1);
                    pgaInv = (int)((_value >> 3) & 0x1);
                    pgaBypass = (int)((_value >> 4) & 0x1);
                    ldoMode = (int)((_value >> 5) & 0x1);
                    rdOptSel = (int)((_value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"DisableChopper: { disableChopper } (offset: 0, width: 1)\r\n";
                    retVal += $"PgaInv: { pgaInv } (offset: 3, width: 1)\r\n";
                    retVal += $"PgaBypass: { pgaBypass } (offset: 4, width: 1)\r\n";
                    retVal += $"LdoMode: { ldoMode } (offset: 5, width: 1)\r\n";
                    retVal += $"RdOptSel: { rdOptSel } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class PowerCtrlRegister : Register
            {
                internal PowerCtrlRegister(RegisterManager regManager) : base(regManager, 0x1C, 1, false) { }

                public int pgaCurr { get; set; }
                public int adcCurr { get; set; }
                public int masterBiasCurr { get; set; }
                public int pgaCapEn { get; set; }

                internal override long getValue() { return ((pgaCurr & 0x3) << 0) | ((adcCurr & 0x3) << 2) | ((masterBiasCurr & 0x7) << 4) | ((pgaCapEn & 0x1) << 7); }
                internal override void setValue(long _value)
                {
                    pgaCurr = (int)((_value >> 0) & 0x3);
                    adcCurr = (int)((_value >> 2) & 0x3);
                    masterBiasCurr = (int)((_value >> 4) & 0x7);
                    pgaCapEn = (int)((_value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"PgaCurr: { pgaCurr } (offset: 0, width: 2)\r\n";
                    retVal += $"AdcCurr: { adcCurr } (offset: 2, width: 2)\r\n";
                    retVal += $"MasterBiasCurr: { masterBiasCurr } (offset: 4, width: 3)\r\n";
                    retVal += $"PgaCapEn: { pgaCapEn } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
        }
    }
}