using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Treehopper.Libraries.Displays
{
    /// <summary>
    /// Represents a single Seven-Segment digit, comprised of 7 LEDs, plus a decimal point LED
    /// </summary>
    public class SevenSegmentDigit
    {
        // static protected readonly byte[] charTable = new byte[128] { 0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1, 0x80, 0x0, 0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x37, 0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x37, 0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        static private readonly byte[] charTable = new byte[128] {
        //0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10
          0x00, 0x82, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x39, 0x0F, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, // 0x20
          0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7f, 0x6f, 0x00, 0x00, 0x00, 0x48, 0x00, 0x53, // 0x30
          0x00, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x06, 0x1E, 0x00, 0x38, 0x00, 0x54, 0x3F, // 0x40
          0x73, 0x67, 0x50, 0x6D, 0x78, 0x3E, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x00, 0x0F, 0x00, 0x08, // 0x50 
          0x63, 0x5F, 0x7C, 0x58, 0x5E, 0x7B, 0x71, 0x6F, 0x74, 0x02, 0x1E, 0x00, 0x06, 0x00, 0x54, 0x5C, // 0x60
          0x73, 0x67, 0x50, 0x6D, 0x78, 0x1C, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x30, 0x0F, 0x00, 0x00  // 0x70
        };

        /// <summary>
        /// The LEDs that comprise this digit
        /// </summary>
        public IList<Led> Leds { get; protected set; }

        /// <summary>
        /// Construct a Seven-Segment digit with the specified list of LEDs
        /// </summary>
        /// <param name="leds">The LEDs to use for this digit</param>
        public SevenSegmentDigit(IList<Led> leds)
        {
            Leds = leds;
            foreach(var led in Leds)
            {
                // disable auto-flushing to increase speed
                led.Driver.AutoFlush = false;

                if (!Drivers.Contains(led.Driver))
                    Drivers.Add(led.Driver);
            }

            Character = ' ';
            Flush(true);
        }

        internal Collection<ILedDriver> Drivers { get; set; } = new Collection<ILedDriver>();

        private char character;

        /// <summary>
        /// Gets or sets the currently-displayed character
        /// </summary>
        public char Character
        {
            get
            {
                return character;
            }
            set
            {
                if (character == value) return;
                character = value;
                var leds = charTable[character];
                for(int i=0;i<7;i++)
                {
                    if (((leds >> i) & 0x01) == 1)
                        Leds[i].State = true;
                    else
                        Leds[i].State = false;
                }

                if (AutoFlush)
                    Flush();
            }
        }

        /// <summary>
        /// Gets or sets whether to automatically flush data to the board
        /// </summary>
        public bool AutoFlush { get; set; } = true;

        private bool decimalPoint;

        /// <summary>
        /// Gets or sets whether the decimal point is illuminated
        /// </summary>
        public bool DecimalPoint {
            get
            {
                return decimalPoint;
            }
            set
            {
                if (decimalPoint == value) return;
                decimalPoint = value;

                Leds[7].State = decimalPoint;
            }
          
        }


        /// <summary>
        /// Flush display data to the driver
        /// </summary>
        /// <param name="force">Force a full update, even if data doesn't appear to have changed.</param>
        public void Flush(bool force = false)
        {
            foreach (var driver in Drivers)
                driver.Flush(force);
        }

    }
}
