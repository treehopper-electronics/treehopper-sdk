using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Treehopper.Libraries.Displays
{
    public class SevenSegmentDigit
    {
        // static protected readonly byte[] charTable = new byte[128] { 0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1, 0x80, 0x0, 0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x37, 0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x77, 0x1F, 0xD, 0x3D, 0x4F, 0x47, 0x0, 0x37, 0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        static protected readonly byte[] charTable = new byte[128] {
        //0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10
          0x00, 0x82, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x39, 0x0F, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, // 0x20
          0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7f, 0x6f, 0x00, 0x00, 0x00, 0x48, 0x00, 0x53, // 0x30
          0x00, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x06, 0x1E, 0x00, 0x38, 0x00, 0x54, 0x3F, // 0x40
          0x73, 0x67, 0x50, 0x6D, 0x78, 0x3E, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x00, 0x0F, 0x00, 0x08, // 0x50 
          0x63, 0x5F, 0x7C, 0x58, 0x5E, 0x7B, 0x71, 0x6F, 0x74, 0x02, 0x1E, 0x00, 0x06, 0x00, 0x54, 0x5C, // 0x60
          0x73, 0x67, 0x50, 0x6D, 0x78, 0x1C, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x30, 0x0F, 0x00, 0x00  // 0x70
        };
        public List<Led> Leds { get; protected set; }

        public SevenSegmentDigit(IEnumerable<Led> leds)
        {
            this.Leds = leds.ToList();
            foreach(var led in Leds)
            {
                // disable auto-flushing to increase speed
                led.Driver.AutoFlush = false;

                if (!Drivers.Contains(led.Driver))
                    Drivers.Add(led.Driver);
            }

            Character = ' ';
            Flush(true);
        }

        public Collection<ILedDriver> Drivers { get; protected set; } = new Collection<ILedDriver>();

        private char character;
        public char Character
        {
            get
            {
                return character;
            }
            set
            {
                if (character == value) return;
                character = value;
                var leds = charTable[character];
                for(int i=0;i<7;i++)
                {
                    if (((leds >> i) & 0x01) == 1)
                        Leds[i].State = true;
                    else
                        Leds[i].State = false;
                }

                if (AutoFlush)
                    Flush();
            }
        }

        public bool AutoFlush { get; set; } = true;

        private bool decimalPoint;
        public bool DecimalPoint {
            get
            {
                return decimalPoint;
            }
            set
            {
                if (decimalPoint == value) return;
                decimalPoint = value;

                Leds[7].State = decimalPoint;
            }
          
        }

        public void Flush(bool force = false)
        {
            foreach (var driver in Drivers)
                driver.Flush(force);
        }

    }
}
