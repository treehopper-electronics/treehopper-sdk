/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    public partial class Lis3dh
    {
        internal enum SdoPuDiscs
        {
            SdoPullUpDisconnected = 144,
            SdoPullUpConnected = 16
        }

        internal enum HighPassFilterModeSelections
        {
            NormalMode = 0,
            ReferenceSignal = 1,
            Normal = 2,
            AutoresetOnInterrupt = 3
        }

        internal enum Scale
        {
            scale_2G = 0,
            scale_4G = 1,
            scale_8G = 2,
            scale_16G = 3
        }

        internal enum FifoModes
        {
            Bypass = 0,
            Fifo = 1,
            Stream = 2,
            StreamToFifo = 3
        }

        internal enum OutputDataRates
        {
            PowerDown = 0,
            Hz_1 = 1,
            Hz_10 = 2,
            Hz_25 = 3,
            Hz_50 = 4,
            Hz_100 = 5,
            Hz_200 = 6,
            Hz_400 = 7,
            Hz_1600 = 8,
            Hz_1344_5376 = 9
        }

        internal class Lis3dhRegisters : RegisterManager
        {
            internal Lis3dhRegisters(SMBusDevice dev = null) : base(dev, true)
            {
                StatusRegAux = new StatusRegAuxRegister(this);
                _registers.Add(StatusRegAux);
                OutAdc1 = new OutAdc1Register(this);
                _registers.Add(OutAdc1);
                OutAdc2 = new OutAdc2Register(this);
                _registers.Add(OutAdc2);
                OutAdc3 = new OutAdc3Register(this);
                _registers.Add(OutAdc3);
                WhoAmI = new WhoAmIRegister(this);
                _registers.Add(WhoAmI);
                Ctrl0 = new Ctrl0Register(this);
                _registers.Add(Ctrl0);
                TempCfgReg = new TempCfgRegRegister(this);
                _registers.Add(TempCfgReg);
                Ctrl2 = new Ctrl2Register(this);
                _registers.Add(Ctrl2);
                Ctrl3 = new Ctrl3Register(this);
                _registers.Add(Ctrl3);
                Ctrl4 = new Ctrl4Register(this);
                _registers.Add(Ctrl4);
                Ctrl5 = new Ctrl5Register(this);
                _registers.Add(Ctrl5);
                Ctrl6 = new Ctrl6Register(this);
                _registers.Add(Ctrl6);
                Reference = new ReferenceRegister(this);
                _registers.Add(Reference);
                Status = new StatusRegister(this);
                _registers.Add(Status);
                FifoCtrl = new FifoCtrlRegister(this);
                _registers.Add(FifoCtrl);
                FifoSrc = new FifoSrcRegister(this);
                _registers.Add(FifoSrc);
                Int1Cfg = new Int1CfgRegister(this);
                _registers.Add(Int1Cfg);
                Int1Src = new Int1SrcRegister(this);
                _registers.Add(Int1Src);
                Int1Threshold = new Int1ThresholdRegister(this);
                _registers.Add(Int1Threshold);
                Int1Duration = new Int1DurationRegister(this);
                _registers.Add(Int1Duration);
                Int2Cfg = new Int2CfgRegister(this);
                _registers.Add(Int2Cfg);
                Int2Src = new Int2SrcRegister(this);
                _registers.Add(Int2Src);
                Int2Threshold = new Int2ThresholdRegister(this);
                _registers.Add(Int2Threshold);
                Int2Duration = new Int2DurationRegister(this);
                _registers.Add(Int2Duration);
                ClickSource = new ClickSourceRegister(this);
                _registers.Add(ClickSource);
                ClickThreshold = new ClickThresholdRegister(this);
                _registers.Add(ClickThreshold);
                TimeLimit = new TimeLimitRegister(this);
                _registers.Add(TimeLimit);
                TimeLatency = new TimeLatencyRegister(this);
                _registers.Add(TimeLatency);
                TimeWindow = new TimeWindowRegister(this);
                _registers.Add(TimeWindow);
                ActivationThreshold = new ActivationThresholdRegister(this);
                _registers.Add(ActivationThreshold);
                ActivationDuration = new ActivationDurationRegister(this);
                _registers.Add(ActivationDuration);
                Ctrl1 = new Ctrl1Register(this);
                _registers.Add(Ctrl1);
                OutX = new OutXRegister(this);
                _registers.Add(OutX);
                OutY = new OutYRegister(this);
                _registers.Add(OutY);
                OutZ = new OutZRegister(this);
                _registers.Add(OutZ);
            }

            internal StatusRegAuxRegister StatusRegAux;
            internal OutAdc1Register OutAdc1;
            internal OutAdc2Register OutAdc2;
            internal OutAdc3Register OutAdc3;
            internal WhoAmIRegister WhoAmI;
            internal Ctrl0Register Ctrl0;
            internal TempCfgRegRegister TempCfgReg;
            internal Ctrl2Register Ctrl2;
            internal Ctrl3Register Ctrl3;
            internal Ctrl4Register Ctrl4;
            internal Ctrl5Register Ctrl5;
            internal Ctrl6Register Ctrl6;
            internal ReferenceRegister Reference;
            internal StatusRegister Status;
            internal FifoCtrlRegister FifoCtrl;
            internal FifoSrcRegister FifoSrc;
            internal Int1CfgRegister Int1Cfg;
            internal Int1SrcRegister Int1Src;
            internal Int1ThresholdRegister Int1Threshold;
            internal Int1DurationRegister Int1Duration;
            internal Int2CfgRegister Int2Cfg;
            internal Int2SrcRegister Int2Src;
            internal Int2ThresholdRegister Int2Threshold;
            internal Int2DurationRegister Int2Duration;
            internal ClickSourceRegister ClickSource;
            internal ClickThresholdRegister ClickThreshold;
            internal TimeLimitRegister TimeLimit;
            internal TimeLatencyRegister TimeLatency;
            internal TimeWindowRegister TimeWindow;
            internal ActivationThresholdRegister ActivationThreshold;
            internal ActivationDurationRegister ActivationDuration;
            internal Ctrl1Register Ctrl1;
            internal OutXRegister OutX;
            internal OutYRegister OutY;
            internal OutZRegister OutZ;

            internal class StatusRegAuxRegister : Register
            {
                internal StatusRegAuxRegister(RegisterManager regManager) : base(regManager, 0x07, 1, false) { }

                public int OneAxisDataAvailable { get; set; }
                public int TwoAxisDataAvailable { get; set; }
                public int ThreeAxisDataAvailable { get; set; }
                public int DataAvailable { get; set; }
                public int OneAxisDataOverrun { get; set; }
                public int TwoAxisDataOverrun { get; set; }
                public int DataOverrun { get; set; }

                public async Task<StatusRegAuxRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((OneAxisDataAvailable & 0x1) << 0) | ((TwoAxisDataAvailable & 0x1) << 1) | ((ThreeAxisDataAvailable & 0x1) << 2) | ((DataAvailable & 0x1) << 3) | ((OneAxisDataOverrun & 0x1) << 4) | ((TwoAxisDataOverrun & 0x1) << 5) | ((DataOverrun & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    OneAxisDataAvailable = (int)((value >> 0) & 0x1);
                    TwoAxisDataAvailable = (int)((value >> 1) & 0x1);
                    ThreeAxisDataAvailable = (int)((value >> 2) & 0x1);
                    DataAvailable = (int)((value >> 3) & 0x1);
                    OneAxisDataOverrun = (int)((value >> 4) & 0x1);
                    TwoAxisDataOverrun = (int)((value >> 5) & 0x1);
                    DataOverrun = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"OneAxisDataAvailable: { OneAxisDataAvailable } (offset: 0, width: 1)\r\n";
                    retVal += $"TwoAxisDataAvailable: { TwoAxisDataAvailable } (offset: 1, width: 1)\r\n";
                    retVal += $"ThreeAxisDataAvailable: { ThreeAxisDataAvailable } (offset: 2, width: 1)\r\n";
                    retVal += $"DataAvailable: { DataAvailable } (offset: 3, width: 1)\r\n";
                    retVal += $"OneAxisDataOverrun: { OneAxisDataOverrun } (offset: 4, width: 1)\r\n";
                    retVal += $"TwoAxisDataOverrun: { TwoAxisDataOverrun } (offset: 5, width: 1)\r\n";
                    retVal += $"DataOverrun: { DataOverrun } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc1Register : Register
            {
                internal OutAdc1Register(RegisterManager regManager) : base(regManager, 0x08, 2, false) { }

                public int Value { get; set; }

                public async Task<OutAdc1Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc2Register : Register
            {
                internal OutAdc2Register(RegisterManager regManager) : base(regManager, 0x0A, 2, false) { }

                public int Value { get; set; }

                public async Task<OutAdc2Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutAdc3Register : Register
            {
                internal OutAdc3Register(RegisterManager regManager) : base(regManager, 0x0C, 2, false) { }

                public int Value { get; set; }

                public async Task<OutAdc3Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 6) & 0x3FF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class WhoAmIRegister : Register
            {
                internal WhoAmIRegister(RegisterManager regManager) : base(regManager, 0x0f, 1, false) { }

                public int Value { get; set; }

                public async Task<WhoAmIRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl0Register : Register
            {
                internal Ctrl0Register(RegisterManager regManager) : base(regManager, 0x1E, 1, false) { }

                public int SdoPuDisc { get; set; }
                public SdoPuDiscs GetSdoPuDisc() { return (SdoPuDiscs)SdoPuDisc; }
                public void SetSdoPuDisc(SdoPuDiscs enumVal) { SdoPuDisc = (int)enumVal; }

                public async Task<Ctrl0Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((SdoPuDisc & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    SdoPuDisc = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SdoPuDisc: { SdoPuDisc } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class TempCfgRegRegister : Register
            {
                internal TempCfgRegRegister(RegisterManager regManager) : base(regManager, 0x1F, 1, false) { }

                public int AdcEn { get; set; }
                public int TempEn { get; set; }

                public async Task<TempCfgRegRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((AdcEn & 0x1) << 7) | ((TempEn & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    AdcEn = (int)((value >> 7) & 0x1);
                    TempEn = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"AdcEn: { AdcEn } (offset: 7, width: 1)\r\n";
                    retVal += $"TempEn: { TempEn } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x21, 1, false) { }

                public int HighPassAoiInt1Enable { get; set; }
                public int HighPassAoiInt2Enable { get; set; }
                public int HighPassClickEnable { get; set; }
                public int FilterDataPassThru { get; set; }
                public int HighPassFilterCutoffFrequency { get; set; }
                public int HighPassFilterModeSelection { get; set; }
                public HighPassFilterModeSelections GetHighPassFilterModeSelection() { return (HighPassFilterModeSelections)HighPassFilterModeSelection; }
                public void SetHighPassFilterModeSelection(HighPassFilterModeSelections enumVal) { HighPassFilterModeSelection = (int)enumVal; }

                public async Task<Ctrl2Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((HighPassAoiInt1Enable & 0x1) << 0) | ((HighPassAoiInt2Enable & 0x1) << 1) | ((HighPassClickEnable & 0x1) << 2) | ((FilterDataPassThru & 0x1) << 3) | ((HighPassFilterCutoffFrequency & 0x3) << 4) | ((HighPassFilterModeSelection & 0x3) << 6); }
                internal override void SetValue(long value)
                {
                    HighPassAoiInt1Enable = (int)((value >> 0) & 0x1);
                    HighPassAoiInt2Enable = (int)((value >> 1) & 0x1);
                    HighPassClickEnable = (int)((value >> 2) & 0x1);
                    FilterDataPassThru = (int)((value >> 3) & 0x1);
                    HighPassFilterCutoffFrequency = (int)((value >> 4) & 0x3);
                    HighPassFilterModeSelection = (int)((value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"HighPassAoiInt1Enable: { HighPassAoiInt1Enable } (offset: 0, width: 1)\r\n";
                    retVal += $"HighPassAoiInt2Enable: { HighPassAoiInt2Enable } (offset: 1, width: 1)\r\n";
                    retVal += $"HighPassClickEnable: { HighPassClickEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"FilterDataPassThru: { FilterDataPassThru } (offset: 3, width: 1)\r\n";
                    retVal += $"HighPassFilterCutoffFrequency: { HighPassFilterCutoffFrequency } (offset: 4, width: 2)\r\n";
                    retVal += $"HighPassFilterModeSelection: { HighPassFilterModeSelection } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl3Register : Register
            {
                internal Ctrl3Register(RegisterManager regManager) : base(regManager, 0x22, 1, false) { }

                public int Overrun { get; set; }
                public int FifoWatermark { get; set; }
                public int Da321 { get; set; }
                public int Zyxda { get; set; }
                public int Ia2 { get; set; }
                public int Ia1 { get; set; }
                public int Click { get; set; }

                public async Task<Ctrl3Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Overrun & 0x1) << 1) | ((FifoWatermark & 0x1) << 2) | ((Da321 & 0x1) << 3) | ((Zyxda & 0x1) << 4) | ((Ia2 & 0x1) << 5) | ((Ia1 & 0x1) << 6) | ((Click & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Overrun = (int)((value >> 1) & 0x1);
                    FifoWatermark = (int)((value >> 2) & 0x1);
                    Da321 = (int)((value >> 3) & 0x1);
                    Zyxda = (int)((value >> 4) & 0x1);
                    Ia2 = (int)((value >> 5) & 0x1);
                    Ia1 = (int)((value >> 6) & 0x1);
                    Click = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Overrun: { Overrun } (offset: 1, width: 1)\r\n";
                    retVal += $"FifoWatermark: { FifoWatermark } (offset: 2, width: 1)\r\n";
                    retVal += $"Da321: { Da321 } (offset: 3, width: 1)\r\n";
                    retVal += $"Zyxda: { Zyxda } (offset: 4, width: 1)\r\n";
                    retVal += $"Ia2: { Ia2 } (offset: 5, width: 1)\r\n";
                    retVal += $"Ia1: { Ia1 } (offset: 6, width: 1)\r\n";
                    retVal += $"Click: { Click } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl4Register : Register
            {
                internal Ctrl4Register(RegisterManager regManager) : base(regManager, 0x23, 1, false) { }

                public int SpiInterfaceMode { get; set; }
                public int SelfTestEnable { get; set; }
                public int HighResolutionOutput { get; set; }
                public int FullScaleSelection { get; set; }
                public int BigEndian { get; set; }
                public int BlockDataUpdate { get; set; }
                public Scale GetFullScaleSelection() { return (Scale)FullScaleSelection; }
                public void SetFullScaleSelection(Scale enumVal) { FullScaleSelection = (int)enumVal; }

                public async Task<Ctrl4Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((SpiInterfaceMode & 0x1) << 0) | ((SelfTestEnable & 0x3) << 1) | ((HighResolutionOutput & 0x1) << 3) | ((FullScaleSelection & 0x3) << 4) | ((BigEndian & 0x1) << 6) | ((BlockDataUpdate & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    SpiInterfaceMode = (int)((value >> 0) & 0x1);
                    SelfTestEnable = (int)((value >> 1) & 0x3);
                    HighResolutionOutput = (int)((value >> 3) & 0x1);
                    FullScaleSelection = (int)((value >> 4) & 0x3);
                    BigEndian = (int)((value >> 6) & 0x1);
                    BlockDataUpdate = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"SpiInterfaceMode: { SpiInterfaceMode } (offset: 0, width: 1)\r\n";
                    retVal += $"SelfTestEnable: { SelfTestEnable } (offset: 1, width: 2)\r\n";
                    retVal += $"HighResolutionOutput: { HighResolutionOutput } (offset: 3, width: 1)\r\n";
                    retVal += $"FullScaleSelection: { FullScaleSelection } (offset: 4, width: 2)\r\n";
                    retVal += $"BigEndian: { BigEndian } (offset: 6, width: 1)\r\n";
                    retVal += $"BlockDataUpdate: { BlockDataUpdate } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl5Register : Register
            {
                internal Ctrl5Register(RegisterManager regManager) : base(regManager, 0x24, 1, false) { }

                public int Enable4DInt2 { get; set; }
                public int LatchInt2 { get; set; }
                public int Enable4DInt1 { get; set; }
                public int LatchInt1 { get; set; }
                public int FifoEnable { get; set; }
                public int RebootMemoryContent { get; set; }

                public async Task<Ctrl5Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Enable4DInt2 & 0x1) << 0) | ((LatchInt2 & 0x1) << 1) | ((Enable4DInt1 & 0x1) << 2) | ((LatchInt1 & 0x1) << 3) | ((FifoEnable & 0x1) << 4) | ((RebootMemoryContent & 0x1) << 5); }
                internal override void SetValue(long value)
                {
                    Enable4DInt2 = (int)((value >> 0) & 0x1);
                    LatchInt2 = (int)((value >> 1) & 0x1);
                    Enable4DInt1 = (int)((value >> 2) & 0x1);
                    LatchInt1 = (int)((value >> 3) & 0x1);
                    FifoEnable = (int)((value >> 4) & 0x1);
                    RebootMemoryContent = (int)((value >> 5) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Enable4DInt2: { Enable4DInt2 } (offset: 0, width: 1)\r\n";
                    retVal += $"LatchInt2: { LatchInt2 } (offset: 1, width: 1)\r\n";
                    retVal += $"Enable4DInt1: { Enable4DInt1 } (offset: 2, width: 1)\r\n";
                    retVal += $"LatchInt1: { LatchInt1 } (offset: 3, width: 1)\r\n";
                    retVal += $"FifoEnable: { FifoEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"RebootMemoryContent: { RebootMemoryContent } (offset: 5, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl6Register : Register
            {
                internal Ctrl6Register(RegisterManager regManager) : base(regManager, 0x25, 1, false) { }

                public int IntPolarity { get; set; }
                public int Act { get; set; }
                public int Boot { get; set; }
                public int Ia2 { get; set; }
                public int Ia1 { get; set; }
                public int Click { get; set; }

                public async Task<Ctrl6Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((IntPolarity & 0x1) << 1) | ((Act & 0x1) << 3) | ((Boot & 0x1) << 4) | ((Ia2 & 0x1) << 5) | ((Ia1 & 0x1) << 6) | ((Click & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    IntPolarity = (int)((value >> 1) & 0x1);
                    Act = (int)((value >> 3) & 0x1);
                    Boot = (int)((value >> 4) & 0x1);
                    Ia2 = (int)((value >> 5) & 0x1);
                    Ia1 = (int)((value >> 6) & 0x1);
                    Click = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"IntPolarity: { IntPolarity } (offset: 1, width: 1)\r\n";
                    retVal += $"Act: { Act } (offset: 3, width: 1)\r\n";
                    retVal += $"Boot: { Boot } (offset: 4, width: 1)\r\n";
                    retVal += $"Ia2: { Ia2 } (offset: 5, width: 1)\r\n";
                    retVal += $"Ia1: { Ia1 } (offset: 6, width: 1)\r\n";
                    retVal += $"Click: { Click } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ReferenceRegister : Register
            {
                internal ReferenceRegister(RegisterManager regManager) : base(regManager, 0x26, 1, false) { }

                public int Value { get; set; }

                public async Task<ReferenceRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class StatusRegister : Register
            {
                internal StatusRegister(RegisterManager regManager) : base(regManager, 0x27, 1, false) { }

                public int Xda { get; set; }
                public int Yda { get; set; }
                public int Zda { get; set; }
                public int Zyxda { get; set; }
                public int Xor { get; set; }
                public int Yor { get; set; }
                public int Zor { get; set; }
                public int Zyxor { get; set; }

                public async Task<StatusRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Xda & 0x1) << 0) | ((Yda & 0x1) << 1) | ((Zda & 0x1) << 2) | ((Zyxda & 0x1) << 3) | ((Xor & 0x1) << 4) | ((Yor & 0x1) << 5) | ((Zor & 0x1) << 6) | ((Zyxor & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Xda = (int)((value >> 0) & 0x1);
                    Yda = (int)((value >> 1) & 0x1);
                    Zda = (int)((value >> 2) & 0x1);
                    Zyxda = (int)((value >> 3) & 0x1);
                    Xor = (int)((value >> 4) & 0x1);
                    Yor = (int)((value >> 5) & 0x1);
                    Zor = (int)((value >> 6) & 0x1);
                    Zyxor = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Xda: { Xda } (offset: 0, width: 1)\r\n";
                    retVal += $"Yda: { Yda } (offset: 1, width: 1)\r\n";
                    retVal += $"Zda: { Zda } (offset: 2, width: 1)\r\n";
                    retVal += $"Zyxda: { Zyxda } (offset: 3, width: 1)\r\n";
                    retVal += $"Xor: { Xor } (offset: 4, width: 1)\r\n";
                    retVal += $"Yor: { Yor } (offset: 5, width: 1)\r\n";
                    retVal += $"Zor: { Zor } (offset: 6, width: 1)\r\n";
                    retVal += $"Zyxor: { Zyxor } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class FifoCtrlRegister : Register
            {
                internal FifoCtrlRegister(RegisterManager regManager) : base(regManager, 0x2E, 1, false) { }

                public int FifoThreshold { get; set; }
                public int TriggerSelection { get; set; }
                public int FifoMode { get; set; }
                public FifoModes GetFifoMode() { return (FifoModes)FifoMode; }
                public void SetFifoMode(FifoModes enumVal) { FifoMode = (int)enumVal; }

                public async Task<FifoCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((FifoThreshold & 0x1F) << 0) | ((TriggerSelection & 0x1) << 5) | ((FifoMode & 0x3) << 6); }
                internal override void SetValue(long value)
                {
                    FifoThreshold = (int)((value >> 0) & 0x1F);
                    TriggerSelection = (int)((value >> 5) & 0x1);
                    FifoMode = (int)((value >> 6) & 0x3);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"FifoThreshold: { FifoThreshold } (offset: 0, width: 5)\r\n";
                    retVal += $"TriggerSelection: { TriggerSelection } (offset: 5, width: 1)\r\n";
                    retVal += $"FifoMode: { FifoMode } (offset: 6, width: 2)\r\n";
                    return retVal;
                }
            }
            internal class FifoSrcRegister : Register
            {
                internal FifoSrcRegister(RegisterManager regManager) : base(regManager, 0x2F, 1, false) { }

                public int Fss { get; set; }
                public int Emtpy { get; set; }
                public int OverrunFifo { get; set; }
                public int Watermark { get; set; }

                public async Task<FifoSrcRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Fss & 0x1F) << 0) | ((Emtpy & 0x1) << 5) | ((OverrunFifo & 0x1) << 6) | ((Watermark & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Fss = (int)((value >> 0) & 0x1F);
                    Emtpy = (int)((value >> 5) & 0x1);
                    OverrunFifo = (int)((value >> 6) & 0x1);
                    Watermark = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Fss: { Fss } (offset: 0, width: 5)\r\n";
                    retVal += $"Emtpy: { Emtpy } (offset: 5, width: 1)\r\n";
                    retVal += $"OverrunFifo: { OverrunFifo } (offset: 6, width: 1)\r\n";
                    retVal += $"Watermark: { Watermark } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1CfgRegister : Register
            {
                internal Int1CfgRegister(RegisterManager regManager) : base(regManager, 0x30, 1, false) { }

                public int EnableXLowEvent { get; set; }
                public int EnableXHighEvent { get; set; }
                public int EnableYLowEvent { get; set; }
                public int EnableYHighEvent { get; set; }
                public int EnableZLowEvent { get; set; }
                public int EnableZHighEvent { get; set; }
                public int Enable6D { get; set; }
                public int AndOrInterruptEvents { get; set; }

                public async Task<Int1CfgRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((EnableXLowEvent & 0x1) << 0) | ((EnableXHighEvent & 0x1) << 1) | ((EnableYLowEvent & 0x1) << 2) | ((EnableYHighEvent & 0x1) << 3) | ((EnableZLowEvent & 0x1) << 4) | ((EnableZHighEvent & 0x1) << 5) | ((Enable6D & 0x1) << 6) | ((AndOrInterruptEvents & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    EnableXLowEvent = (int)((value >> 0) & 0x1);
                    EnableXHighEvent = (int)((value >> 1) & 0x1);
                    EnableYLowEvent = (int)((value >> 2) & 0x1);
                    EnableYHighEvent = (int)((value >> 3) & 0x1);
                    EnableZLowEvent = (int)((value >> 4) & 0x1);
                    EnableZHighEvent = (int)((value >> 5) & 0x1);
                    Enable6D = (int)((value >> 6) & 0x1);
                    AndOrInterruptEvents = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"EnableXLowEvent: { EnableXLowEvent } (offset: 0, width: 1)\r\n";
                    retVal += $"EnableXHighEvent: { EnableXHighEvent } (offset: 1, width: 1)\r\n";
                    retVal += $"EnableYLowEvent: { EnableYLowEvent } (offset: 2, width: 1)\r\n";
                    retVal += $"EnableYHighEvent: { EnableYHighEvent } (offset: 3, width: 1)\r\n";
                    retVal += $"EnableZLowEvent: { EnableZLowEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"EnableZHighEvent: { EnableZHighEvent } (offset: 5, width: 1)\r\n";
                    retVal += $"Enable6D: { Enable6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { AndOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1SrcRegister : Register
            {
                internal Int1SrcRegister(RegisterManager regManager) : base(regManager, 0x31, 1, false) { }

                public int XLow { get; set; }
                public int XHigh { get; set; }
                public int YLow { get; set; }
                public int YHigh { get; set; }
                public int ZLow { get; set; }
                public int ZHigh { get; set; }
                public int InterruptActive { get; set; }

                public async Task<Int1SrcRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((XLow & 0x1) << 0) | ((XHigh & 0x1) << 1) | ((YLow & 0x1) << 2) | ((YHigh & 0x1) << 3) | ((ZLow & 0x1) << 4) | ((ZHigh & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    XLow = (int)((value >> 0) & 0x1);
                    XHigh = (int)((value >> 1) & 0x1);
                    YLow = (int)((value >> 2) & 0x1);
                    YHigh = (int)((value >> 3) & 0x1);
                    ZLow = (int)((value >> 4) & 0x1);
                    ZHigh = (int)((value >> 5) & 0x1);
                    InterruptActive = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { XLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { XHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { YLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { YHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { ZLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { ZHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { InterruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int1ThresholdRegister : Register
            {
                internal Int1ThresholdRegister(RegisterManager regManager) : base(regManager, 0x32, 1, false) { }

                public int Value { get; set; }

                public async Task<Int1ThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int1DurationRegister : Register
            {
                internal Int1DurationRegister(RegisterManager regManager) : base(regManager, 0x33, 1, false) { }

                public int Value { get; set; }

                public async Task<Int1DurationRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int2CfgRegister : Register
            {
                internal Int2CfgRegister(RegisterManager regManager) : base(regManager, 0x34, 1, false) { }

                public int EnableXLowEvent { get; set; }
                public int EnableXHighEvent { get; set; }
                public int EnableYLowEvent { get; set; }
                public int EnableYHighEvent { get; set; }
                public int EnableZLowEvent { get; set; }
                public int EnableZHighEvent { get; set; }
                public int Enable6D { get; set; }
                public int AndOrInterruptEvents { get; set; }

                public async Task<Int2CfgRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((EnableXLowEvent & 0x1) << 0) | ((EnableXHighEvent & 0x1) << 1) | ((EnableYLowEvent & 0x1) << 2) | ((EnableYHighEvent & 0x1) << 3) | ((EnableZLowEvent & 0x1) << 4) | ((EnableZHighEvent & 0x1) << 5) | ((Enable6D & 0x1) << 6) | ((AndOrInterruptEvents & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    EnableXLowEvent = (int)((value >> 0) & 0x1);
                    EnableXHighEvent = (int)((value >> 1) & 0x1);
                    EnableYLowEvent = (int)((value >> 2) & 0x1);
                    EnableYHighEvent = (int)((value >> 3) & 0x1);
                    EnableZLowEvent = (int)((value >> 4) & 0x1);
                    EnableZHighEvent = (int)((value >> 5) & 0x1);
                    Enable6D = (int)((value >> 6) & 0x1);
                    AndOrInterruptEvents = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"EnableXLowEvent: { EnableXLowEvent } (offset: 0, width: 1)\r\n";
                    retVal += $"EnableXHighEvent: { EnableXHighEvent } (offset: 1, width: 1)\r\n";
                    retVal += $"EnableYLowEvent: { EnableYLowEvent } (offset: 2, width: 1)\r\n";
                    retVal += $"EnableYHighEvent: { EnableYHighEvent } (offset: 3, width: 1)\r\n";
                    retVal += $"EnableZLowEvent: { EnableZLowEvent } (offset: 4, width: 1)\r\n";
                    retVal += $"EnableZHighEvent: { EnableZHighEvent } (offset: 5, width: 1)\r\n";
                    retVal += $"Enable6D: { Enable6D } (offset: 6, width: 1)\r\n";
                    retVal += $"AndOrInterruptEvents: { AndOrInterruptEvents } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int2SrcRegister : Register
            {
                internal Int2SrcRegister(RegisterManager regManager) : base(regManager, 0x35, 1, false) { }

                public int XLow { get; set; }
                public int XHigh { get; set; }
                public int YLow { get; set; }
                public int YHigh { get; set; }
                public int ZLow { get; set; }
                public int ZHigh { get; set; }
                public int InterruptActive { get; set; }

                public async Task<Int2SrcRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((XLow & 0x1) << 0) | ((XHigh & 0x1) << 1) | ((YLow & 0x1) << 2) | ((YHigh & 0x1) << 3) | ((ZLow & 0x1) << 4) | ((ZHigh & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    XLow = (int)((value >> 0) & 0x1);
                    XHigh = (int)((value >> 1) & 0x1);
                    YLow = (int)((value >> 2) & 0x1);
                    YHigh = (int)((value >> 3) & 0x1);
                    ZLow = (int)((value >> 4) & 0x1);
                    ZHigh = (int)((value >> 5) & 0x1);
                    InterruptActive = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XLow: { XLow } (offset: 0, width: 1)\r\n";
                    retVal += $"XHigh: { XHigh } (offset: 1, width: 1)\r\n";
                    retVal += $"YLow: { YLow } (offset: 2, width: 1)\r\n";
                    retVal += $"YHigh: { YHigh } (offset: 3, width: 1)\r\n";
                    retVal += $"ZLow: { ZLow } (offset: 4, width: 1)\r\n";
                    retVal += $"ZHigh: { ZHigh } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { InterruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class Int2ThresholdRegister : Register
            {
                internal Int2ThresholdRegister(RegisterManager regManager) : base(regManager, 0x36, 1, false) { }

                public int Value { get; set; }

                public async Task<Int2ThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class Int2DurationRegister : Register
            {
                internal Int2DurationRegister(RegisterManager regManager) : base(regManager, 0x37, 1, false) { }

                public int Value { get; set; }

                public async Task<Int2DurationRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ClickSourceRegister : Register
            {
                internal ClickSourceRegister(RegisterManager regManager) : base(regManager, 0x39, 1, false) { }

                public int X { get; set; }
                public int Y { get; set; }
                public int Z { get; set; }
                public int Sign { get; set; }
                public int SingleClickEnable { get; set; }
                public int DoubleClickEnable { get; set; }
                public int InterruptActive { get; set; }

                public async Task<ClickSourceRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((X & 0x1) << 0) | ((Y & 0x1) << 1) | ((Z & 0x1) << 2) | ((Sign & 0x1) << 3) | ((SingleClickEnable & 0x1) << 4) | ((DoubleClickEnable & 0x1) << 5) | ((InterruptActive & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    X = (int)((value >> 0) & 0x1);
                    Y = (int)((value >> 1) & 0x1);
                    Z = (int)((value >> 2) & 0x1);
                    Sign = (int)((value >> 3) & 0x1);
                    SingleClickEnable = (int)((value >> 4) & 0x1);
                    DoubleClickEnable = (int)((value >> 5) & 0x1);
                    InterruptActive = (int)((value >> 6) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"X: { X } (offset: 0, width: 1)\r\n";
                    retVal += $"Y: { Y } (offset: 1, width: 1)\r\n";
                    retVal += $"Z: { Z } (offset: 2, width: 1)\r\n";
                    retVal += $"Sign: { Sign } (offset: 3, width: 1)\r\n";
                    retVal += $"SingleClickEnable: { SingleClickEnable } (offset: 4, width: 1)\r\n";
                    retVal += $"DoubleClickEnable: { DoubleClickEnable } (offset: 5, width: 1)\r\n";
                    retVal += $"InterruptActive: { InterruptActive } (offset: 6, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class ClickThresholdRegister : Register
            {
                internal ClickThresholdRegister(RegisterManager regManager) : base(regManager, 0x3A, 1, false) { }

                public int Threshold { get; set; }
                public int LirClick { get; set; }

                public async Task<ClickThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Threshold & 0x7F) << 0) | ((LirClick & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Threshold = (int)((value >> 0) & 0x7F);
                    LirClick = (int)((value >> 7) & 0x1);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Threshold: { Threshold } (offset: 0, width: 7)\r\n";
                    retVal += $"LirClick: { LirClick } (offset: 7, width: 1)\r\n";
                    return retVal;
                }
            }
            internal class TimeLimitRegister : Register
            {
                internal TimeLimitRegister(RegisterManager regManager) : base(regManager, 0x3B, 1, false) { }

                public int Value { get; set; }

                public async Task<TimeLimitRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class TimeLatencyRegister : Register
            {
                internal TimeLatencyRegister(RegisterManager regManager) : base(regManager, 0x3C, 10, false) { }

                public int Value { get; set; }

                public async Task<TimeLatencyRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7FFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7FFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 79)\r\n";
                    return retVal;
                }
            }
            internal class TimeWindowRegister : Register
            {
                internal TimeWindowRegister(RegisterManager regManager) : base(regManager, 0x3D, 1, false) { }

                public int Value { get; set; }

                public async Task<TimeWindowRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class ActivationThresholdRegister : Register
            {
                internal ActivationThresholdRegister(RegisterManager regManager) : base(regManager, 0x3E, 1, false) { }

                public int Value { get; set; }

                public async Task<ActivationThresholdRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x7F) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0x7F);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 7)\r\n";
                    return retVal;
                }
            }
            internal class ActivationDurationRegister : Register
            {
                internal ActivationDurationRegister(RegisterManager regManager) : base(regManager, 0x3F, 1, false) { }

                public int Value { get; set; }

                public async Task<ActivationDurationRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)((value >> 0) & 0xFF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 0, width: 8)\r\n";
                    return retVal;
                }
            }
            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0xA0, 1, false) { }

                public int XAxisEnable { get; set; }
                public int YAxisEnable { get; set; }
                public int ZAxisEnable { get; set; }
                public int LowPowerEnable { get; set; }
                public int OutputDataRate { get; set; }
                public OutputDataRates GetOutputDataRate() { return (OutputDataRates)OutputDataRate; }
                public void SetOutputDataRate(OutputDataRates enumVal) { OutputDataRate = (int)enumVal; }

                public async Task<Ctrl1Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((XAxisEnable & 0x1) << 0) | ((YAxisEnable & 0x1) << 1) | ((ZAxisEnable & 0x1) << 2) | ((LowPowerEnable & 0x1) << 3) | ((OutputDataRate & 0xF) << 4); }
                internal override void SetValue(long value)
                {
                    XAxisEnable = (int)((value >> 0) & 0x1);
                    YAxisEnable = (int)((value >> 1) & 0x1);
                    ZAxisEnable = (int)((value >> 2) & 0x1);
                    LowPowerEnable = (int)((value >> 3) & 0x1);
                    OutputDataRate = (int)((value >> 4) & 0xF);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"XAxisEnable: { XAxisEnable } (offset: 0, width: 1)\r\n";
                    retVal += $"YAxisEnable: { YAxisEnable } (offset: 1, width: 1)\r\n";
                    retVal += $"ZAxisEnable: { ZAxisEnable } (offset: 2, width: 1)\r\n";
                    retVal += $"LowPowerEnable: { LowPowerEnable } (offset: 3, width: 1)\r\n";
                    retVal += $"OutputDataRate: { OutputDataRate } (offset: 4, width: 4)\r\n";
                    return retVal;
                }
            }
            internal class OutXRegister : Register
            {
                internal OutXRegister(RegisterManager regManager) : base(regManager, 0xA8, 2, false) { }

                public int Value { get; set; }

                public async Task<OutXRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutYRegister : Register
            {
                internal OutYRegister(RegisterManager regManager) : base(regManager, 0xAA, 2, false) { }

                public int Value { get; set; }

                public async Task<OutYRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
            internal class OutZRegister : Register
            {
                internal OutZRegister(RegisterManager regManager) : base(regManager, 0xAC, 2, false) { }

                public int Value { get; set; }

                public async Task<OutZRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0x3FF) << 6); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
                }

                public override string ToString()
                {
                    string retVal = "";
                    retVal += $"Value: { Value } (offset: 6, width: 10)\r\n";
                    return retVal;
                }
            }
        }
    }
}