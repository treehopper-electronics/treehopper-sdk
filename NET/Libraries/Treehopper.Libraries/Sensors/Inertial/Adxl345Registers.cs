using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.Sensors.Inertial
{
    /// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
    internal class Adxl345Registers
    {
        SMBusDevice _dev;
        internal Adxl345Registers(SMBusDevice dev = null)
        {
            _dev = dev;
        }

        internal async Task Flush()
        {
            await _dev.WriteBufferData(0x2D, GetBytes(PowerCtl.GetValue(), 1, true));
            await _dev.WriteBufferData(0x31, GetBytes(DataFormat.GetValue(), 1, true));
        }

        internal async Task Update()
        {
            int i = 0;
            var bytes = await _dev.ReadBufferData(50, 6);
            DataX.SetValue(GetValue(bytes.Skip(i).Take(2).ToArray(), true));
            i += 2;
            DataY.SetValue(GetValue(bytes.Skip(i).Take(2).ToArray(), true));
            i += 2;
            DataZ.SetValue(GetValue(bytes.Skip(i).Take(2).ToArray(), true));
            i += 2;
        }

        internal byte[] GetBytes(long val, int width, bool isLittleEndian)
        {
            var retVal = new byte[width]; 
            for (var i = 0; i < width; i++) 
                retVal[i] = (byte) ((val >> (8 * i)) & 0xFF);

            if (BitConverter.IsLittleEndian ^ isLittleEndian) 
                retVal = retVal.Reverse().ToArray();

            return retVal;
        }

        internal long GetValue(byte[] bytes, bool isLittleEndian)
        {
            if (BitConverter.IsLittleEndian ^ isLittleEndian) 
                    bytes = bytes.Reverse().ToArray(); 
 
            long regVal = 0; 
 
            for (var i = 0; i < bytes.Length; i++) 
                    regVal |= bytes[i] << (i * 8);

            return regVal;
        }

        internal PowerCtlRegister PowerCtl = new PowerCtlRegister();
        internal DataFormatRegister DataFormat = new DataFormatRegister();
        internal DataXRegister DataX = new DataXRegister();
        internal DataYRegister DataY = new DataYRegister();
        internal DataZRegister DataZ = new DataZRegister();

        internal class PowerCtlRegister
        {
            public int Sleep { get; set; }
            public int Measure { get; set; }
            internal long GetValue() { return ((Sleep & 0x1) << 2) | ((Measure & 0x1) << 3); }
            internal void SetValue(long value)
            {
                Sleep = (int)((value >> 2) & 0x1);
                Measure = (int)((value >> 3) & 0x1);
            }
        }
        internal class DataFormatRegister
        {
            public int Range { get; set; }
            internal long GetValue() { return ((Range & 0x3) << 0); }
            internal void SetValue(long value)
            {
                Range = (int)((value >> 0) & 0x3);
            }
        }
        internal class DataXRegister
        {
            public int Value { get; set; }
            internal long GetValue() { return ((Value & 0xFFFF) << 0); }
            internal void SetValue(long value)
            {
                Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
            }
        }
        internal class DataYRegister
        {
            public int Value { get; set; }
            internal long GetValue() { return ((Value & 0xFFFF) << 0); }
            internal void SetValue(long value)
            {
                Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
            }
        }
        internal class DataZRegister
        {
            public int Value { get; set; }
            internal long GetValue() { return ((Value & 0xFFFF) << 0); }
            internal void SetValue(long value)
            {
                Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
            }
        }
    }
}