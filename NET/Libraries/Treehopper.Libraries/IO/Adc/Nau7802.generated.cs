/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.IO.Adc
{
    public partial class Nau7802
    {
        public enum Gains
        {
            x1 = 0,
            x4 = 1,
            x2 = 2,
            x8 = 3,
            x16 = 4,
            x32 = 5,
            x64 = 6,
            x128 = 7
        }

        public enum LdoVoltage
        {
            mV_4500 = 0,
            mV_4200 = 1,
            mV_3900 = 2,
            mV_3600 = 3,
            mV_3300 = 4,
            mV_3000 = 5,
            mV_2700 = 6,
            mV_2400 = 7
        }

        public enum CalMods
        {
            OffsetCalibrationInternal = 0,
            Reserved = 1,
            OffsetCalibrationSystem = 2,
            GainCalibrationSystem = 3
        }

        public enum ConversionRates
        {
            Sps_10 = 0,
            Sps_20 = 1,
            Sps_40 = 2,
            Sps_80 = 3,
            Sps_320 = 7
        }

        internal enum AdcVcms
        {
            ExtendedCommonModeRefp = 3,
            ExtendedCommonModeRefn = 2,
            disable = 0
        }

        internal enum RegChpFreqs
        {
            off = 3
        }

        internal class Nau7802Registers : RegisterManager
        {
            internal Nau7802Registers(SMBusDevice dev = null) : base(dev)
            {
                PuCtrl = new PuCtrlRegister(this);
                _registers.Add(PuCtrl);
                Ctrl1 = new Ctrl1Register(this);
                _registers.Add(Ctrl1);
                Ctrl2 = new Ctrl2Register(this);
                _registers.Add(Ctrl2);
                I2cCtrl = new I2cCtrlRegister(this);
                _registers.Add(I2cCtrl);
                AdcResult = new AdcResultRegister(this);
                _registers.Add(AdcResult);
                Adc = new AdcRegister(this);
                _registers.Add(Adc);
                Pga = new PgaRegister(this);
                _registers.Add(Pga);
                PowerCtrl = new PowerCtrlRegister(this);
                _registers.Add(PowerCtrl);
            }

            internal PuCtrlRegister PuCtrl;
            internal Ctrl1Register Ctrl1;
            internal Ctrl2Register Ctrl2;
            internal I2cCtrlRegister I2cCtrl;
            internal AdcResultRegister AdcResult;
            internal AdcRegister Adc;
            internal PgaRegister Pga;
            internal PowerCtrlRegister PowerCtrl;

            internal class PuCtrlRegister : Register
            {
                internal PuCtrlRegister(RegisterManager regManager) : base(regManager, 0x00, 1, false) { }

                public int RegisterReset { get; set; }
                public int PowerUpDigital { get; set; }
                public int PowerUpAnalog { get; set; }
                public int PowerUpReady { get; set; }
                public int CycleStart { get; set; }
                public int CycleReady { get; set; }
                public int UseExternalCrystal { get; set; }
                public int UseInternalLdo { get; set; }

                public async Task<PuCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((RegisterReset & 0x1) << 0) | ((PowerUpDigital & 0x1) << 1) | ((PowerUpAnalog & 0x1) << 2) | ((PowerUpReady & 0x1) << 3) | ((CycleStart & 0x1) << 4) | ((CycleReady & 0x1) << 5) | ((UseExternalCrystal & 0x1) << 6) | ((UseInternalLdo & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    RegisterReset = (int)((value >> 0) & 0x1);
                    PowerUpDigital = (int)((value >> 1) & 0x1);
                    PowerUpAnalog = (int)((value >> 2) & 0x1);
                    PowerUpReady = (int)((value >> 3) & 0x1);
                    CycleStart = (int)((value >> 4) & 0x1);
                    CycleReady = (int)((value >> 5) & 0x1);
                    UseExternalCrystal = (int)((value >> 6) & 0x1);
                    UseInternalLdo = (int)((value >> 7) & 0x1);
                }
            }
            internal class Ctrl1Register : Register
            {
                internal Ctrl1Register(RegisterManager regManager) : base(regManager, 0x01, 1, false) { }

                public int Gain { get; set; }
                public int Vldo { get; set; }
                public int DrdySelect { get; set; }
                public int ConversionReadyPinPolarity { get; set; }
                public Gains GetGain() { return (Gains)Gain; }
                public void SetGain(Gains enumVal) { Gain = (int)enumVal; }
                public LdoVoltage GetVldo() { return (LdoVoltage)Vldo; }
                public void SetVldo(LdoVoltage enumVal) { Vldo = (int)enumVal; }

                public async Task<Ctrl1Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Gain & 0x7) << 0) | ((Vldo & 0x7) << 3) | ((DrdySelect & 0x1) << 6) | ((ConversionReadyPinPolarity & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    Gain = (int)((value >> 0) & 0x7);
                    Vldo = (int)((value >> 3) & 0x7);
                    DrdySelect = (int)((value >> 6) & 0x1);
                    ConversionReadyPinPolarity = (int)((value >> 7) & 0x1);
                }
            }
            internal class Ctrl2Register : Register
            {
                internal Ctrl2Register(RegisterManager regManager) : base(regManager, 0x02, 1, false) { }

                public int CalMod { get; set; }
                public int CalStart { get; set; }
                public int CalError { get; set; }
                public int ConversionRate { get; set; }
                public int ChannelSelect { get; set; }
                public CalMods GetCalMod() { return (CalMods)CalMod; }
                public void SetCalMod(CalMods enumVal) { CalMod = (int)enumVal; }
                public ConversionRates GetConversionRate() { return (ConversionRates)ConversionRate; }
                public void SetConversionRate(ConversionRates enumVal) { ConversionRate = (int)enumVal; }

                public async Task<Ctrl2Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((CalMod & 0x3) << 0) | ((CalStart & 0x1) << 2) | ((CalError & 0x1) << 3) | ((ConversionRate & 0x7) << 4) | ((ChannelSelect & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    CalMod = (int)((value >> 0) & 0x3);
                    CalStart = (int)((value >> 2) & 0x1);
                    CalError = (int)((value >> 3) & 0x1);
                    ConversionRate = (int)((value >> 4) & 0x7);
                    ChannelSelect = (int)((value >> 7) & 0x1);
                }
            }
            internal class I2cCtrlRegister : Register
            {
                internal I2cCtrlRegister(RegisterManager regManager) : base(regManager, 0x11, 1, false) { }

                public int BgpCp { get; set; }
                public int Ts { get; set; }
                public int BoPga { get; set; }
                public int Si { get; set; }
                public int Wpd { get; set; }
                public int Spe { get; set; }
                public int Frd { get; set; }
                public int Crsd { get; set; }

                public async Task<I2cCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((BgpCp & 0x1) << 0) | ((Ts & 0x1) << 1) | ((BoPga & 0x1) << 2) | ((Si & 0x1) << 3) | ((Wpd & 0x1) << 4) | ((Spe & 0x1) << 5) | ((Frd & 0x1) << 6) | ((Crsd & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    BgpCp = (int)((value >> 0) & 0x1);
                    Ts = (int)((value >> 1) & 0x1);
                    BoPga = (int)((value >> 2) & 0x1);
                    Si = (int)((value >> 3) & 0x1);
                    Wpd = (int)((value >> 4) & 0x1);
                    Spe = (int)((value >> 5) & 0x1);
                    Frd = (int)((value >> 6) & 0x1);
                    Crsd = (int)((value >> 7) & 0x1);
                }
            }
            internal class AdcResultRegister : Register
            {
                internal AdcResultRegister(RegisterManager regManager) : base(regManager, 0x12, 3, true) { }

                public int Value { get; set; }

                public async Task<AdcResultRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((Value & 0xFFFFFF) << 0); }
                internal override void SetValue(long value)
                {
                    Value = (int)(((value >> 0) & 0xFFFFFF) << (32 - 0 - 24)) >> (32 - 0 - 24);
                }
            }
            internal class AdcRegister : Register
            {
                internal AdcRegister(RegisterManager regManager) : base(regManager, 0x15, 1, false) { }

                public int RegChp { get; set; }
                public int AdcVcm { get; set; }
                public int RegChpFreq { get; set; }
                public AdcVcms GetAdcVcm() { return (AdcVcms)AdcVcm; }
                public void SetAdcVcm(AdcVcms enumVal) { AdcVcm = (int)enumVal; }
                public RegChpFreqs GetRegChpFreq() { return (RegChpFreqs)RegChpFreq; }
                public void SetRegChpFreq(RegChpFreqs enumVal) { RegChpFreq = (int)enumVal; }

                public async Task<AdcRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((RegChp & 0x3) << 0) | ((AdcVcm & 0x3) << 2) | ((RegChpFreq & 0x3) << 4); }
                internal override void SetValue(long value)
                {
                    RegChp = (int)((value >> 0) & 0x3);
                    AdcVcm = (int)((value >> 2) & 0x3);
                    RegChpFreq = (int)((value >> 4) & 0x3);
                }
            }
            internal class PgaRegister : Register
            {
                internal PgaRegister(RegisterManager regManager) : base(regManager, 0x1B, 1, false) { }

                public int DisableChopper { get; set; }
                public int PgaInv { get; set; }
                public int PgaBypass { get; set; }
                public int LdoMode { get; set; }
                public int RdOptSel { get; set; }

                public async Task<PgaRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((DisableChopper & 0x1) << 0) | ((PgaInv & 0x1) << 3) | ((PgaBypass & 0x1) << 4) | ((LdoMode & 0x1) << 5) | ((RdOptSel & 0x1) << 6); }
                internal override void SetValue(long value)
                {
                    DisableChopper = (int)((value >> 0) & 0x1);
                    PgaInv = (int)((value >> 3) & 0x1);
                    PgaBypass = (int)((value >> 4) & 0x1);
                    LdoMode = (int)((value >> 5) & 0x1);
                    RdOptSel = (int)((value >> 6) & 0x1);
                }
            }
            internal class PowerCtrlRegister : Register
            {
                internal PowerCtrlRegister(RegisterManager regManager) : base(regManager, 0x1C, 1, false) { }

                public int PgaCurr { get; set; }
                public int AdcCurr { get; set; }
                public int MasterBiasCurr { get; set; }
                public int PgaCapEn { get; set; }

                public async Task<PowerCtrlRegister> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return ((PgaCurr & 0x3) << 0) | ((AdcCurr & 0x3) << 2) | ((MasterBiasCurr & 0x7) << 4) | ((PgaCapEn & 0x1) << 7); }
                internal override void SetValue(long value)
                {
                    PgaCurr = (int)((value >> 0) & 0x3);
                    AdcCurr = (int)((value >> 2) & 0x3);
                    MasterBiasCurr = (int)((value >> 4) & 0x7);
                    PgaCapEn = (int)((value >> 7) & 0x1);
                }
            }
        }
    }
}