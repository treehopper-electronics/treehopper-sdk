/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Motors { 

    enum class FastAndStills
    {
        shortTime = 0,
        normalTime = 1
	};

    enum class ShortDelays
    {
	};


    class Tmc5160Registers : public RegisterManager
    {
    public:
        class GConfRegister : public Register
        {
        public:
			GConfRegister(RegisterManager& regManager) : Register(regManager,0x00, 4, false) { }
            int recalibrate;
            int fastAndStill;
            int enPwmMode;
            int multiStepFilt;
            int shaft;
            int daig0Error;
            int diag0Otpw;
            int diag0Stall;
            int diag1Stall;
            int diag1Dir;
            int diag1Index;
            int diag1OnState;
            int diag1StepsSkipped;
            int diag0IntPushpull;
            int diag1PoscompPushpull;
            int smallHysteresis;
            int stopEnable;
            int directMode;
            int testMode;
            FastAndStills getFastAndStill() { return (FastAndStills)fastAndStill; }
            void setFastAndStill(FastAndStills enumVal) { fastAndStill = (int)enumVal; }

            long getValue() { return ((recalibrate & 0x1) << 0) | ((fastAndStill & 0x1) << 1) | ((enPwmMode & 0x1) << 2) | ((multiStepFilt & 0x1) << 3) | ((shaft & 0x1) << 4) | ((daig0Error & 0x1) << 5) | ((diag0Otpw & 0x1) << 6) | ((diag0Stall & 0x1) << 7) | ((diag1Stall & 0x1) << 8) | ((diag1Dir & 0x1) << 9) | ((diag1Index & 0x1) << 10) | ((diag1OnState & 0x1) << 11) | ((diag1StepsSkipped & 0x1) << 12) | ((diag0IntPushpull & 0x1) << 13) | ((diag1PoscompPushpull & 0x1) << 14) | ((smallHysteresis & 0x1) << 15) | ((stopEnable & 0x1) << 16) | ((directMode & 0x1) << 17) | ((testMode & 0x1) << 18); }
            void setValue(long val)
            {
                recalibrate = (int)((val >> 0) & 0x1);
                fastAndStill = (int)((val >> 1) & 0x1);
                enPwmMode = (int)((val >> 2) & 0x1);
                multiStepFilt = (int)((val >> 3) & 0x1);
                shaft = (int)((val >> 4) & 0x1);
                daig0Error = (int)((val >> 5) & 0x1);
                diag0Otpw = (int)((val >> 6) & 0x1);
                diag0Stall = (int)((val >> 7) & 0x1);
                diag1Stall = (int)((val >> 8) & 0x1);
                diag1Dir = (int)((val >> 9) & 0x1);
                diag1Index = (int)((val >> 10) & 0x1);
                diag1OnState = (int)((val >> 11) & 0x1);
                diag1StepsSkipped = (int)((val >> 12) & 0x1);
                diag0IntPushpull = (int)((val >> 13) & 0x1);
                diag1PoscompPushpull = (int)((val >> 14) & 0x1);
                smallHysteresis = (int)((val >> 15) & 0x1);
                stopEnable = (int)((val >> 16) & 0x1);
                directMode = (int)((val >> 17) & 0x1);
                testMode = (int)((val >> 18) & 0x1);
            }
        };

        class GstatRegister : public Register
        {
        public:
			GstatRegister(RegisterManager& regManager) : Register(regManager,0x01, 4, false) { }
            int reset;
            int drvErr;
            int uvCp;

            long getValue() { return ((reset & 0x1) << 0) | ((drvErr & 0x1) << 1) | ((uvCp & 0x1) << 2); }
            void setValue(long val)
            {
                reset = (int)((val >> 0) & 0x1);
                drvErr = (int)((val >> 1) & 0x1);
                uvCp = (int)((val >> 2) & 0x1);
            }
        };

        class IfCntRegister : public Register
        {
        public:
			IfCntRegister(RegisterManager& regManager) : Register(regManager,0x02, 4, false) { }
            int count;

            long getValue() { return ((count & 0xFF) << 0); }
            void setValue(long val)
            {
                count = (int)((val >> 0) & 0xFF);
            }
        };

        class NodeConfRegister : public Register
        {
        public:
			NodeConfRegister(RegisterManager& regManager) : Register(regManager,0x03, 4, false) { }
            int nodeAddr;
            int sendDelay;

            long getValue() { return ((nodeAddr & 0xFF) << 0) | ((sendDelay & 0xF) << 8); }
            void setValue(long val)
            {
                nodeAddr = (int)((val >> 0) & 0xFF);
                sendDelay = (int)((val >> 8) & 0xF);
            }
        };

        class IoInRegister : public Register
        {
        public:
			IoInRegister(RegisterManager& regManager) : Register(regManager,0x04, 4, false) { }
            int reflStep;
            int refrDir;
            int encbDcenCfg4;
            int drvEnn;
            int encNDcoCfg6;
            int sdMode;
            int swCompIn;
            int version;

            long getValue() { return ((reflStep & 0x1) << 0) | ((refrDir & 0x1) << 1) | ((encbDcenCfg4 & 0x1) << 2) | ((drvEnn & 0x1) << 3) | ((encNDcoCfg6 & 0x1) << 4) | ((sdMode & 0x1) << 5) | ((swCompIn & 0x1) << 6) | ((version & 0xFF) << 16); }
            void setValue(long val)
            {
                reflStep = (int)((val >> 0) & 0x1);
                refrDir = (int)((val >> 1) & 0x1);
                encbDcenCfg4 = (int)((val >> 2) & 0x1);
                drvEnn = (int)((val >> 3) & 0x1);
                encNDcoCfg6 = (int)((val >> 4) & 0x1);
                sdMode = (int)((val >> 5) & 0x1);
                swCompIn = (int)((val >> 6) & 0x1);
                version = (int)((val >> 16) & 0xFF);
            }
        };

        class OutputRegister : public Register
        {
        public:
			OutputRegister(RegisterManager& regManager) : Register(regManager,0x04, 4, false) { }
            int value;

            long getValue() { return ((value & 0x0) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x0);
            }
        };

        class XCompareRegister : public Register
        {
        public:
			XCompareRegister(RegisterManager& regManager) : Register(regManager,0x05, 4, false) { }
            int value;

            long getValue() { return ((value & 0x0) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0x0);
            }
        };

        class OtpProgRegister : public Register
        {
        public:
			OtpProgRegister(RegisterManager& regManager) : Register(regManager,0x06, 4, false) { }
            int otpbit;
            int otpbyte;
            int otpmagic;

            long getValue() { return ((otpbit & 0x7) << 0) | ((otpbyte & 0x3) << 3) | ((otpmagic & 0xFF) << 3); }
            void setValue(long val)
            {
                otpbit = (int)((val >> 0) & 0x7);
                otpbyte = (int)((val >> 3) & 0x3);
                otpmagic = (int)((val >> 3) & 0xFF);
            }
        };

        class OtpReadRegister : public Register
        {
        public:
			OtpReadRegister(RegisterManager& regManager) : Register(regManager,0x07, 4, false) { }
            int otpbit;

            long getValue() { return ((otpbit & 0xFF) << 0); }
            void setValue(long val)
            {
                otpbit = (int)((val >> 0) & 0xFF);
            }
        };

        class FactoryConfRegister : public Register
        {
        public:
			FactoryConfRegister(RegisterManager& regManager) : Register(regManager,0x08, 4, false) { }
            int fclktrim;

            long getValue() { return ((fclktrim & 0x1F) << 0); }
            void setValue(long val)
            {
                fclktrim = (int)((val >> 0) & 0x1F);
            }
        };

        class ShortConfRegister : public Register
        {
        public:
			ShortConfRegister(RegisterManager& regManager) : Register(regManager,0x09, 4, false) { }
            int s2vsLevel;
            int s2gLevel;
            int shortFilter;
            int shortDelay;
            ShortDelays getShortDelay() { return (ShortDelays)shortDelay; }
            void setShortDelay(ShortDelays enumVal) { shortDelay = (int)enumVal; }

            long getValue() { return ((s2vsLevel & 0xF) << 0) | ((s2gLevel & 0xF) << 5) | ((shortFilter & 0x3) << 5) | ((shortDelay & 0x1) << 7); }
            void setValue(long val)
            {
                s2vsLevel = (int)((val >> 0) & 0xF);
                s2gLevel = (int)((val >> 5) & 0xF);
                shortFilter = (int)((val >> 5) & 0x3);
                shortDelay = (int)((val >> 7) & 0x1);
            }
        };

        class DrvConfRegister : public Register
        {
        public:
			DrvConfRegister(RegisterManager& regManager) : Register(regManager,0x0a, 4, false) { }
            int bbmTime;
            int bbmClks;
            int otSelect;
            int drvStrength;
            int filtISense;

            long getValue() { return ((bbmTime & 0x1F) << 0) | ((bbmClks & 0xF) << 4) | ((otSelect & 0x3) << 8) | ((drvStrength & 0x3) << 2) | ((filtISense & 0x3) << 2); }
            void setValue(long val)
            {
                bbmTime = (int)((val >> 0) & 0x1F);
                bbmClks = (int)((val >> 4) & 0xF);
                otSelect = (int)((val >> 8) & 0x3);
                drvStrength = (int)((val >> 2) & 0x3);
                filtISense = (int)((val >> 2) & 0x3);
            }
        };

        class GlobalScalerRegister : public Register
        {
        public:
			GlobalScalerRegister(RegisterManager& regManager) : Register(regManager,0x0b, 4, false) { }
            int globalScaler;

            long getValue() { return ((globalScaler & 0xFF) << 0); }
            void setValue(long val)
            {
                globalScaler = (int)((val >> 0) & 0xFF);
            }
        };

        class OffsetReadRegister : public Register
        {
        public:
			OffsetReadRegister(RegisterManager& regManager) : Register(regManager,0x0c, 4, false) { }
            int offsetCalibrationResultPhaseB;
            int offsetCalibrationResultPhaseA;

            long getValue() { return ((offsetCalibrationResultPhaseB & 0xFF) << 0) | ((offsetCalibrationResultPhaseA & 0xFF) << 0); }
            void setValue(long val)
            {
                offsetCalibrationResultPhaseB = (int)((val >> 0) & 0xFF);
                offsetCalibrationResultPhaseA = (int)((val >> 0) & 0xFF);
            }
        };

        class IHoldIRunRegister : public Register
        {
        public:
			IHoldIRunRegister(RegisterManager& regManager) : Register(regManager,0x10, 4, false) { }
            int iHold;
            int iRun;
            int iHoldDelay;

            long getValue() { return ((iHold & 0x1F) << 0) | ((iRun & 0xFF) << 4) | ((iHoldDelay & 0xFF) << 12); }
            void setValue(long val)
            {
                iHold = (int)((val >> 0) & 0x1F);
                iRun = (int)((val >> 4) & 0xFF);
                iHoldDelay = (int)((val >> 12) & 0xFF);
            }
        };

            GConfRegister gConf;
            GstatRegister gstat;
            IfCntRegister ifCnt;
            NodeConfRegister nodeConf;
            IoInRegister ioIn;
            OutputRegister output;
            XCompareRegister xCompare;
            OtpProgRegister otpProg;
            OtpReadRegister otpRead;
            FactoryConfRegister factoryConf;
            ShortConfRegister shortConf;
            DrvConfRegister drvConf;
            GlobalScalerRegister globalScaler;
            OffsetReadRegister offsetRead;
            IHoldIRunRegister iHoldIRun;

		Tmc5160Registers(SMBusDevice& device) : RegisterManager(device, true), gConf(*this), gstat(*this), ifCnt(*this), nodeConf(*this), ioIn(*this), output(*this), xCompare(*this), otpProg(*this), otpRead(*this), factoryConf(*this), shortConf(*this), drvConf(*this), globalScaler(*this), offsetRead(*this), iHoldIRun(*this)
		{ 
			registers.push_back(&gConf);
			registers.push_back(&gstat);
			registers.push_back(&ifCnt);
			registers.push_back(&nodeConf);
			registers.push_back(&ioIn);
			registers.push_back(&output);
			registers.push_back(&xCompare);
			registers.push_back(&otpProg);
			registers.push_back(&otpRead);
			registers.push_back(&factoryConf);
			registers.push_back(&shortConf);
			registers.push_back(&drvConf);
			registers.push_back(&globalScaler);
			registers.push_back(&offsetRead);
			registers.push_back(&iHoldIRun);
		}
    };
 }  } }