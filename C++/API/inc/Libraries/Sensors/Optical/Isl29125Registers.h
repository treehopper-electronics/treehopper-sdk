/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
#pragma once
#include "SMBusDevice.h"
#include "Libraries/Treehopper.Libraries.h"
#include "Libraries/RegisterManager.h"
#include "Libraries/Register.h"

using namespace Treehopper::Libraries;

namespace Treehopper { namespace Libraries { namespace Sensors { namespace Optical { 

    enum class Modes
    {
        PowerDown = 0,
        Green = 1,
        Red = 2,
        Blue = 3,
        Standby = 4,
        GreenRedBlue = 5,
        GreenRed = 6,
        GreenBlue = 7
	};

    enum class Ranges
    {
        Lux_375 = 0,
        Lux_10000 = 1
	};

    enum class SampleDepths
    {
        Bits_16 = 0,
        Bits_12 = 1
	};

    enum class InterruptSelections
    {
        NoInterrupt = 0,
        Green = 1,
        Red = 2,
        Blue = 3
	};

    enum class Prsts
    {
        Cycles_1 = 0,
        Cycles_2 = 1,
        Cycles_4 = 2,
        Cycles_8 = 3
	};


    class Isl29125Registers : public RegisterManager
    {
    public:
        class DeviceIdRegister : public Register
        {
        public:
			DeviceIdRegister(RegisterManager& regManager) : Register(regManager,0x00, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class DeviceResetRegister : public Register
        {
        public:
			DeviceResetRegister(RegisterManager& regManager) : Register(regManager,0x00, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class Config1Register : public Register
        {
        public:
			Config1Register(RegisterManager& regManager) : Register(regManager,0x01, 1, false) { }
            int mode;
            int range;
            int sampleDepth;
            int sync;
            Modes getMode() { return (Modes)mode; }
            void setMode(Modes enumVal) { mode = (int)enumVal; }
            Ranges getRange() { return (Ranges)range; }
            void setRange(Ranges enumVal) { range = (int)enumVal; }
            SampleDepths getSampleDepth() { return (SampleDepths)sampleDepth; }
            void setSampleDepth(SampleDepths enumVal) { sampleDepth = (int)enumVal; }

            long getValue() { return ((mode & 0x7) << 0) | ((range & 0x1) << 3) | ((sampleDepth & 0x1) << 4) | ((sync & 0x1) << 5); }
            void setValue(long val)
            {
                mode = (int)((val >> 0) & 0x7);
                range = (int)((val >> 3) & 0x1);
                sampleDepth = (int)((val >> 4) & 0x1);
                sync = (int)((val >> 5) & 0x1);
            }
        };

        class Config2Register : public Register
        {
        public:
			Config2Register(RegisterManager& regManager) : Register(regManager,0x02, 1, false) { }
            int alscc;
            int irCom;

            long getValue() { return ((alscc & 0x3F) << 0) | ((irCom & 0x1) << 7); }
            void setValue(long val)
            {
                alscc = (int)((val >> 0) & 0x3F);
                irCom = (int)((val >> 7) & 0x1);
            }
        };

        class Config3Register : public Register
        {
        public:
			Config3Register(RegisterManager& regManager) : Register(regManager,0x03, 1, false) { }
            int interruptSelection;
            int prst;
            int conven;
            InterruptSelections getInterruptSelection() { return (InterruptSelections)interruptSelection; }
            void setInterruptSelection(InterruptSelections enumVal) { interruptSelection = (int)enumVal; }
            Prsts getPrst() { return (Prsts)prst; }
            void setPrst(Prsts enumVal) { prst = (int)enumVal; }

            long getValue() { return ((interruptSelection & 0x3) << 0) | ((prst & 0x3) << 2) | ((conven & 0x1) << 4); }
            void setValue(long val)
            {
                interruptSelection = (int)((val >> 0) & 0x3);
                prst = (int)((val >> 2) & 0x3);
                conven = (int)((val >> 4) & 0x1);
            }
        };

        class LowThresholdRegister : public Register
        {
        public:
			LowThresholdRegister(RegisterManager& regManager) : Register(regManager,0x04, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class HighThresholdRegister : public Register
        {
        public:
			HighThresholdRegister(RegisterManager& regManager) : Register(regManager,0x06, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class StatusRegister : public Register
        {
        public:
			StatusRegister(RegisterManager& regManager) : Register(regManager,0x08, 1, false) { }
            int value;

            long getValue() { return ((value & 0xFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFF);
            }
        };

        class GreenDataRegister : public Register
        {
        public:
			GreenDataRegister(RegisterManager& regManager) : Register(regManager,0x09, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class RedDataRegister : public Register
        {
        public:
			RedDataRegister(RegisterManager& regManager) : Register(regManager,0x0B, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

        class BlueDataRegister : public Register
        {
        public:
			BlueDataRegister(RegisterManager& regManager) : Register(regManager,0x0D, 2, false) { }
            int value;

            long getValue() { return ((value & 0xFFFF) << 0); }
            void setValue(long val)
            {
                value = (int)((val >> 0) & 0xFFFF);
            }
        };

            DeviceIdRegister deviceId;
            DeviceResetRegister deviceReset;
            Config1Register config1;
            Config2Register config2;
            Config3Register config3;
            LowThresholdRegister lowThreshold;
            HighThresholdRegister highThreshold;
            StatusRegister status;
            GreenDataRegister greenData;
            RedDataRegister redData;
            BlueDataRegister blueData;

		Isl29125Registers(SMBusDevice& device) : RegisterManager(device, true), deviceId(*this), deviceReset(*this), config1(*this), config2(*this), config3(*this), lowThreshold(*this), highThreshold(*this), status(*this), greenData(*this), redData(*this), blueData(*this)
		{ 
			registers.push_back(&deviceId);
			registers.push_back(&deviceReset);
			registers.push_back(&config1);
			registers.push_back(&config2);
			registers.push_back(&config3);
			registers.push_back(&lowThreshold);
			registers.push_back(&highThreshold);
			registers.push_back(&status);
			registers.push_back(&greenData);
			registers.push_back(&redData);
			registers.push_back(&blueData);
		}
    };
 }  }  } }