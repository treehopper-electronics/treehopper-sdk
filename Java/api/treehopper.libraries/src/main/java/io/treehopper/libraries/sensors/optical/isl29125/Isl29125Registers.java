/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.optical.isl29125;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Isl29125Registers extends RegisterManager
{
    Isl29125Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        deviceId = new DeviceIdRegister(this);
        _registers.add(deviceId);
        deviceReset = new DeviceResetRegister(this);
        _registers.add(deviceReset);
        config1 = new Config1Register(this);
        _registers.add(config1);
        config2 = new Config2Register(this);
        _registers.add(config2);
        config3 = new Config3Register(this);
        _registers.add(config3);
        lowThreshold = new LowThresholdRegister(this);
        _registers.add(lowThreshold);
        highThreshold = new HighThresholdRegister(this);
        _registers.add(highThreshold);
        status = new StatusRegister(this);
        _registers.add(status);
        greenData = new GreenDataRegister(this);
        _registers.add(greenData);
        redData = new RedDataRegister(this);
        _registers.add(redData);
        blueData = new BlueDataRegister(this);
        _registers.add(blueData);
    }

    DeviceIdRegister deviceId;
    DeviceResetRegister deviceReset;
    Config1Register config1;
    Config2Register config2;
    Config3Register config3;
    LowThresholdRegister lowThreshold;
    HighThresholdRegister highThreshold;
    StatusRegister status;
    GreenDataRegister greenData;
    RedDataRegister redData;
    BlueDataRegister blueData;

    class DeviceIdRegister extends Register
    {
        DeviceIdRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int value;


        public DeviceIdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class DeviceResetRegister extends Register
    {
        DeviceResetRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int value;


        public DeviceResetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Config1Register extends Register
    {
        Config1Register(RegisterManager regManager) { super(regManager, 0x01, 1, false); }

        int mode;
        int range;
        int sampleDepth;
        int sync;

                public Modes getMode() { for (Modes b : Modes.values()) { if(b.getVal() == mode) return b; } return Modes.values()[0]; }
                public void setMode(Modes enumVal) { mode = enumVal.getVal(); }
                public Ranges getRange() { for (Ranges b : Ranges.values()) { if(b.getVal() == range) return b; } return Ranges.values()[0]; }
                public void setRange(Ranges enumVal) { range = enumVal.getVal(); }
                public SampleDepths getSampleDepth() { for (SampleDepths b : SampleDepths.values()) { if(b.getVal() == sampleDepth) return b; } return SampleDepths.values()[0]; }
                public void setSampleDepth(SampleDepths enumVal) { sampleDepth = enumVal.getVal(); }

        public Config1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((mode & 0x7) << 0) | ((range & 0x1) << 3) | ((sampleDepth & 0x1) << 4) | ((sync & 0x1) << 5); }
        public void setValue(long _value)
        {
            mode = (int)((_value >> 0) & 0x7);
            range = (int)((_value >> 3) & 0x1);
            sampleDepth = (int)((_value >> 4) & 0x1);
            sync = (int)((_value >> 5) & 0x1);
        }
    }
    class Config2Register extends Register
    {
        Config2Register(RegisterManager regManager) { super(regManager, 0x02, 1, false); }

        int alscc;
        int irCom;


        public Config2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((alscc & 0x3F) << 0) | ((irCom & 0x1) << 7); }
        public void setValue(long _value)
        {
            alscc = (int)((_value >> 0) & 0x3F);
            irCom = (int)((_value >> 7) & 0x1);
        }
    }
    class Config3Register extends Register
    {
        Config3Register(RegisterManager regManager) { super(regManager, 0x03, 1, false); }

        int interruptSelection;
        int prst;
        int conven;

                public InterruptSelections getInterruptSelection() { for (InterruptSelections b : InterruptSelections.values()) { if(b.getVal() == interruptSelection) return b; } return InterruptSelections.values()[0]; }
                public void setInterruptSelection(InterruptSelections enumVal) { interruptSelection = enumVal.getVal(); }
                public Prsts getPrst() { for (Prsts b : Prsts.values()) { if(b.getVal() == prst) return b; } return Prsts.values()[0]; }
                public void setPrst(Prsts enumVal) { prst = enumVal.getVal(); }

        public Config3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((interruptSelection & 0x3) << 0) | ((prst & 0x3) << 2) | ((conven & 0x1) << 4); }
        public void setValue(long _value)
        {
            interruptSelection = (int)((_value >> 0) & 0x3);
            prst = (int)((_value >> 2) & 0x3);
            conven = (int)((_value >> 4) & 0x1);
        }
    }
    class LowThresholdRegister extends Register
    {
        LowThresholdRegister(RegisterManager regManager) { super(regManager, 0x04, 2, false); }

        int value;


        public LowThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class HighThresholdRegister extends Register
    {
        HighThresholdRegister(RegisterManager regManager) { super(regManager, 0x06, 2, false); }

        int value;


        public HighThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0x08, 1, false); }

        int value;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class GreenDataRegister extends Register
    {
        GreenDataRegister(RegisterManager regManager) { super(regManager, 0x09, 2, false); }

        int value;


        public GreenDataRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class RedDataRegister extends Register
    {
        RedDataRegister(RegisterManager regManager) { super(regManager, 0x0B, 2, false); }

        int value;


        public RedDataRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class BlueDataRegister extends Register
    {
        BlueDataRegister(RegisterManager regManager) { super(regManager, 0x0D, 2, false); }

        int value;


        public BlueDataRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
}
