/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.motors.tmc5160;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Tmc5160Registers extends RegisterManager
{
    Tmc5160Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        gConf = new GConfRegister(this);
        _registers.add(gConf);
        gstat = new GstatRegister(this);
        _registers.add(gstat);
        ifCnt = new IfCntRegister(this);
        _registers.add(ifCnt);
        nodeConf = new NodeConfRegister(this);
        _registers.add(nodeConf);
        ioIn = new IoInRegister(this);
        _registers.add(ioIn);
        output = new OutputRegister(this);
        _registers.add(output);
        xCompare = new XCompareRegister(this);
        _registers.add(xCompare);
        otpProg = new OtpProgRegister(this);
        _registers.add(otpProg);
        otpRead = new OtpReadRegister(this);
        _registers.add(otpRead);
        factoryConf = new FactoryConfRegister(this);
        _registers.add(factoryConf);
        shortConf = new ShortConfRegister(this);
        _registers.add(shortConf);
        drvConf = new DrvConfRegister(this);
        _registers.add(drvConf);
        globalScaler = new GlobalScalerRegister(this);
        _registers.add(globalScaler);
        offsetRead = new OffsetReadRegister(this);
        _registers.add(offsetRead);
        iHoldIRun = new IHoldIRunRegister(this);
        _registers.add(iHoldIRun);
    }

    GConfRegister gConf;
    GstatRegister gstat;
    IfCntRegister ifCnt;
    NodeConfRegister nodeConf;
    IoInRegister ioIn;
    OutputRegister output;
    XCompareRegister xCompare;
    OtpProgRegister otpProg;
    OtpReadRegister otpRead;
    FactoryConfRegister factoryConf;
    ShortConfRegister shortConf;
    DrvConfRegister drvConf;
    GlobalScalerRegister globalScaler;
    OffsetReadRegister offsetRead;
    IHoldIRunRegister iHoldIRun;

    class GConfRegister extends Register
    {
        GConfRegister(RegisterManager regManager) { super(regManager, 0x00, 4, false); }

        int recalibrate;
        int fastAndStill;
        int enPwmMode;
        int multiStepFilt;
        int shaft;
        int daig0Error;
        int diag0Otpw;
        int diag0Stall;
        int diag1Stall;
        int diag1Dir;
        int diag1Index;
        int diag1OnState;
        int diag1StepsSkipped;
        int diag0IntPushpull;
        int diag1PoscompPushpull;
        int smallHysteresis;
        int stopEnable;
        int directMode;
        int testMode;

                public FastAndStills getFastAndStill() { for (FastAndStills b : FastAndStills.values()) { if(b.getVal() == fastAndStill) return b; } return FastAndStills.values()[0]; }
                public void setFastAndStill(FastAndStills enumVal) { fastAndStill = enumVal.getVal(); }

        public GConfRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((recalibrate & 0x1) << 0) | ((fastAndStill & 0x1) << 1) | ((enPwmMode & 0x1) << 2) | ((multiStepFilt & 0x1) << 3) | ((shaft & 0x1) << 4) | ((daig0Error & 0x1) << 5) | ((diag0Otpw & 0x1) << 6) | ((diag0Stall & 0x1) << 7) | ((diag1Stall & 0x1) << 8) | ((diag1Dir & 0x1) << 9) | ((diag1Index & 0x1) << 10) | ((diag1OnState & 0x1) << 11) | ((diag1StepsSkipped & 0x1) << 12) | ((diag0IntPushpull & 0x1) << 13) | ((diag1PoscompPushpull & 0x1) << 14) | ((smallHysteresis & 0x1) << 15) | ((stopEnable & 0x1) << 16) | ((directMode & 0x1) << 17) | ((testMode & 0x1) << 18); }
        public void setValue(long _value)
        {
            recalibrate = (int)((_value >> 0) & 0x1);
            fastAndStill = (int)((_value >> 1) & 0x1);
            enPwmMode = (int)((_value >> 2) & 0x1);
            multiStepFilt = (int)((_value >> 3) & 0x1);
            shaft = (int)((_value >> 4) & 0x1);
            daig0Error = (int)((_value >> 5) & 0x1);
            diag0Otpw = (int)((_value >> 6) & 0x1);
            diag0Stall = (int)((_value >> 7) & 0x1);
            diag1Stall = (int)((_value >> 8) & 0x1);
            diag1Dir = (int)((_value >> 9) & 0x1);
            diag1Index = (int)((_value >> 10) & 0x1);
            diag1OnState = (int)((_value >> 11) & 0x1);
            diag1StepsSkipped = (int)((_value >> 12) & 0x1);
            diag0IntPushpull = (int)((_value >> 13) & 0x1);
            diag1PoscompPushpull = (int)((_value >> 14) & 0x1);
            smallHysteresis = (int)((_value >> 15) & 0x1);
            stopEnable = (int)((_value >> 16) & 0x1);
            directMode = (int)((_value >> 17) & 0x1);
            testMode = (int)((_value >> 18) & 0x1);
        }
    }
    class GstatRegister extends Register
    {
        GstatRegister(RegisterManager regManager) { super(regManager, 0x01, 4, false); }

        int reset;
        int drvErr;
        int uvCp;


        public GstatRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((reset & 0x1) << 0) | ((drvErr & 0x1) << 1) | ((uvCp & 0x1) << 2); }
        public void setValue(long _value)
        {
            reset = (int)((_value >> 0) & 0x1);
            drvErr = (int)((_value >> 1) & 0x1);
            uvCp = (int)((_value >> 2) & 0x1);
        }
    }
    class IfCntRegister extends Register
    {
        IfCntRegister(RegisterManager regManager) { super(regManager, 0x02, 4, false); }

        int count;


        public IfCntRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((count & 0xFF) << 0); }
        public void setValue(long _value)
        {
            count = (int)((_value >> 0) & 0xFF);
        }
    }
    class NodeConfRegister extends Register
    {
        NodeConfRegister(RegisterManager regManager) { super(regManager, 0x03, 4, false); }

        int nodeAddr;
        int sendDelay;


        public NodeConfRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((nodeAddr & 0xFF) << 0) | ((sendDelay & 0xF) << 8); }
        public void setValue(long _value)
        {
            nodeAddr = (int)((_value >> 0) & 0xFF);
            sendDelay = (int)((_value >> 8) & 0xF);
        }
    }
    class IoInRegister extends Register
    {
        IoInRegister(RegisterManager regManager) { super(regManager, 0x04, 4, false); }

        int reflStep;
        int refrDir;
        int encbDcenCfg4;
        int drvEnn;
        int encNDcoCfg6;
        int sdMode;
        int swCompIn;
        int version;


        public IoInRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((reflStep & 0x1) << 0) | ((refrDir & 0x1) << 1) | ((encbDcenCfg4 & 0x1) << 2) | ((drvEnn & 0x1) << 3) | ((encNDcoCfg6 & 0x1) << 4) | ((sdMode & 0x1) << 5) | ((swCompIn & 0x1) << 6) | ((version & 0xFF) << 16); }
        public void setValue(long _value)
        {
            reflStep = (int)((_value >> 0) & 0x1);
            refrDir = (int)((_value >> 1) & 0x1);
            encbDcenCfg4 = (int)((_value >> 2) & 0x1);
            drvEnn = (int)((_value >> 3) & 0x1);
            encNDcoCfg6 = (int)((_value >> 4) & 0x1);
            sdMode = (int)((_value >> 5) & 0x1);
            swCompIn = (int)((_value >> 6) & 0x1);
            version = (int)((_value >> 16) & 0xFF);
        }
    }
    class OutputRegister extends Register
    {
        OutputRegister(RegisterManager regManager) { super(regManager, 0x04, 4, false); }

        int value;


        public OutputRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x0) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x0);
        }
    }
    class XCompareRegister extends Register
    {
        XCompareRegister(RegisterManager regManager) { super(regManager, 0x05, 4, false); }

        int value;


        public XCompareRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x0) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x0);
        }
    }
    class OtpProgRegister extends Register
    {
        OtpProgRegister(RegisterManager regManager) { super(regManager, 0x06, 4, false); }

        int otpbit;
        int otpbyte;
        int otpmagic;


        public OtpProgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((otpbit & 0x7) << 0) | ((otpbyte & 0x3) << 3) | ((otpmagic & 0xFF) << 3); }
        public void setValue(long _value)
        {
            otpbit = (int)((_value >> 0) & 0x7);
            otpbyte = (int)((_value >> 3) & 0x3);
            otpmagic = (int)((_value >> 3) & 0xFF);
        }
    }
    class OtpReadRegister extends Register
    {
        OtpReadRegister(RegisterManager regManager) { super(regManager, 0x07, 4, false); }

        int otpbit;


        public OtpReadRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((otpbit & 0xFF) << 0); }
        public void setValue(long _value)
        {
            otpbit = (int)((_value >> 0) & 0xFF);
        }
    }
    class FactoryConfRegister extends Register
    {
        FactoryConfRegister(RegisterManager regManager) { super(regManager, 0x08, 4, false); }

        int fclktrim;


        public FactoryConfRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fclktrim & 0x1F) << 0); }
        public void setValue(long _value)
        {
            fclktrim = (int)((_value >> 0) & 0x1F);
        }
    }
    class ShortConfRegister extends Register
    {
        ShortConfRegister(RegisterManager regManager) { super(regManager, 0x09, 4, false); }

        int s2vsLevel;
        int s2gLevel;
        int shortFilter;
        int shortDelay;

                public ShortDelays getShortDelay() { for (ShortDelays b : ShortDelays.values()) { if(b.getVal() == shortDelay) return b; } return ShortDelays.values()[0]; }
                public void setShortDelay(ShortDelays enumVal) { shortDelay = enumVal.getVal(); }

        public ShortConfRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((s2vsLevel & 0xF) << 0) | ((s2gLevel & 0xF) << 5) | ((shortFilter & 0x3) << 5) | ((shortDelay & 0x1) << 7); }
        public void setValue(long _value)
        {
            s2vsLevel = (int)((_value >> 0) & 0xF);
            s2gLevel = (int)((_value >> 5) & 0xF);
            shortFilter = (int)((_value >> 5) & 0x3);
            shortDelay = (int)((_value >> 7) & 0x1);
        }
    }
    class DrvConfRegister extends Register
    {
        DrvConfRegister(RegisterManager regManager) { super(regManager, 0x0a, 4, false); }

        int bbmTime;
        int bbmClks;
        int otSelect;
        int drvStrength;
        int filtISense;


        public DrvConfRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((bbmTime & 0x1F) << 0) | ((bbmClks & 0xF) << 4) | ((otSelect & 0x3) << 8) | ((drvStrength & 0x3) << 2) | ((filtISense & 0x3) << 2); }
        public void setValue(long _value)
        {
            bbmTime = (int)((_value >> 0) & 0x1F);
            bbmClks = (int)((_value >> 4) & 0xF);
            otSelect = (int)((_value >> 8) & 0x3);
            drvStrength = (int)((_value >> 2) & 0x3);
            filtISense = (int)((_value >> 2) & 0x3);
        }
    }
    class GlobalScalerRegister extends Register
    {
        GlobalScalerRegister(RegisterManager regManager) { super(regManager, 0x0b, 4, false); }

        int globalScaler;


        public GlobalScalerRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((globalScaler & 0xFF) << 0); }
        public void setValue(long _value)
        {
            globalScaler = (int)((_value >> 0) & 0xFF);
        }
    }
    class OffsetReadRegister extends Register
    {
        OffsetReadRegister(RegisterManager regManager) { super(regManager, 0x0c, 4, false); }

        int offsetCalibrationResultPhaseB;
        int offsetCalibrationResultPhaseA;


        public OffsetReadRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((offsetCalibrationResultPhaseB & 0xFF) << 0) | ((offsetCalibrationResultPhaseA & 0xFF) << 0); }
        public void setValue(long _value)
        {
            offsetCalibrationResultPhaseB = (int)((_value >> 0) & 0xFF);
            offsetCalibrationResultPhaseA = (int)((_value >> 0) & 0xFF);
        }
    }
    class IHoldIRunRegister extends Register
    {
        IHoldIRunRegister(RegisterManager regManager) { super(regManager, 0x10, 4, false); }

        int iHold;
        int iRun;
        int iHoldDelay;


        public IHoldIRunRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((iHold & 0x1F) << 0) | ((iRun & 0xFF) << 4) | ((iHoldDelay & 0xFF) << 12); }
        public void setValue(long _value)
        {
            iHold = (int)((_value >> 0) & 0x1F);
            iRun = (int)((_value >> 4) & 0xFF);
            iHoldDelay = (int)((_value >> 12) & 0xFF);
        }
    }
}
