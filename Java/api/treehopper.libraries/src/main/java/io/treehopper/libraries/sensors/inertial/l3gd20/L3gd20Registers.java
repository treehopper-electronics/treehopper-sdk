/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.inertial.l3gd20;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class L3gd20Registers extends RegisterManager
{
    L3gd20Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        whoAmI = new WhoAmIRegister(this);
        _registers.add(whoAmI);
        ctrlReg1 = new CtrlReg1Register(this);
        _registers.add(ctrlReg1);
        ctrlReg2 = new CtrlReg2Register(this);
        _registers.add(ctrlReg2);
        ctrlReg3 = new CtrlReg3Register(this);
        _registers.add(ctrlReg3);
        ctrlReg4 = new CtrlReg4Register(this);
        _registers.add(ctrlReg4);
        ctrlReg5 = new CtrlReg5Register(this);
        _registers.add(ctrlReg5);
        referenceDataCapture = new ReferenceDataCaptureRegister(this);
        _registers.add(referenceDataCapture);
        outTemp = new OutTempRegister(this);
        _registers.add(outTemp);
        status = new StatusRegister(this);
        _registers.add(status);
        fifoCtrl = new FifoCtrlRegister(this);
        _registers.add(fifoCtrl);
        fifoSrc = new FifoSrcRegister(this);
        _registers.add(fifoSrc);
        intConfig = new IntConfigRegister(this);
        _registers.add(intConfig);
        int1Src = new Int1SrcRegister(this);
        _registers.add(int1Src);
        int1ThresholdX = new Int1ThresholdXRegister(this);
        _registers.add(int1ThresholdX);
        int1ThresholdY = new Int1ThresholdYRegister(this);
        _registers.add(int1ThresholdY);
        int1ThresholdZ = new Int1ThresholdZRegister(this);
        _registers.add(int1ThresholdZ);
        int1Duration = new Int1DurationRegister(this);
        _registers.add(int1Duration);
        outX = new OutXRegister(this);
        _registers.add(outX);
        outY = new OutYRegister(this);
        _registers.add(outY);
        outZ = new OutZRegister(this);
        _registers.add(outZ);
    }

    WhoAmIRegister whoAmI;
    CtrlReg1Register ctrlReg1;
    CtrlReg2Register ctrlReg2;
    CtrlReg3Register ctrlReg3;
    CtrlReg4Register ctrlReg4;
    CtrlReg5Register ctrlReg5;
    ReferenceDataCaptureRegister referenceDataCapture;
    OutTempRegister outTemp;
    StatusRegister status;
    FifoCtrlRegister fifoCtrl;
    FifoSrcRegister fifoSrc;
    IntConfigRegister intConfig;
    Int1SrcRegister int1Src;
    Int1ThresholdXRegister int1ThresholdX;
    Int1ThresholdYRegister int1ThresholdY;
    Int1ThresholdZRegister int1ThresholdZ;
    Int1DurationRegister int1Duration;
    OutXRegister outX;
    OutYRegister outY;
    OutZRegister outZ;

    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class CtrlReg1Register extends Register
    {
        CtrlReg1Register(RegisterManager regManager) { super(regManager, 0x20, 1, false); }

        int yEn;
        int xEn;
        int zEn;
        int pd;
        int bandwidth;
        int dataRate;

                public DataRates getDataRate() { for (DataRates b : DataRates.values()) { if(b.getVal() == dataRate) return b; } return DataRates.values()[0]; }
                public void setDataRate(DataRates enumVal) { dataRate = enumVal.getVal(); }

        public CtrlReg1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((yEn & 0x1) << 0) | ((xEn & 0x1) << 1) | ((zEn & 0x1) << 2) | ((pd & 0x1) << 3) | ((bandwidth & 0x3) << 4) | ((dataRate & 0x3) << 6); }
        public void setValue(long _value)
        {
            yEn = (int)((_value >> 0) & 0x1);
            xEn = (int)((_value >> 1) & 0x1);
            zEn = (int)((_value >> 2) & 0x1);
            pd = (int)((_value >> 3) & 0x1);
            bandwidth = (int)((_value >> 4) & 0x3);
            dataRate = (int)((_value >> 6) & 0x3);
        }
    }
    class CtrlReg2Register extends Register
    {
        CtrlReg2Register(RegisterManager regManager) { super(regManager, 0x21, 1, false); }

        int hpFilterCutoff;
        int hpFilterMode;


        public CtrlReg2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((hpFilterCutoff & 0xF) << 0) | ((hpFilterMode & 0x3) << 4); }
        public void setValue(long _value)
        {
            hpFilterCutoff = (int)((_value >> 0) & 0xF);
            hpFilterMode = (int)((_value >> 4) & 0x3);
        }
    }
    class CtrlReg3Register extends Register
    {
        CtrlReg3Register(RegisterManager regManager) { super(regManager, 0x22, 1, false); }

        int i2Empty;
        int i2ORun;
        int i2Wtm;
        int i2Drdy;
        int ppOd;
        int hLactive;
        int i1boot;
        int i1Int1;


        public CtrlReg3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((i2Empty & 0x1) << 0) | ((i2ORun & 0x1) << 1) | ((i2Wtm & 0x1) << 2) | ((i2Drdy & 0x1) << 3) | ((ppOd & 0x1) << 4) | ((hLactive & 0x1) << 5) | ((i1boot & 0x1) << 6) | ((i1Int1 & 0x1) << 7); }
        public void setValue(long _value)
        {
            i2Empty = (int)((_value >> 0) & 0x1);
            i2ORun = (int)((_value >> 1) & 0x1);
            i2Wtm = (int)((_value >> 2) & 0x1);
            i2Drdy = (int)((_value >> 3) & 0x1);
            ppOd = (int)((_value >> 4) & 0x1);
            hLactive = (int)((_value >> 5) & 0x1);
            i1boot = (int)((_value >> 6) & 0x1);
            i1Int1 = (int)((_value >> 7) & 0x1);
        }
    }
    class CtrlReg4Register extends Register
    {
        CtrlReg4Register(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int sim;
        int fullScale;
        int bigLittleEndian;
        int blockDataUpdate;


        public CtrlReg4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((sim & 0x1) << 0) | ((fullScale & 0x3) << 4) | ((bigLittleEndian & 0x1) << 6) | ((blockDataUpdate & 0x1) << 7); }
        public void setValue(long _value)
        {
            sim = (int)((_value >> 0) & 0x1);
            fullScale = (int)((_value >> 4) & 0x3);
            bigLittleEndian = (int)((_value >> 6) & 0x1);
            blockDataUpdate = (int)((_value >> 7) & 0x1);
        }
    }
    class CtrlReg5Register extends Register
    {
        CtrlReg5Register(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int outSel;
        int int1Sel;
        int hPen;
        int fifoEn;
        int boot;


        public CtrlReg5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((outSel & 0x3) << 0) | ((int1Sel & 0x3) << 2) | ((hPen & 0x1) << 4) | ((fifoEn & 0x1) << 6) | ((boot & 0x1) << 7); }
        public void setValue(long _value)
        {
            outSel = (int)((_value >> 0) & 0x3);
            int1Sel = (int)((_value >> 2) & 0x3);
            hPen = (int)((_value >> 4) & 0x1);
            fifoEn = (int)((_value >> 6) & 0x1);
            boot = (int)((_value >> 7) & 0x1);
        }
    }
    class ReferenceDataCaptureRegister extends Register
    {
        ReferenceDataCaptureRegister(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int value;


        public ReferenceDataCaptureRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class OutTempRegister extends Register
    {
        OutTempRegister(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int value;


        public OutTempRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int xDataAvailable;
        int yDataAvailable;
        int zDataAvailable;
        int zyxDataAvailable;
        int xDataOverrun;
        int yDataOverrun;
        int zDataOverrun;
        int zyxDataOverrun;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
        public void setValue(long _value)
        {
            xDataAvailable = (int)((_value >> 0) & 0x1);
            yDataAvailable = (int)((_value >> 1) & 0x1);
            zDataAvailable = (int)((_value >> 2) & 0x1);
            zyxDataAvailable = (int)((_value >> 3) & 0x1);
            xDataOverrun = (int)((_value >> 4) & 0x1);
            yDataOverrun = (int)((_value >> 5) & 0x1);
            zDataOverrun = (int)((_value >> 6) & 0x1);
            zyxDataOverrun = (int)((_value >> 7) & 0x1);
        }
    }
    class FifoCtrlRegister extends Register
    {
        FifoCtrlRegister(RegisterManager regManager) { super(regManager, 0x2e, 1, false); }

        int watermarkLevelSetting;
        int fifoMode;

                public FifoModes getFifoMode() { for (FifoModes b : FifoModes.values()) { if(b.getVal() == fifoMode) return b; } return FifoModes.values()[0]; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = enumVal.getVal(); }

        public FifoCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((watermarkLevelSetting & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
        public void setValue(long _value)
        {
            watermarkLevelSetting = (int)((_value >> 0) & 0x1F);
            fifoMode = (int)((_value >> 5) & 0x7);
        }
    }
    class FifoSrcRegister extends Register
    {
        FifoSrcRegister(RegisterManager regManager) { super(regManager, 0x2f, 1, false); }

        int fifoStoredDataLevel;
        int empty;
        int overrun;
        int watermarkStatus;


        public FifoSrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoStoredDataLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((watermarkStatus & 0x1) << 7); }
        public void setValue(long _value)
        {
            fifoStoredDataLevel = (int)((_value >> 0) & 0x1F);
            empty = (int)((_value >> 5) & 0x1);
            overrun = (int)((_value >> 6) & 0x1);
            watermarkStatus = (int)((_value >> 7) & 0x1);
        }
    }
    class IntConfigRegister extends Register
    {
        IntConfigRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int xLowInterruptEnable;
        int xHighInterruptEnable;
        int yLowInterruptEnable;
        int yHighInterruptEnable;
        int zLowInterruptEvent;
        int zHighInterruptEnable;
        int latchInterruptRequest;
        int andOr;


        public IntConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((latchInterruptRequest & 0x1) << 6) | ((andOr & 0x1) << 7); }
        public void setValue(long _value)
        {
            xLowInterruptEnable = (int)((_value >> 0) & 0x1);
            xHighInterruptEnable = (int)((_value >> 1) & 0x1);
            yLowInterruptEnable = (int)((_value >> 2) & 0x1);
            yHighInterruptEnable = (int)((_value >> 3) & 0x1);
            zLowInterruptEvent = (int)((_value >> 4) & 0x1);
            zHighInterruptEnable = (int)((_value >> 5) & 0x1);
            latchInterruptRequest = (int)((_value >> 6) & 0x1);
            andOr = (int)((_value >> 7) & 0x1);
        }
    }
    class Int1SrcRegister extends Register
    {
        Int1SrcRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int interruptActive;


        public Int1SrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            xLow = (int)((_value >> 0) & 0x1);
            xHigh = (int)((_value >> 1) & 0x1);
            yLow = (int)((_value >> 2) & 0x1);
            yHigh = (int)((_value >> 3) & 0x1);
            zLow = (int)((_value >> 4) & 0x1);
            zHigh = (int)((_value >> 5) & 0x1);
            interruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class Int1ThresholdXRegister extends Register
    {
        Int1ThresholdXRegister(RegisterManager regManager) { super(regManager, 0x32, 2, true); }

        int value;


        public Int1ThresholdXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Int1ThresholdYRegister extends Register
    {
        Int1ThresholdYRegister(RegisterManager regManager) { super(regManager, 0x34, 2, true); }

        int value;


        public Int1ThresholdYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Int1ThresholdZRegister extends Register
    {
        Int1ThresholdZRegister(RegisterManager regManager) { super(regManager, 0x36, 2, true); }

        int value;


        public Int1ThresholdZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Int1DurationRegister extends Register
    {
        Int1DurationRegister(RegisterManager regManager) { super(regManager, 0x38, 1, false); }

        int duration;
        int wait;


        public Int1DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((duration & 0x7F) << 0) | ((wait & 0x1) << 7); }
        public void setValue(long _value)
        {
            duration = (int)((_value >> 0) & 0x7F);
            wait = (int)((_value >> 7) & 0x1);
        }
    }
    class OutXRegister extends Register
    {
        OutXRegister(RegisterManager regManager) { super(regManager, 0xA8, 2, false); }

        int value;


        public OutXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OutYRegister extends Register
    {
        OutYRegister(RegisterManager regManager) { super(regManager, 0xAA, 2, false); }

        int value;


        public OutYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OutZRegister extends Register
    {
        OutZRegister(RegisterManager regManager) { super(regManager, 0xAC, 2, false); }

        int value;


        public OutZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
}
