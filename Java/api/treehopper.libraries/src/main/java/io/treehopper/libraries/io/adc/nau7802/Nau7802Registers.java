package io.treehopper.libraries.io.adc.nau7802;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Nau7802Registers extends RegisterManager
{
    SMBusDevice _dev;
    Nau7802Registers(SMBusDevice dev)
    {
        super(dev);
        PuCtrl = new PuCtrlRegister(this);
        _registers.add(PuCtrl);
        Ctrl1 = new Ctrl1Register(this);
        _registers.add(Ctrl1);
        Ctrl2 = new Ctrl2Register(this);
        _registers.add(Ctrl2);
        I2cCtrl = new I2cCtrlRegister(this);
        _registers.add(I2cCtrl);
        AdcResult = new AdcResultRegister(this);
        _registers.add(AdcResult);
        Adc = new AdcRegister(this);
        _registers.add(Adc);
        Pga = new PgaRegister(this);
        _registers.add(Pga);
        PowerCtrl = new PowerCtrlRegister(this);
        _registers.add(PowerCtrl);
    }

    PuCtrlRegister PuCtrl;
    Ctrl1Register Ctrl1;
    Ctrl2Register Ctrl2;
    I2cCtrlRegister I2cCtrl;
    AdcResultRegister AdcResult;
    AdcRegister Adc;
    PgaRegister Pga;
    PowerCtrlRegister PowerCtrl;

    class PuCtrlRegister extends Register
    {
        PuCtrlRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int RegisterReset;
        int PowerUpDigital;
        int PowerUpAnalog;
        int PowerUpReady;
        int CycleStart;
        int CycleReady;
        int UseExternalCrystal;
        int UseInternalLdo;


        public PuCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RegisterReset & 0x1) << 0) | ((PowerUpDigital & 0x1) << 1) | ((PowerUpAnalog & 0x1) << 2) | ((PowerUpReady & 0x1) << 3) | ((CycleStart & 0x1) << 4) | ((CycleReady & 0x1) << 5) | ((UseExternalCrystal & 0x1) << 6) | ((UseInternalLdo & 0x1) << 7); }
        public void setValue(long value)
        {
            RegisterReset = (int)((value >> 0) & 0x1);
            PowerUpDigital = (int)((value >> 1) & 0x1);
            PowerUpAnalog = (int)((value >> 2) & 0x1);
            PowerUpReady = (int)((value >> 3) & 0x1);
            CycleStart = (int)((value >> 4) & 0x1);
            CycleReady = (int)((value >> 5) & 0x1);
            UseExternalCrystal = (int)((value >> 6) & 0x1);
            UseInternalLdo = (int)((value >> 7) & 0x1);
        }
    }
    class Ctrl1Register extends Register
    {
        Ctrl1Register(RegisterManager regManager) { super(regManager, 0x01, 1, false); }

        int Gain;
        int Vldo;
        int DrdySelect;
        int ConversionReadyPinPolarity;

                public Gains getGain() { for (Gains b : Gains.values()) { if(b.getVal() == Gain) return b; } return Gains.values()[0]; }
                public void setGain(Gains enumVal) { Gain = enumVal.getVal(); }
                public LdoVoltage getVldo() { for (LdoVoltage b : LdoVoltage.values()) { if(b.getVal() == Vldo) return b; } return LdoVoltage.values()[0]; }
                public void setVldo(LdoVoltage enumVal) { Vldo = enumVal.getVal(); }

        public Ctrl1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Gain & 0x7) << 0) | ((Vldo & 0x7) << 3) | ((DrdySelect & 0x1) << 6) | ((ConversionReadyPinPolarity & 0x1) << 7); }
        public void setValue(long value)
        {
            Gain = (int)((value >> 0) & 0x7);
            Vldo = (int)((value >> 3) & 0x7);
            DrdySelect = (int)((value >> 6) & 0x1);
            ConversionReadyPinPolarity = (int)((value >> 7) & 0x1);
        }
    }
    class Ctrl2Register extends Register
    {
        Ctrl2Register(RegisterManager regManager) { super(regManager, 0x02, 1, false); }

        int CalMod;
        int CalStart;
        int CalError;
        int ConversionRate;
        int ChannelSelect;

                public CalMods getCalMod() { for (CalMods b : CalMods.values()) { if(b.getVal() == CalMod) return b; } return CalMods.values()[0]; }
                public void setCalMod(CalMods enumVal) { CalMod = enumVal.getVal(); }
                public ConversionRates getConversionRate() { for (ConversionRates b : ConversionRates.values()) { if(b.getVal() == ConversionRate) return b; } return ConversionRates.values()[0]; }
                public void setConversionRate(ConversionRates enumVal) { ConversionRate = enumVal.getVal(); }

        public Ctrl2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((CalMod & 0x3) << 0) | ((CalStart & 0x1) << 2) | ((CalError & 0x1) << 3) | ((ConversionRate & 0x7) << 4) | ((ChannelSelect & 0x1) << 7); }
        public void setValue(long value)
        {
            CalMod = (int)((value >> 0) & 0x3);
            CalStart = (int)((value >> 2) & 0x1);
            CalError = (int)((value >> 3) & 0x1);
            ConversionRate = (int)((value >> 4) & 0x7);
            ChannelSelect = (int)((value >> 7) & 0x1);
        }
    }
    class I2cCtrlRegister extends Register
    {
        I2cCtrlRegister(RegisterManager regManager) { super(regManager, 0x11, 1, false); }

        int BgpCp;
        int Ts;
        int BoPga;
        int Si;
        int Wpd;
        int Spe;
        int Frd;
        int Crsd;


        public I2cCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((BgpCp & 0x1) << 0) | ((Ts & 0x1) << 1) | ((BoPga & 0x1) << 2) | ((Si & 0x1) << 3) | ((Wpd & 0x1) << 4) | ((Spe & 0x1) << 5) | ((Frd & 0x1) << 6) | ((Crsd & 0x1) << 7); }
        public void setValue(long value)
        {
            BgpCp = (int)((value >> 0) & 0x1);
            Ts = (int)((value >> 1) & 0x1);
            BoPga = (int)((value >> 2) & 0x1);
            Si = (int)((value >> 3) & 0x1);
            Wpd = (int)((value >> 4) & 0x1);
            Spe = (int)((value >> 5) & 0x1);
            Frd = (int)((value >> 6) & 0x1);
            Crsd = (int)((value >> 7) & 0x1);
        }
    }
    class AdcResultRegister extends Register
    {
        AdcResultRegister(RegisterManager regManager) { super(regManager, 0x12, 3, true); }

        int Value;


        public AdcResultRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFFFF) << (32 - 0 - 24)) >> (32 - 0 - 24);
        }
    }
    class AdcRegister extends Register
    {
        AdcRegister(RegisterManager regManager) { super(regManager, 0x15, 1, false); }

        int RegChp;
        int AdcVcm;
        int RegChpFreq;

                public AdcVcms getAdcVcm() { for (AdcVcms b : AdcVcms.values()) { if(b.getVal() == AdcVcm) return b; } return AdcVcms.values()[0]; }
                public void setAdcVcm(AdcVcms enumVal) { AdcVcm = enumVal.getVal(); }
                public RegChpFreqs getRegChpFreq() { for (RegChpFreqs b : RegChpFreqs.values()) { if(b.getVal() == RegChpFreq) return b; } return RegChpFreqs.values()[0]; }
                public void setRegChpFreq(RegChpFreqs enumVal) { RegChpFreq = enumVal.getVal(); }

        public AdcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RegChp & 0x3) << 0) | ((AdcVcm & 0x3) << 2) | ((RegChpFreq & 0x3) << 4); }
        public void setValue(long value)
        {
            RegChp = (int)((value >> 0) & 0x3);
            AdcVcm = (int)((value >> 2) & 0x3);
            RegChpFreq = (int)((value >> 4) & 0x3);
        }
    }
    class PgaRegister extends Register
    {
        PgaRegister(RegisterManager regManager) { super(regManager, 0x1B, 1, false); }

        int DisableChopper;
        int PgaInv;
        int PgaBypass;
        int LdoMode;
        int RdOptSel;


        public PgaRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((DisableChopper & 0x1) << 0) | ((PgaInv & 0x1) << 3) | ((PgaBypass & 0x1) << 4) | ((LdoMode & 0x1) << 5) | ((RdOptSel & 0x1) << 6); }
        public void setValue(long value)
        {
            DisableChopper = (int)((value >> 0) & 0x1);
            PgaInv = (int)((value >> 3) & 0x1);
            PgaBypass = (int)((value >> 4) & 0x1);
            LdoMode = (int)((value >> 5) & 0x1);
            RdOptSel = (int)((value >> 6) & 0x1);
        }
    }
    class PowerCtrlRegister extends Register
    {
        PowerCtrlRegister(RegisterManager regManager) { super(regManager, 0x1C, 1, false); }

        int PgaCurr;
        int AdcCurr;
        int MasterBiasCurr;
        int PgaCapEn;


        public PowerCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((PgaCurr & 0x3) << 0) | ((AdcCurr & 0x3) << 2) | ((MasterBiasCurr & 0x7) << 4) | ((PgaCapEn & 0x1) << 7); }
        public void setValue(long value)
        {
            PgaCurr = (int)((value >> 0) & 0x3);
            AdcCurr = (int)((value >> 2) & 0x3);
            MasterBiasCurr = (int)((value >> 4) & 0x7);
            PgaCapEn = (int)((value >> 7) & 0x1);
        }
    }
}
