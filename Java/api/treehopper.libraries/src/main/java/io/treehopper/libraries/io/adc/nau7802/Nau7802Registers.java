/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.io.adc.nau7802;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Nau7802Registers extends RegisterManager
{
    Nau7802Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        puCtrl = new PuCtrlRegister(this);
        _registers.add(puCtrl);
        ctrl1 = new Ctrl1Register(this);
        _registers.add(ctrl1);
        ctrl2 = new Ctrl2Register(this);
        _registers.add(ctrl2);
        i2cCtrl = new I2cCtrlRegister(this);
        _registers.add(i2cCtrl);
        adcResult = new AdcResultRegister(this);
        _registers.add(adcResult);
        adc = new AdcRegister(this);
        _registers.add(adc);
        pga = new PgaRegister(this);
        _registers.add(pga);
        powerCtrl = new PowerCtrlRegister(this);
        _registers.add(powerCtrl);
    }

    PuCtrlRegister puCtrl;
    Ctrl1Register ctrl1;
    Ctrl2Register ctrl2;
    I2cCtrlRegister i2cCtrl;
    AdcResultRegister adcResult;
    AdcRegister adc;
    PgaRegister pga;
    PowerCtrlRegister powerCtrl;

    class PuCtrlRegister extends Register
    {
        PuCtrlRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int registerReset;
        int powerUpDigital;
        int powerUpAnalog;
        int powerUpReady;
        int cycleStart;
        int cycleReady;
        int useExternalCrystal;
        int useInternalLdo;


        public PuCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((registerReset & 0x1) << 0) | ((powerUpDigital & 0x1) << 1) | ((powerUpAnalog & 0x1) << 2) | ((powerUpReady & 0x1) << 3) | ((cycleStart & 0x1) << 4) | ((cycleReady & 0x1) << 5) | ((useExternalCrystal & 0x1) << 6) | ((useInternalLdo & 0x1) << 7); }
        public void setValue(long _value)
        {
            registerReset = (int)((_value >> 0) & 0x1);
            powerUpDigital = (int)((_value >> 1) & 0x1);
            powerUpAnalog = (int)((_value >> 2) & 0x1);
            powerUpReady = (int)((_value >> 3) & 0x1);
            cycleStart = (int)((_value >> 4) & 0x1);
            cycleReady = (int)((_value >> 5) & 0x1);
            useExternalCrystal = (int)((_value >> 6) & 0x1);
            useInternalLdo = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl1Register extends Register
    {
        Ctrl1Register(RegisterManager regManager) { super(regManager, 0x01, 1, false); }

        int gain;
        int vldo;
        int drdySelect;
        int conversionReadyPinPolarity;

                public Gains getGain() { for (Gains b : Gains.values()) { if(b.getVal() == gain) return b; } return Gains.values()[0]; }
                public void setGain(Gains enumVal) { gain = enumVal.getVal(); }
                public Vldoes getVldo() { for (Vldoes b : Vldoes.values()) { if(b.getVal() == vldo) return b; } return Vldoes.values()[0]; }
                public void setVldo(Vldoes enumVal) { vldo = enumVal.getVal(); }

        public Ctrl1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((gain & 0x7) << 0) | ((vldo & 0x7) << 3) | ((drdySelect & 0x1) << 6) | ((conversionReadyPinPolarity & 0x1) << 7); }
        public void setValue(long _value)
        {
            gain = (int)((_value >> 0) & 0x7);
            vldo = (int)((_value >> 3) & 0x7);
            drdySelect = (int)((_value >> 6) & 0x1);
            conversionReadyPinPolarity = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl2Register extends Register
    {
        Ctrl2Register(RegisterManager regManager) { super(regManager, 0x02, 1, false); }

        int calMod;
        int calStart;
        int calError;
        int conversionRate;
        int channelSelect;

                public CalMods getCalMod() { for (CalMods b : CalMods.values()) { if(b.getVal() == calMod) return b; } return CalMods.values()[0]; }
                public void setCalMod(CalMods enumVal) { calMod = enumVal.getVal(); }
                public ConversionRates getConversionRate() { for (ConversionRates b : ConversionRates.values()) { if(b.getVal() == conversionRate) return b; } return ConversionRates.values()[0]; }
                public void setConversionRate(ConversionRates enumVal) { conversionRate = enumVal.getVal(); }

        public Ctrl2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((calMod & 0x3) << 0) | ((calStart & 0x1) << 2) | ((calError & 0x1) << 3) | ((conversionRate & 0x7) << 4) | ((channelSelect & 0x1) << 7); }
        public void setValue(long _value)
        {
            calMod = (int)((_value >> 0) & 0x3);
            calStart = (int)((_value >> 2) & 0x1);
            calError = (int)((_value >> 3) & 0x1);
            conversionRate = (int)((_value >> 4) & 0x7);
            channelSelect = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cCtrlRegister extends Register
    {
        I2cCtrlRegister(RegisterManager regManager) { super(regManager, 0x11, 1, false); }

        int bgpCp;
        int ts;
        int boPga;
        int si;
        int wpd;
        int spe;
        int frd;
        int crsd;


        public I2cCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((bgpCp & 0x1) << 0) | ((ts & 0x1) << 1) | ((boPga & 0x1) << 2) | ((si & 0x1) << 3) | ((wpd & 0x1) << 4) | ((spe & 0x1) << 5) | ((frd & 0x1) << 6) | ((crsd & 0x1) << 7); }
        public void setValue(long _value)
        {
            bgpCp = (int)((_value >> 0) & 0x1);
            ts = (int)((_value >> 1) & 0x1);
            boPga = (int)((_value >> 2) & 0x1);
            si = (int)((_value >> 3) & 0x1);
            wpd = (int)((_value >> 4) & 0x1);
            spe = (int)((_value >> 5) & 0x1);
            frd = (int)((_value >> 6) & 0x1);
            crsd = (int)((_value >> 7) & 0x1);
        }
    }
    class AdcResultRegister extends Register
    {
        AdcResultRegister(RegisterManager regManager) { super(regManager, 0x12, 3, true); }

        int value;


        public AdcResultRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFFFF) << (32 - 24)) >> (32 - 24);
        }
    }
    class AdcRegister extends Register
    {
        AdcRegister(RegisterManager regManager) { super(regManager, 0x15, 1, false); }

        int regChp;
        int adcVcm;
        int regChpFreq;

                public AdcVcms getAdcVcm() { for (AdcVcms b : AdcVcms.values()) { if(b.getVal() == adcVcm) return b; } return AdcVcms.values()[0]; }
                public void setAdcVcm(AdcVcms enumVal) { adcVcm = enumVal.getVal(); }
                public RegChpFreqs getRegChpFreq() { for (RegChpFreqs b : RegChpFreqs.values()) { if(b.getVal() == regChpFreq) return b; } return RegChpFreqs.values()[0]; }
                public void setRegChpFreq(RegChpFreqs enumVal) { regChpFreq = enumVal.getVal(); }

        public AdcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((regChp & 0x3) << 0) | ((adcVcm & 0x3) << 2) | ((regChpFreq & 0x3) << 4); }
        public void setValue(long _value)
        {
            regChp = (int)((_value >> 0) & 0x3);
            adcVcm = (int)((_value >> 2) & 0x3);
            regChpFreq = (int)((_value >> 4) & 0x3);
        }
    }
    class PgaRegister extends Register
    {
        PgaRegister(RegisterManager regManager) { super(regManager, 0x1B, 1, false); }

        int disableChopper;
        int pgaInv;
        int pgaBypass;
        int ldoMode;
        int rdOptSel;


        public PgaRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((disableChopper & 0x1) << 0) | ((pgaInv & 0x1) << 3) | ((pgaBypass & 0x1) << 4) | ((ldoMode & 0x1) << 5) | ((rdOptSel & 0x1) << 6); }
        public void setValue(long _value)
        {
            disableChopper = (int)((_value >> 0) & 0x1);
            pgaInv = (int)((_value >> 3) & 0x1);
            pgaBypass = (int)((_value >> 4) & 0x1);
            ldoMode = (int)((_value >> 5) & 0x1);
            rdOptSel = (int)((_value >> 6) & 0x1);
        }
    }
    class PowerCtrlRegister extends Register
    {
        PowerCtrlRegister(RegisterManager regManager) { super(regManager, 0x1C, 1, false); }

        int pgaCurr;
        int adcCurr;
        int masterBiasCurr;
        int pgaCapEn;


        public PowerCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((pgaCurr & 0x3) << 0) | ((adcCurr & 0x3) << 2) | ((masterBiasCurr & 0x7) << 4) | ((pgaCapEn & 0x1) << 7); }
        public void setValue(long _value)
        {
            pgaCurr = (int)((_value >> 0) & 0x3);
            adcCurr = (int)((_value >> 2) & 0x3);
            masterBiasCurr = (int)((_value >> 4) & 0x7);
            pgaCapEn = (int)((_value >> 7) & 0x1);
        }
    }
}
