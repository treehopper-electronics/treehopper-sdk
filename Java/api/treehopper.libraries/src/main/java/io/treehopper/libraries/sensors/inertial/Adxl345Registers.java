package io.treehopper.libraries.sensors.inertial;

import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Adxl345Registers
{
    SMBusDevice _dev;
    Adxl345Registers(SMBusDevice dev)
    {
        _dev = dev;
    }

    void Flush()
    {
        _dev.writeBufferData((byte)0x2D, getBytes(PowerCtl.getValue(), 1, true));
        _dev.writeBufferData((byte)0x31, getBytes(DataFormat.getValue(), 1, true));
    }

    void Update()
    {
        int i = 0;
        byte[] bytes = _dev.readBufferData((byte)50, 6);
        DataX.setValue(getValue(Arrays.copyOfRange(bytes, i, 2), true));
        i += 2;
        DataY.setValue(getValue(Arrays.copyOfRange(bytes, i, 2), true));
        i += 2;
        DataZ.setValue(getValue(Arrays.copyOfRange(bytes, i, 2), true));
        i += 2;
    }

    byte[] getBytes(long val, int width, boolean isLittleEndian)
    {
        byte[] retVal = new byte[width]; 
        for (int i = 0; i < width; i++) 
            retVal[i] = (byte) ((val >> (8 * i)) & 0xFF);

        // TODO: Fix endianess
        // if (BitConverter.IsLittleEndian ^ isLittleEndian) 
        //     retVal = retVal.Reverse().ToArray();

        return retVal;
    }

    long getValue(byte[] bytes, boolean isLittleEndian)
    {
        // TODO: Fix endianess
        // if (BitConverter.IsLittleEndian ^ isLittleEndian) 
        //         bytes = bytes.Reverse().ToArray(); 

        long regVal = 0; 

        for (int i = 0; i < bytes.length; i++) 
                regVal |= bytes[i] << (i * 8);

        return regVal;
    }

    PowerCtlRegister PowerCtl = new PowerCtlRegister();
    DataFormatRegister DataFormat = new DataFormatRegister();
    DataXRegister DataX = new DataXRegister();
    DataYRegister DataY = new DataYRegister();
    DataZRegister DataZ = new DataZRegister();

    class PowerCtlRegister
    {
        int Sleep;
        int Measure;
        long getValue() { return ((Sleep & 0x1) << 2) | ((Measure & 0x1) << 3); }
        void setValue(long value)
        {
            Sleep = (int)((value >> 2) & 0x1);
            Measure = (int)((value >> 3) & 0x1);
        }
    }
    class DataFormatRegister
    {
        int Range;
        long getValue() { return ((Range & 0x3) << 0); }
        void setValue(long value)
        {
            Range = (int)((value >> 0) & 0x3);
        }
    }
    class DataXRegister
    {
        int Value;
        long getValue() { return ((Value & 0xFFFF) << 0); }
        void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
        }
    }
    class DataYRegister
    {
        int Value;
        long getValue() { return ((Value & 0xFFFF) << 0); }
        void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
        }
    }
    class DataZRegister
    {
        int Value;
        long getValue() { return ((Value & 0xFFFF) << 0); }
        void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 0 - 16)) >> (32 - 0 - 16);
        }
    }
}
