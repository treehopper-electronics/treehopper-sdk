/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.optical.tsl2591;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Tsl2591Registers extends RegisterManager
{
    Tsl2591Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        enable = new EnableRegister(this);
        _registers.add(enable);
        config = new ConfigRegister(this);
        _registers.add(config);
        interruptLowThreshold = new InterruptLowThresholdRegister(this);
        _registers.add(interruptLowThreshold);
        interruptHighThreshold = new InterruptHighThresholdRegister(this);
        _registers.add(interruptHighThreshold);
        noPersistLowThreshold = new NoPersistLowThresholdRegister(this);
        _registers.add(noPersistLowThreshold);
        noPersistHighThreshold = new NoPersistHighThresholdRegister(this);
        _registers.add(noPersistHighThreshold);
        persist = new PersistRegister(this);
        _registers.add(persist);
        packageId = new PackageIdRegister(this);
        _registers.add(packageId);
        deviceId = new DeviceIdRegister(this);
        _registers.add(deviceId);
        status = new StatusRegister(this);
        _registers.add(status);
        ch0 = new Ch0Register(this);
        _registers.add(ch0);
        ch1 = new Ch1Register(this);
        _registers.add(ch1);
    }

    EnableRegister enable;
    ConfigRegister config;
    InterruptLowThresholdRegister interruptLowThreshold;
    InterruptHighThresholdRegister interruptHighThreshold;
    NoPersistLowThresholdRegister noPersistLowThreshold;
    NoPersistHighThresholdRegister noPersistHighThreshold;
    PersistRegister persist;
    PackageIdRegister packageId;
    DeviceIdRegister deviceId;
    StatusRegister status;
    Ch0Register ch0;
    Ch1Register ch1;

    class EnableRegister extends Register
    {
        EnableRegister(RegisterManager regManager) { super(regManager, 0xA0, 1, false); }

        int powerOn;
        int alsEnable;
        int alsInterruptEnable;
        int sleepAfterInterrupt;
        int noPersistInterruptEnable;


        public EnableRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((powerOn & 0x1) << 0) | ((alsEnable & 0x1) << 1) | ((alsInterruptEnable & 0x1) << 4) | ((sleepAfterInterrupt & 0x1) << 6) | ((noPersistInterruptEnable & 0x1) << 7); }
        public void setValue(long _value)
        {
            powerOn = (int)((_value >> 0) & 0x1);
            alsEnable = (int)((_value >> 1) & 0x1);
            alsInterruptEnable = (int)((_value >> 4) & 0x1);
            sleepAfterInterrupt = (int)((_value >> 6) & 0x1);
            noPersistInterruptEnable = (int)((_value >> 7) & 0x1);
        }
    }
    class ConfigRegister extends Register
    {
        ConfigRegister(RegisterManager regManager) { super(regManager, 0xA1, 1, false); }

        int alsTime;
        int alsGain;
        int systemReset;

                public AlsTimes getAlsTime() { for (AlsTimes b : AlsTimes.values()) { if(b.getVal() == alsTime) return b; } return AlsTimes.values()[0]; }
                public void setAlsTime(AlsTimes enumVal) { alsTime = enumVal.getVal(); }
                public AlsGains getAlsGain() { for (AlsGains b : AlsGains.values()) { if(b.getVal() == alsGain) return b; } return AlsGains.values()[0]; }
                public void setAlsGain(AlsGains enumVal) { alsGain = enumVal.getVal(); }

        public ConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((alsTime & 0x7) << 0) | ((alsGain & 0x3) << 3) | ((systemReset & 0x1) << 7); }
        public void setValue(long _value)
        {
            alsTime = (int)((_value >> 0) & 0x7);
            alsGain = (int)((_value >> 3) & 0x3);
            systemReset = (int)((_value >> 7) & 0x1);
        }
    }
    class InterruptLowThresholdRegister extends Register
    {
        InterruptLowThresholdRegister(RegisterManager regManager) { super(regManager, 0xA4, 2, false); }

        int value;


        public InterruptLowThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class InterruptHighThresholdRegister extends Register
    {
        InterruptHighThresholdRegister(RegisterManager regManager) { super(regManager, 0xA6, 2, false); }

        int value;


        public InterruptHighThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class NoPersistLowThresholdRegister extends Register
    {
        NoPersistLowThresholdRegister(RegisterManager regManager) { super(regManager, 0xA8, 2, false); }

        int value;


        public NoPersistLowThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class NoPersistHighThresholdRegister extends Register
    {
        NoPersistHighThresholdRegister(RegisterManager regManager) { super(regManager, 0xAa, 2, false); }

        int value;


        public NoPersistHighThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class PersistRegister extends Register
    {
        PersistRegister(RegisterManager regManager) { super(regManager, 0xAc, 1, false); }

        int interruptPersistanceFilter;

                public InterruptPersistanceFilters getInterruptPersistanceFilter() { for (InterruptPersistanceFilters b : InterruptPersistanceFilters.values()) { if(b.getVal() == interruptPersistanceFilter) return b; } return InterruptPersistanceFilters.values()[0]; }
                public void setInterruptPersistanceFilter(InterruptPersistanceFilters enumVal) { interruptPersistanceFilter = enumVal.getVal(); }

        public PersistRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((interruptPersistanceFilter & 0xF) << 0); }
        public void setValue(long _value)
        {
            interruptPersistanceFilter = (int)((_value >> 0) & 0xF);
        }
    }
    class PackageIdRegister extends Register
    {
        PackageIdRegister(RegisterManager regManager) { super(regManager, 0xB1, 1, false); }

        int value;


        public PackageIdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class DeviceIdRegister extends Register
    {
        DeviceIdRegister(RegisterManager regManager) { super(regManager, 0xB2, 1, false); }

        int value;


        public DeviceIdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0xB3, 1, false); }

        int alsValud;
        int alsInterrupt;
        int noPersistInterrupt;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((alsValud & 0x1) << 0) | ((alsInterrupt & 0x1) << 4) | ((noPersistInterrupt & 0x1) << 5); }
        public void setValue(long _value)
        {
            alsValud = (int)((_value >> 0) & 0x1);
            alsInterrupt = (int)((_value >> 4) & 0x1);
            noPersistInterrupt = (int)((_value >> 5) & 0x1);
        }
    }
    class Ch0Register extends Register
    {
        Ch0Register(RegisterManager regManager) { super(regManager, 0xB4, 2, false); }

        int value;


        public Ch0Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class Ch1Register extends Register
    {
        Ch1Register(RegisterManager regManager) { super(regManager, 0xB6, 2, false); }

        int value;


        public Ch1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
}
