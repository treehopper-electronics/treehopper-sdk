/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.inertial.mpu6050;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Mpu6050Registers extends RegisterManager
{
    Mpu6050Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        self_test_x_gyro = new Self_test_x_gyroRegister(this);
        _registers.add(self_test_x_gyro);
        self_test_y_gyro = new Self_test_y_gyroRegister(this);
        _registers.add(self_test_y_gyro);
        self_test_z_gyro = new Self_test_z_gyroRegister(this);
        _registers.add(self_test_z_gyro);
        self_test_x_accel = new Self_test_x_accelRegister(this);
        _registers.add(self_test_x_accel);
        self_test_y_accel = new Self_test_y_accelRegister(this);
        _registers.add(self_test_y_accel);
        self_test_z_accel = new Self_test_z_accelRegister(this);
        _registers.add(self_test_z_accel);
        xGyroOffsUsr = new XGyroOffsUsrRegister(this);
        _registers.add(xGyroOffsUsr);
        yGyroOffsUsr = new YGyroOffsUsrRegister(this);
        _registers.add(yGyroOffsUsr);
        zGyroOffsUsr = new ZGyroOffsUsrRegister(this);
        _registers.add(zGyroOffsUsr);
        sampleRateDivider = new SampleRateDividerRegister(this);
        _registers.add(sampleRateDivider);
        configuration = new ConfigurationRegister(this);
        _registers.add(configuration);
        gyroConfig = new GyroConfigRegister(this);
        _registers.add(gyroConfig);
        accelConfig = new AccelConfigRegister(this);
        _registers.add(accelConfig);
        accelConfig2 = new AccelConfig2Register(this);
        _registers.add(accelConfig2);
        lowPowerAccelerometerOdrControl = new LowPowerAccelerometerOdrControlRegister(this);
        _registers.add(lowPowerAccelerometerOdrControl);
        womThreshold = new WomThresholdRegister(this);
        _registers.add(womThreshold);
        fifoEnable = new FifoEnableRegister(this);
        _registers.add(fifoEnable);
        i2cMasterControl = new I2cMasterControlRegister(this);
        _registers.add(i2cMasterControl);
        i2cSlv0Addr = new I2cSlv0AddrRegister(this);
        _registers.add(i2cSlv0Addr);
        i2cSlv0Reg = new I2cSlv0RegRegister(this);
        _registers.add(i2cSlv0Reg);
        i2cSlv0Ctrl = new I2cSlv0CtrlRegister(this);
        _registers.add(i2cSlv0Ctrl);
        i2cSlv1Addr = new I2cSlv1AddrRegister(this);
        _registers.add(i2cSlv1Addr);
        i2cSlv1Reg = new I2cSlv1RegRegister(this);
        _registers.add(i2cSlv1Reg);
        i2cSlv1Ctrl = new I2cSlv1CtrlRegister(this);
        _registers.add(i2cSlv1Ctrl);
        i2cSlv2Addr = new I2cSlv2AddrRegister(this);
        _registers.add(i2cSlv2Addr);
        i2cSlv2Reg = new I2cSlv2RegRegister(this);
        _registers.add(i2cSlv2Reg);
        i2cSlv2Ctrl = new I2cSlv2CtrlRegister(this);
        _registers.add(i2cSlv2Ctrl);
        i2cSlv3Addr = new I2cSlv3AddrRegister(this);
        _registers.add(i2cSlv3Addr);
        i2cSlv3Reg = new I2cSlv3RegRegister(this);
        _registers.add(i2cSlv3Reg);
        i2cSlv3Ctrl = new I2cSlv3CtrlRegister(this);
        _registers.add(i2cSlv3Ctrl);
        i2cSlv4Addr = new I2cSlv4AddrRegister(this);
        _registers.add(i2cSlv4Addr);
        i2cSlv4Reg = new I2cSlv4RegRegister(this);
        _registers.add(i2cSlv4Reg);
        i2cSlv4Do = new I2cSlv4DoRegister(this);
        _registers.add(i2cSlv4Do);
        i2cSlv4Ctrl = new I2cSlv4CtrlRegister(this);
        _registers.add(i2cSlv4Ctrl);
        i2cSlv4Di = new I2cSlv4DiRegister(this);
        _registers.add(i2cSlv4Di);
        i2cMstStatus = new I2cMstStatusRegister(this);
        _registers.add(i2cMstStatus);
        intPinCfg = new IntPinCfgRegister(this);
        _registers.add(intPinCfg);
        intEnable = new IntEnableRegister(this);
        _registers.add(intEnable);
        intStatus = new IntStatusRegister(this);
        _registers.add(intStatus);
        accel_x = new Accel_xRegister(this);
        _registers.add(accel_x);
        accel_y = new Accel_yRegister(this);
        _registers.add(accel_y);
        accel_z = new Accel_zRegister(this);
        _registers.add(accel_z);
        temp = new TempRegister(this);
        _registers.add(temp);
        gyro_x = new Gyro_xRegister(this);
        _registers.add(gyro_x);
        gyro_y = new Gyro_yRegister(this);
        _registers.add(gyro_y);
        gyro_z = new Gyro_zRegister(this);
        _registers.add(gyro_z);
        extSensData = new ExtSensDataRegister(this);
        _registers.add(extSensData);
        i2cSlv0do = new I2cSlv0doRegister(this);
        _registers.add(i2cSlv0do);
        i2cSlv1do = new I2cSlv1doRegister(this);
        _registers.add(i2cSlv1do);
        i2cSlv2do = new I2cSlv2doRegister(this);
        _registers.add(i2cSlv2do);
        i2cSlv3do = new I2cSlv3doRegister(this);
        _registers.add(i2cSlv3do);
        i2cMstDelayCtrl = new I2cMstDelayCtrlRegister(this);
        _registers.add(i2cMstDelayCtrl);
        signalPathReset = new SignalPathResetRegister(this);
        _registers.add(signalPathReset);
        accelIntCtrl = new AccelIntCtrlRegister(this);
        _registers.add(accelIntCtrl);
        userCtrl = new UserCtrlRegister(this);
        _registers.add(userCtrl);
        powerMgmt1 = new PowerMgmt1Register(this);
        _registers.add(powerMgmt1);
        powerMgmt2 = new PowerMgmt2Register(this);
        _registers.add(powerMgmt2);
        fifoCount = new FifoCountRegister(this);
        _registers.add(fifoCount);
        fifoRW = new FifoRWRegister(this);
        _registers.add(fifoRW);
        whoAmI = new WhoAmIRegister(this);
        _registers.add(whoAmI);
        xAccelOffset = new XAccelOffsetRegister(this);
        _registers.add(xAccelOffset);
        yAccelOffset = new YAccelOffsetRegister(this);
        _registers.add(yAccelOffset);
        zAccelOffset = new ZAccelOffsetRegister(this);
        _registers.add(zAccelOffset);
    }

    Self_test_x_gyroRegister self_test_x_gyro;
    Self_test_y_gyroRegister self_test_y_gyro;
    Self_test_z_gyroRegister self_test_z_gyro;
    Self_test_x_accelRegister self_test_x_accel;
    Self_test_y_accelRegister self_test_y_accel;
    Self_test_z_accelRegister self_test_z_accel;
    XGyroOffsUsrRegister xGyroOffsUsr;
    YGyroOffsUsrRegister yGyroOffsUsr;
    ZGyroOffsUsrRegister zGyroOffsUsr;
    SampleRateDividerRegister sampleRateDivider;
    ConfigurationRegister configuration;
    GyroConfigRegister gyroConfig;
    AccelConfigRegister accelConfig;
    AccelConfig2Register accelConfig2;
    LowPowerAccelerometerOdrControlRegister lowPowerAccelerometerOdrControl;
    WomThresholdRegister womThreshold;
    FifoEnableRegister fifoEnable;
    I2cMasterControlRegister i2cMasterControl;
    I2cSlv0AddrRegister i2cSlv0Addr;
    I2cSlv0RegRegister i2cSlv0Reg;
    I2cSlv0CtrlRegister i2cSlv0Ctrl;
    I2cSlv1AddrRegister i2cSlv1Addr;
    I2cSlv1RegRegister i2cSlv1Reg;
    I2cSlv1CtrlRegister i2cSlv1Ctrl;
    I2cSlv2AddrRegister i2cSlv2Addr;
    I2cSlv2RegRegister i2cSlv2Reg;
    I2cSlv2CtrlRegister i2cSlv2Ctrl;
    I2cSlv3AddrRegister i2cSlv3Addr;
    I2cSlv3RegRegister i2cSlv3Reg;
    I2cSlv3CtrlRegister i2cSlv3Ctrl;
    I2cSlv4AddrRegister i2cSlv4Addr;
    I2cSlv4RegRegister i2cSlv4Reg;
    I2cSlv4DoRegister i2cSlv4Do;
    I2cSlv4CtrlRegister i2cSlv4Ctrl;
    I2cSlv4DiRegister i2cSlv4Di;
    I2cMstStatusRegister i2cMstStatus;
    IntPinCfgRegister intPinCfg;
    IntEnableRegister intEnable;
    IntStatusRegister intStatus;
    Accel_xRegister accel_x;
    Accel_yRegister accel_y;
    Accel_zRegister accel_z;
    TempRegister temp;
    Gyro_xRegister gyro_x;
    Gyro_yRegister gyro_y;
    Gyro_zRegister gyro_z;
    ExtSensDataRegister extSensData;
    I2cSlv0doRegister i2cSlv0do;
    I2cSlv1doRegister i2cSlv1do;
    I2cSlv2doRegister i2cSlv2do;
    I2cSlv3doRegister i2cSlv3do;
    I2cMstDelayCtrlRegister i2cMstDelayCtrl;
    SignalPathResetRegister signalPathReset;
    AccelIntCtrlRegister accelIntCtrl;
    UserCtrlRegister userCtrl;
    PowerMgmt1Register powerMgmt1;
    PowerMgmt2Register powerMgmt2;
    FifoCountRegister fifoCount;
    FifoRWRegister fifoRW;
    WhoAmIRegister whoAmI;
    XAccelOffsetRegister xAccelOffset;
    YAccelOffsetRegister yAccelOffset;
    ZAccelOffsetRegister zAccelOffset;

    class Self_test_x_gyroRegister extends Register
    {
        Self_test_x_gyroRegister(RegisterManager regManager) { super(regManager, 0x00, 1, false); }

        int value;


        public Self_test_x_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Self_test_y_gyroRegister extends Register
    {
        Self_test_y_gyroRegister(RegisterManager regManager) { super(regManager, 0x01, 1, false); }

        int value;


        public Self_test_y_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Self_test_z_gyroRegister extends Register
    {
        Self_test_z_gyroRegister(RegisterManager regManager) { super(regManager, 0x02, 1, false); }

        int value;


        public Self_test_z_gyroRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Self_test_x_accelRegister extends Register
    {
        Self_test_x_accelRegister(RegisterManager regManager) { super(regManager, 0x0d, 1, false); }

        int value;


        public Self_test_x_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Self_test_y_accelRegister extends Register
    {
        Self_test_y_accelRegister(RegisterManager regManager) { super(regManager, 0x0e, 1, false); }

        int value;


        public Self_test_y_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Self_test_z_accelRegister extends Register
    {
        Self_test_z_accelRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int value;


        public Self_test_z_accelRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class XGyroOffsUsrRegister extends Register
    {
        XGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x13, 2, false); }

        int value;


        public XGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class YGyroOffsUsrRegister extends Register
    {
        YGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x15, 2, false); }

        int value;


        public YGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class ZGyroOffsUsrRegister extends Register
    {
        ZGyroOffsUsrRegister(RegisterManager regManager) { super(regManager, 0x17, 2, false); }

        int value;


        public ZGyroOffsUsrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class SampleRateDividerRegister extends Register
    {
        SampleRateDividerRegister(RegisterManager regManager) { super(regManager, 0x19, 1, false); }

        int value;


        public SampleRateDividerRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ConfigurationRegister extends Register
    {
        ConfigurationRegister(RegisterManager regManager) { super(regManager, 0x1a, 1, false); }

        int dlpf;
        int extSyncSet;
        int fifoMode;

                public ExtSyncSets getExtSyncSet() { for (ExtSyncSets b : ExtSyncSets.values()) { if(b.getVal() == extSyncSet) return b; } return ExtSyncSets.values()[0]; }
                public void setExtSyncSet(ExtSyncSets enumVal) { extSyncSet = enumVal.getVal(); }

        public ConfigurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((dlpf & 0x7) << 0) | ((extSyncSet & 0x7) << 3) | ((fifoMode & 0x1) << 6); }
        public void setValue(long _value)
        {
            dlpf = (int)((_value >> 0) & 0x7);
            extSyncSet = (int)((_value >> 3) & 0x7);
            fifoMode = (int)((_value >> 6) & 0x1);
        }
    }
    class GyroConfigRegister extends Register
    {
        GyroConfigRegister(RegisterManager regManager) { super(regManager, 0x1b, 1, false); }

        int fChoiceBypass;
        int gyroScale;
        int zGyroCten;
        int yGyroCten;

                public GyroScales getGyroScale() { for (GyroScales b : GyroScales.values()) { if(b.getVal() == gyroScale) return b; } return GyroScales.values()[0]; }
                public void setGyroScale(GyroScales enumVal) { gyroScale = enumVal.getVal(); }

        public GyroConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fChoiceBypass & 0x3) << 0) | ((gyroScale & 0x3) << 3) | ((zGyroCten & 0x1) << 5) | ((yGyroCten & 0x1) << 6); }
        public void setValue(long _value)
        {
            fChoiceBypass = (int)((_value >> 0) & 0x3);
            gyroScale = (int)((_value >> 3) & 0x3);
            zGyroCten = (int)((_value >> 5) & 0x1);
            yGyroCten = (int)((_value >> 6) & 0x1);
        }
    }
    class AccelConfigRegister extends Register
    {
        AccelConfigRegister(RegisterManager regManager) { super(regManager, 0x1c, 1, false); }

        int accelScale;
        int accelZselfTest;
        int accelYselfTest;
        int accelXselfTest;

                public AccelScales getAccelScale() { for (AccelScales b : AccelScales.values()) { if(b.getVal() == accelScale) return b; } return AccelScales.values()[0]; }
                public void setAccelScale(AccelScales enumVal) { accelScale = enumVal.getVal(); }

        public AccelConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((accelScale & 0x3) << 3) | ((accelZselfTest & 0x1) << 5) | ((accelYselfTest & 0x1) << 6) | ((accelXselfTest & 0x1) << 7); }
        public void setValue(long _value)
        {
            accelScale = (int)((_value >> 3) & 0x3);
            accelZselfTest = (int)((_value >> 5) & 0x1);
            accelYselfTest = (int)((_value >> 6) & 0x1);
            accelXselfTest = (int)((_value >> 7) & 0x1);
        }
    }
    class AccelConfig2Register extends Register
    {
        AccelConfig2Register(RegisterManager regManager) { super(regManager, 0x1d, 1, false); }

        int dlpfCfg;
        int accelFchoice;


        public AccelConfig2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((dlpfCfg & 0x7) << 0) | ((accelFchoice & 0x1) << 3); }
        public void setValue(long _value)
        {
            dlpfCfg = (int)((_value >> 0) & 0x7);
            accelFchoice = (int)((_value >> 3) & 0x1);
        }
    }
    class LowPowerAccelerometerOdrControlRegister extends Register
    {
        LowPowerAccelerometerOdrControlRegister(RegisterManager regManager) { super(regManager, 0x1e, 1, false); }

        int value;


        public LowPowerAccelerometerOdrControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xF);
        }
    }
    class WomThresholdRegister extends Register
    {
        WomThresholdRegister(RegisterManager regManager) { super(regManager, 0x1f, 1, false); }

        int value;


        public WomThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class FifoEnableRegister extends Register
    {
        FifoEnableRegister(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int slv0;
        int slv1;
        int slv2;
        int accel;
        int gyroZout;
        int gyroYout;
        int gyroXout;
        int tempOut;


        public FifoEnableRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((slv0 & 0x1) << 0) | ((slv1 & 0x1) << 1) | ((slv2 & 0x1) << 2) | ((accel & 0x1) << 3) | ((gyroZout & 0x1) << 4) | ((gyroYout & 0x1) << 5) | ((gyroXout & 0x1) << 6) | ((tempOut & 0x1) << 7); }
        public void setValue(long _value)
        {
            slv0 = (int)((_value >> 0) & 0x1);
            slv1 = (int)((_value >> 1) & 0x1);
            slv2 = (int)((_value >> 2) & 0x1);
            accel = (int)((_value >> 3) & 0x1);
            gyroZout = (int)((_value >> 4) & 0x1);
            gyroYout = (int)((_value >> 5) & 0x1);
            gyroXout = (int)((_value >> 6) & 0x1);
            tempOut = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cMasterControlRegister extends Register
    {
        I2cMasterControlRegister(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int i2cMasterClock;
        int i2cMstPnsr;
        int slv3FifoEn;
        int waitForEs;
        int multMstEn;


        public I2cMasterControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((i2cMasterClock & 0xF) << 0) | ((i2cMstPnsr & 0x1) << 4) | ((slv3FifoEn & 0x1) << 5) | ((waitForEs & 0x1) << 6) | ((multMstEn & 0x1) << 7); }
        public void setValue(long _value)
        {
            i2cMasterClock = (int)((_value >> 0) & 0xF);
            i2cMstPnsr = (int)((_value >> 4) & 0x1);
            slv3FifoEn = (int)((_value >> 5) & 0x1);
            waitForEs = (int)((_value >> 6) & 0x1);
            multMstEn = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv0AddrRegister extends Register
    {
        I2cSlv0AddrRegister(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int id;
        int rnw;


        public I2cSlv0AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
        public void setValue(long _value)
        {
            id = (int)((_value >> 0) & 0x7F);
            rnw = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv0RegRegister extends Register
    {
        I2cSlv0RegRegister(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int value;


        public I2cSlv0RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv0CtrlRegister extends Register
    {
        I2cSlv0CtrlRegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int value;


        public I2cSlv0CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv1AddrRegister extends Register
    {
        I2cSlv1AddrRegister(RegisterManager regManager) { super(regManager, 0x28, 1, false); }

        int id;
        int rnw;


        public I2cSlv1AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
        public void setValue(long _value)
        {
            id = (int)((_value >> 0) & 0x7F);
            rnw = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv1RegRegister extends Register
    {
        I2cSlv1RegRegister(RegisterManager regManager) { super(regManager, 0x29, 1, false); }

        int value;


        public I2cSlv1RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv1CtrlRegister extends Register
    {
        I2cSlv1CtrlRegister(RegisterManager regManager) { super(regManager, 0x2a, 1, false); }

        int value;


        public I2cSlv1CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv2AddrRegister extends Register
    {
        I2cSlv2AddrRegister(RegisterManager regManager) { super(regManager, 0x2b, 1, false); }

        int id;
        int rnw;


        public I2cSlv2AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
        public void setValue(long _value)
        {
            id = (int)((_value >> 0) & 0x7F);
            rnw = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv2RegRegister extends Register
    {
        I2cSlv2RegRegister(RegisterManager regManager) { super(regManager, 0x2c, 1, false); }

        int value;


        public I2cSlv2RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv2CtrlRegister extends Register
    {
        I2cSlv2CtrlRegister(RegisterManager regManager) { super(regManager, 0x2d, 1, false); }

        int value;


        public I2cSlv2CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv3AddrRegister extends Register
    {
        I2cSlv3AddrRegister(RegisterManager regManager) { super(regManager, 0x2e, 1, false); }

        int id;
        int rnw;


        public I2cSlv3AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
        public void setValue(long _value)
        {
            id = (int)((_value >> 0) & 0x7F);
            rnw = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv3RegRegister extends Register
    {
        I2cSlv3RegRegister(RegisterManager regManager) { super(regManager, 0x2f, 1, false); }

        int value;


        public I2cSlv3RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv3CtrlRegister extends Register
    {
        I2cSlv3CtrlRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int value;


        public I2cSlv3CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv4AddrRegister extends Register
    {
        I2cSlv4AddrRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int id;
        int rnw;


        public I2cSlv4AddrRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((id & 0x7F) << 0) | ((rnw & 0x1) << 7); }
        public void setValue(long _value)
        {
            id = (int)((_value >> 0) & 0x7F);
            rnw = (int)((_value >> 7) & 0x1);
        }
    }
    class I2cSlv4RegRegister extends Register
    {
        I2cSlv4RegRegister(RegisterManager regManager) { super(regManager, 0x32, 1, false); }

        int value;


        public I2cSlv4RegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv4DoRegister extends Register
    {
        I2cSlv4DoRegister(RegisterManager regManager) { super(regManager, 0x33, 1, false); }

        int value;


        public I2cSlv4DoRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv4CtrlRegister extends Register
    {
        I2cSlv4CtrlRegister(RegisterManager regManager) { super(regManager, 0x34, 1, false); }

        int value;


        public I2cSlv4CtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv4DiRegister extends Register
    {
        I2cSlv4DiRegister(RegisterManager regManager) { super(regManager, 0x35, 1, false); }

        int value;


        public I2cSlv4DiRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cMstStatusRegister extends Register
    {
        I2cMstStatusRegister(RegisterManager regManager) { super(regManager, 0x36, 1, false); }

        int slv0Nack;
        int slv1Nack;
        int slv2Nack;
        int slv3Nack;
        int slv4Nack;
        int lostArb;
        int slv4Done;
        int passThrough;


        public I2cMstStatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((slv0Nack & 0x1) << 0) | ((slv1Nack & 0x1) << 1) | ((slv2Nack & 0x1) << 2) | ((slv3Nack & 0x1) << 3) | ((slv4Nack & 0x1) << 4) | ((lostArb & 0x1) << 5) | ((slv4Done & 0x1) << 6) | ((passThrough & 0x1) << 7); }
        public void setValue(long _value)
        {
            slv0Nack = (int)((_value >> 0) & 0x1);
            slv1Nack = (int)((_value >> 1) & 0x1);
            slv2Nack = (int)((_value >> 2) & 0x1);
            slv3Nack = (int)((_value >> 3) & 0x1);
            slv4Nack = (int)((_value >> 4) & 0x1);
            lostArb = (int)((_value >> 5) & 0x1);
            slv4Done = (int)((_value >> 6) & 0x1);
            passThrough = (int)((_value >> 7) & 0x1);
        }
    }
    class IntPinCfgRegister extends Register
    {
        IntPinCfgRegister(RegisterManager regManager) { super(regManager, 0x37, 1, false); }

        int bypassEn;
        int fsyncIntModeEnable;
        int actlFsync;
        int intAnyRd2Clear;
        int latchIntEn;
        int open;
        int actl;


        public IntPinCfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((bypassEn & 0x1) << 1) | ((fsyncIntModeEnable & 0x1) << 2) | ((actlFsync & 0x1) << 3) | ((intAnyRd2Clear & 0x1) << 4) | ((latchIntEn & 0x1) << 5) | ((open & 0x1) << 6) | ((actl & 0x1) << 7); }
        public void setValue(long _value)
        {
            bypassEn = (int)((_value >> 1) & 0x1);
            fsyncIntModeEnable = (int)((_value >> 2) & 0x1);
            actlFsync = (int)((_value >> 3) & 0x1);
            intAnyRd2Clear = (int)((_value >> 4) & 0x1);
            latchIntEn = (int)((_value >> 5) & 0x1);
            open = (int)((_value >> 6) & 0x1);
            actl = (int)((_value >> 7) & 0x1);
        }
    }
    class IntEnableRegister extends Register
    {
        IntEnableRegister(RegisterManager regManager) { super(regManager, 0x38, 1, false); }

        int RawReadyEnable;
        int fsyncIntEnable;
        int fifoIntEnable;
        int fifoOverflowEnable;
        int womEnable;


        public IntEnableRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((RawReadyEnable & 0x1) << 0) | ((fsyncIntEnable & 0x1) << 2) | ((fifoIntEnable & 0x1) << 3) | ((fifoOverflowEnable & 0x1) << 4) | ((womEnable & 0x1) << 1); }
        public void setValue(long _value)
        {
            RawReadyEnable = (int)((_value >> 0) & 0x1);
            fsyncIntEnable = (int)((_value >> 2) & 0x1);
            fifoIntEnable = (int)((_value >> 3) & 0x1);
            fifoOverflowEnable = (int)((_value >> 4) & 0x1);
            womEnable = (int)((_value >> 1) & 0x1);
        }
    }
    class IntStatusRegister extends Register
    {
        IntStatusRegister(RegisterManager regManager) { super(regManager, 0x3a, 1, false); }

        int rawDataReadyInt;
        int fsyncInt;
        int fifoOverflowInt;
        int womInt;


        public IntStatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((rawDataReadyInt & 0x1) << 0) | ((fsyncInt & 0x1) << 2) | ((fifoOverflowInt & 0x1) << 3) | ((womInt & 0x1) << 1); }
        public void setValue(long _value)
        {
            rawDataReadyInt = (int)((_value >> 0) & 0x1);
            fsyncInt = (int)((_value >> 2) & 0x1);
            fifoOverflowInt = (int)((_value >> 3) & 0x1);
            womInt = (int)((_value >> 1) & 0x1);
        }
    }
    class Accel_xRegister extends Register
    {
        Accel_xRegister(RegisterManager regManager) { super(regManager, 0x3b, 2, true); }

        int value;


        public Accel_xRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Accel_yRegister extends Register
    {
        Accel_yRegister(RegisterManager regManager) { super(regManager, 0x3d, 2, true); }

        int value;


        public Accel_yRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Accel_zRegister extends Register
    {
        Accel_zRegister(RegisterManager regManager) { super(regManager, 0x3f, 2, true); }

        int value;


        public Accel_zRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class TempRegister extends Register
    {
        TempRegister(RegisterManager regManager) { super(regManager, 0x41, 2, true); }

        int value;


        public TempRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_xRegister extends Register
    {
        Gyro_xRegister(RegisterManager regManager) { super(regManager, 0x43, 2, true); }

        int value;


        public Gyro_xRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_yRegister extends Register
    {
        Gyro_yRegister(RegisterManager regManager) { super(regManager, 0x45, 2, true); }

        int value;


        public Gyro_yRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class Gyro_zRegister extends Register
    {
        Gyro_zRegister(RegisterManager regManager) { super(regManager, 0x47, 2, true); }

        int value;


        public Gyro_zRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class ExtSensDataRegister extends Register
    {
        ExtSensDataRegister(RegisterManager regManager) { super(regManager, 0x49, 24, false); }

        int value;


        public ExtSensDataRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x0) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x0);
        }
    }
    class I2cSlv0doRegister extends Register
    {
        I2cSlv0doRegister(RegisterManager regManager) { super(regManager, 0x63, 1, false); }

        int value;


        public I2cSlv0doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv1doRegister extends Register
    {
        I2cSlv1doRegister(RegisterManager regManager) { super(regManager, 0x64, 1, false); }

        int value;


        public I2cSlv1doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv2doRegister extends Register
    {
        I2cSlv2doRegister(RegisterManager regManager) { super(regManager, 0x65, 1, false); }

        int value;


        public I2cSlv2doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cSlv3doRegister extends Register
    {
        I2cSlv3doRegister(RegisterManager regManager) { super(regManager, 0x66, 1, false); }

        int value;


        public I2cSlv3doRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class I2cMstDelayCtrlRegister extends Register
    {
        I2cMstDelayCtrlRegister(RegisterManager regManager) { super(regManager, 0x67, 1, false); }

        int slv0DelayEn;
        int slv1DelayEn;
        int slv2DelayEn;
        int slv3DelayEn;
        int slv4DelayEn;
        int delayEsShadow;


        public I2cMstDelayCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((slv0DelayEn & 0x1) << 0) | ((slv1DelayEn & 0x1) << 1) | ((slv2DelayEn & 0x1) << 2) | ((slv3DelayEn & 0x1) << 3) | ((slv4DelayEn & 0x1) << 4) | ((delayEsShadow & 0x1) << 2); }
        public void setValue(long _value)
        {
            slv0DelayEn = (int)((_value >> 0) & 0x1);
            slv1DelayEn = (int)((_value >> 1) & 0x1);
            slv2DelayEn = (int)((_value >> 2) & 0x1);
            slv3DelayEn = (int)((_value >> 3) & 0x1);
            slv4DelayEn = (int)((_value >> 4) & 0x1);
            delayEsShadow = (int)((_value >> 2) & 0x1);
        }
    }
    class SignalPathResetRegister extends Register
    {
        SignalPathResetRegister(RegisterManager regManager) { super(regManager, 0x68, 1, false); }

        int tempReset;
        int accelReset;
        int gyroReset;


        public SignalPathResetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((tempReset & 0x1) << 0) | ((accelReset & 0x1) << 1) | ((gyroReset & 0x1) << 2); }
        public void setValue(long _value)
        {
            tempReset = (int)((_value >> 0) & 0x1);
            accelReset = (int)((_value >> 1) & 0x1);
            gyroReset = (int)((_value >> 2) & 0x1);
        }
    }
    class AccelIntCtrlRegister extends Register
    {
        AccelIntCtrlRegister(RegisterManager regManager) { super(regManager, 0x69, 1, false); }

        int accelIntelMode;
        int accelIntelEnable;


        public AccelIntCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((accelIntelMode & 0x1) << 6) | ((accelIntelEnable & 0x1) << 7); }
        public void setValue(long _value)
        {
            accelIntelMode = (int)((_value >> 6) & 0x1);
            accelIntelEnable = (int)((_value >> 7) & 0x1);
        }
    }
    class UserCtrlRegister extends Register
    {
        UserCtrlRegister(RegisterManager regManager) { super(regManager, 0x6a, 1, false); }

        int sigConditionReset;
        int i2cMasterReset;
        int fifoReset;
        int i2cIfDisable;
        int i2cMasterEnable;
        int fifoEnable;


        public UserCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((sigConditionReset & 0x1) << 0) | ((i2cMasterReset & 0x1) << 1) | ((fifoReset & 0x1) << 2) | ((i2cIfDisable & 0x1) << 1) | ((i2cMasterEnable & 0x1) << 2) | ((fifoEnable & 0x1) << 3); }
        public void setValue(long _value)
        {
            sigConditionReset = (int)((_value >> 0) & 0x1);
            i2cMasterReset = (int)((_value >> 1) & 0x1);
            fifoReset = (int)((_value >> 2) & 0x1);
            i2cIfDisable = (int)((_value >> 1) & 0x1);
            i2cMasterEnable = (int)((_value >> 2) & 0x1);
            fifoEnable = (int)((_value >> 3) & 0x1);
        }
    }
    class PowerMgmt1Register extends Register
    {
        PowerMgmt1Register(RegisterManager regManager) { super(regManager, 0x6b, 1, false); }

        int clockSel;
        int powerDownPtat;
        int gyroStandby;
        int cycle;
        int sleep;
        int reset;

                public ClockSels getClockSel() { for (ClockSels b : ClockSels.values()) { if(b.getVal() == clockSel) return b; } return ClockSels.values()[0]; }
                public void setClockSel(ClockSels enumVal) { clockSel = enumVal.getVal(); }

        public PowerMgmt1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((clockSel & 0x7) << 0) | ((powerDownPtat & 0x1) << 3) | ((gyroStandby & 0x1) << 4) | ((cycle & 0x1) << 5) | ((sleep & 0x1) << 6) | ((reset & 0x1) << 7); }
        public void setValue(long _value)
        {
            clockSel = (int)((_value >> 0) & 0x7);
            powerDownPtat = (int)((_value >> 3) & 0x1);
            gyroStandby = (int)((_value >> 4) & 0x1);
            cycle = (int)((_value >> 5) & 0x1);
            sleep = (int)((_value >> 6) & 0x1);
            reset = (int)((_value >> 7) & 0x1);
        }
    }
    class PowerMgmt2Register extends Register
    {
        PowerMgmt2Register(RegisterManager regManager) { super(regManager, 0x6c, 1, false); }

        int disableZG;
        int disableYG;
        int disableXG;
        int disableZA;
        int disableYA;
        int disableXA;


        public PowerMgmt2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((disableZG & 0x1) << 0) | ((disableYG & 0x1) << 1) | ((disableXG & 0x1) << 2) | ((disableZA & 0x1) << 3) | ((disableYA & 0x1) << 4) | ((disableXA & 0x1) << 5); }
        public void setValue(long _value)
        {
            disableZG = (int)((_value >> 0) & 0x1);
            disableYG = (int)((_value >> 1) & 0x1);
            disableXG = (int)((_value >> 2) & 0x1);
            disableZA = (int)((_value >> 3) & 0x1);
            disableYA = (int)((_value >> 4) & 0x1);
            disableXA = (int)((_value >> 5) & 0x1);
        }
    }
    class FifoCountRegister extends Register
    {
        FifoCountRegister(RegisterManager regManager) { super(regManager, 0x72, 2, false); }

        int value;


        public FifoCountRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x1FFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x1FFF);
        }
    }
    class FifoRWRegister extends Register
    {
        FifoRWRegister(RegisterManager regManager) { super(regManager, 0x74, 1, false); }

        int value;


        public FifoRWRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x75, 1, false); }

        int value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class XAccelOffsetRegister extends Register
    {
        XAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x77, 2, false); }

        int value;


        public XAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7FFF) << 1); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 1) & 0x7FFF);
        }
    }
    class YAccelOffsetRegister extends Register
    {
        YAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x7a, 2, false); }

        int value;


        public YAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7FFF) << 1); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 1) & 0x7FFF);
        }
    }
    class ZAccelOffsetRegister extends Register
    {
        ZAccelOffsetRegister(RegisterManager regManager) { super(regManager, 0x7d, 2, false); }

        int value;


        public ZAccelOffsetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7FFF) << 1); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 1) & 0x7FFF);
        }
    }
}
