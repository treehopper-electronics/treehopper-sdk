/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.inertial.lis3dh;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Lis3dhRegisters extends RegisterManager
{
    Lis3dhRegisters(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        statusRegAux = new StatusRegAuxRegister(this);
        _registers.add(statusRegAux);
        outAdc1 = new OutAdc1Register(this);
        _registers.add(outAdc1);
        outAdc2 = new OutAdc2Register(this);
        _registers.add(outAdc2);
        outAdc3 = new OutAdc3Register(this);
        _registers.add(outAdc3);
        whoAmI = new WhoAmIRegister(this);
        _registers.add(whoAmI);
        ctrl0 = new Ctrl0Register(this);
        _registers.add(ctrl0);
        tempCfgReg = new TempCfgRegRegister(this);
        _registers.add(tempCfgReg);
        ctrl2 = new Ctrl2Register(this);
        _registers.add(ctrl2);
        ctrl3 = new Ctrl3Register(this);
        _registers.add(ctrl3);
        ctrl4 = new Ctrl4Register(this);
        _registers.add(ctrl4);
        ctrl5 = new Ctrl5Register(this);
        _registers.add(ctrl5);
        ctrl6 = new Ctrl6Register(this);
        _registers.add(ctrl6);
        reference = new ReferenceRegister(this);
        _registers.add(reference);
        status = new StatusRegister(this);
        _registers.add(status);
        fifoCtrl = new FifoCtrlRegister(this);
        _registers.add(fifoCtrl);
        fifoSrc = new FifoSrcRegister(this);
        _registers.add(fifoSrc);
        int1Cfg = new Int1CfgRegister(this);
        _registers.add(int1Cfg);
        int1Src = new Int1SrcRegister(this);
        _registers.add(int1Src);
        int1Threshold = new Int1ThresholdRegister(this);
        _registers.add(int1Threshold);
        int1Duration = new Int1DurationRegister(this);
        _registers.add(int1Duration);
        int2Cfg = new Int2CfgRegister(this);
        _registers.add(int2Cfg);
        int2Src = new Int2SrcRegister(this);
        _registers.add(int2Src);
        int2Threshold = new Int2ThresholdRegister(this);
        _registers.add(int2Threshold);
        int2Duration = new Int2DurationRegister(this);
        _registers.add(int2Duration);
        clickSource = new ClickSourceRegister(this);
        _registers.add(clickSource);
        clickThreshold = new ClickThresholdRegister(this);
        _registers.add(clickThreshold);
        timeLimit = new TimeLimitRegister(this);
        _registers.add(timeLimit);
        timeLatency = new TimeLatencyRegister(this);
        _registers.add(timeLatency);
        timeWindow = new TimeWindowRegister(this);
        _registers.add(timeWindow);
        activationThreshold = new ActivationThresholdRegister(this);
        _registers.add(activationThreshold);
        activationDuration = new ActivationDurationRegister(this);
        _registers.add(activationDuration);
        ctrl1 = new Ctrl1Register(this);
        _registers.add(ctrl1);
        outX = new OutXRegister(this);
        _registers.add(outX);
        outY = new OutYRegister(this);
        _registers.add(outY);
        outZ = new OutZRegister(this);
        _registers.add(outZ);
    }

    StatusRegAuxRegister statusRegAux;
    OutAdc1Register outAdc1;
    OutAdc2Register outAdc2;
    OutAdc3Register outAdc3;
    WhoAmIRegister whoAmI;
    Ctrl0Register ctrl0;
    TempCfgRegRegister tempCfgReg;
    Ctrl2Register ctrl2;
    Ctrl3Register ctrl3;
    Ctrl4Register ctrl4;
    Ctrl5Register ctrl5;
    Ctrl6Register ctrl6;
    ReferenceRegister reference;
    StatusRegister status;
    FifoCtrlRegister fifoCtrl;
    FifoSrcRegister fifoSrc;
    Int1CfgRegister int1Cfg;
    Int1SrcRegister int1Src;
    Int1ThresholdRegister int1Threshold;
    Int1DurationRegister int1Duration;
    Int2CfgRegister int2Cfg;
    Int2SrcRegister int2Src;
    Int2ThresholdRegister int2Threshold;
    Int2DurationRegister int2Duration;
    ClickSourceRegister clickSource;
    ClickThresholdRegister clickThreshold;
    TimeLimitRegister timeLimit;
    TimeLatencyRegister timeLatency;
    TimeWindowRegister timeWindow;
    ActivationThresholdRegister activationThreshold;
    ActivationDurationRegister activationDuration;
    Ctrl1Register ctrl1;
    OutXRegister outX;
    OutYRegister outY;
    OutZRegister outZ;

    class StatusRegAuxRegister extends Register
    {
        StatusRegAuxRegister(RegisterManager regManager) { super(regManager, 0x07, 1, false); }

        int oneAxisDataAvailable;
        int twoAxisDataAvailable;
        int threeAxisDataAvailable;
        int dataAvailable;
        int oneAxisDataOverrun;
        int twoAxisDataOverrun;
        int dataOverrun;


        public StatusRegAuxRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((oneAxisDataAvailable & 0x1) << 0) | ((twoAxisDataAvailable & 0x1) << 1) | ((threeAxisDataAvailable & 0x1) << 2) | ((dataAvailable & 0x1) << 3) | ((oneAxisDataOverrun & 0x1) << 4) | ((twoAxisDataOverrun & 0x1) << 5) | ((dataOverrun & 0x1) << 6); }
        public void setValue(long _value)
        {
            oneAxisDataAvailable = (int)((_value >> 0) & 0x1);
            twoAxisDataAvailable = (int)((_value >> 1) & 0x1);
            threeAxisDataAvailable = (int)((_value >> 2) & 0x1);
            dataAvailable = (int)((_value >> 3) & 0x1);
            oneAxisDataOverrun = (int)((_value >> 4) & 0x1);
            twoAxisDataOverrun = (int)((_value >> 5) & 0x1);
            dataOverrun = (int)((_value >> 6) & 0x1);
        }
    }
    class OutAdc1Register extends Register
    {
        OutAdc1Register(RegisterManager regManager) { super(regManager, 0x08, 2, false); }

        int value;


        public OutAdc1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class OutAdc2Register extends Register
    {
        OutAdc2Register(RegisterManager regManager) { super(regManager, 0x0A, 2, false); }

        int value;


        public OutAdc2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class OutAdc3Register extends Register
    {
        OutAdc3Register(RegisterManager regManager) { super(regManager, 0x0C, 2, false); }

        int value;


        public OutAdc3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 6) & 0x3FF);
        }
    }
    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Ctrl0Register extends Register
    {
        Ctrl0Register(RegisterManager regManager) { super(regManager, 0x1E, 1, false); }

        int sdoPuDisc;

                public SdoPuDiscs getSdoPuDisc() { for (SdoPuDiscs b : SdoPuDiscs.values()) { if(b.getVal() == sdoPuDisc) return b; } return SdoPuDiscs.values()[0]; }
                public void setSdoPuDisc(SdoPuDiscs enumVal) { sdoPuDisc = enumVal.getVal(); }

        public Ctrl0Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((sdoPuDisc & 0xFF) << 0); }
        public void setValue(long _value)
        {
            sdoPuDisc = (int)((_value >> 0) & 0xFF);
        }
    }
    class TempCfgRegRegister extends Register
    {
        TempCfgRegRegister(RegisterManager regManager) { super(regManager, 0x1F, 1, false); }

        int adcEn;
        int tempEn;


        public TempCfgRegRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((adcEn & 0x1) << 7) | ((tempEn & 0x1) << 6); }
        public void setValue(long _value)
        {
            adcEn = (int)((_value >> 7) & 0x1);
            tempEn = (int)((_value >> 6) & 0x1);
        }
    }
    class Ctrl2Register extends Register
    {
        Ctrl2Register(RegisterManager regManager) { super(regManager, 0x21, 1, false); }

        int highPassAoiInt1Enable;
        int highPassAoiInt2Enable;
        int highPassClickEnable;
        int filterDataPassThru;
        int highPassFilterCutoffFrequency;
        int highPassFilterModeSelection;

                public HighPassFilterModeSelections getHighPassFilterModeSelection() { for (HighPassFilterModeSelections b : HighPassFilterModeSelections.values()) { if(b.getVal() == highPassFilterModeSelection) return b; } return HighPassFilterModeSelections.values()[0]; }
                public void setHighPassFilterModeSelection(HighPassFilterModeSelections enumVal) { highPassFilterModeSelection = enumVal.getVal(); }

        public Ctrl2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((highPassAoiInt1Enable & 0x1) << 0) | ((highPassAoiInt2Enable & 0x1) << 1) | ((highPassClickEnable & 0x1) << 2) | ((filterDataPassThru & 0x1) << 3) | ((highPassFilterCutoffFrequency & 0x3) << 4) | ((highPassFilterModeSelection & 0x3) << 6); }
        public void setValue(long _value)
        {
            highPassAoiInt1Enable = (int)((_value >> 0) & 0x1);
            highPassAoiInt2Enable = (int)((_value >> 1) & 0x1);
            highPassClickEnable = (int)((_value >> 2) & 0x1);
            filterDataPassThru = (int)((_value >> 3) & 0x1);
            highPassFilterCutoffFrequency = (int)((_value >> 4) & 0x3);
            highPassFilterModeSelection = (int)((_value >> 6) & 0x3);
        }
    }
    class Ctrl3Register extends Register
    {
        Ctrl3Register(RegisterManager regManager) { super(regManager, 0x22, 1, false); }

        int overrun;
        int fifoWatermark;
        int da321;
        int zyxda;
        int ia2;
        int ia1;
        int click;


        public Ctrl3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((overrun & 0x1) << 1) | ((fifoWatermark & 0x1) << 2) | ((da321 & 0x1) << 3) | ((zyxda & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
        public void setValue(long _value)
        {
            overrun = (int)((_value >> 1) & 0x1);
            fifoWatermark = (int)((_value >> 2) & 0x1);
            da321 = (int)((_value >> 3) & 0x1);
            zyxda = (int)((_value >> 4) & 0x1);
            ia2 = (int)((_value >> 5) & 0x1);
            ia1 = (int)((_value >> 6) & 0x1);
            click = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl4Register extends Register
    {
        Ctrl4Register(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int spiInterfaceMode;
        int selfTestEnable;
        int highResolutionOutput;
        int fullScaleSelection;
        int bigEndian;
        int blockDataUpdate;

                public FullScaleSelections getFullScaleSelection() { for (FullScaleSelections b : FullScaleSelections.values()) { if(b.getVal() == fullScaleSelection) return b; } return FullScaleSelections.values()[0]; }
                public void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = enumVal.getVal(); }

        public Ctrl4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((spiInterfaceMode & 0x1) << 0) | ((selfTestEnable & 0x3) << 1) | ((highResolutionOutput & 0x1) << 3) | ((fullScaleSelection & 0x3) << 4) | ((bigEndian & 0x1) << 6) | ((blockDataUpdate & 0x1) << 7); }
        public void setValue(long _value)
        {
            spiInterfaceMode = (int)((_value >> 0) & 0x1);
            selfTestEnable = (int)((_value >> 1) & 0x3);
            highResolutionOutput = (int)((_value >> 3) & 0x1);
            fullScaleSelection = (int)((_value >> 4) & 0x3);
            bigEndian = (int)((_value >> 6) & 0x1);
            blockDataUpdate = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl5Register extends Register
    {
        Ctrl5Register(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int enable4DInt2;
        int latchInt2;
        int enable4DInt1;
        int latchInt1;
        int fifoEnable;
        int rebootMemoryContent;


        public Ctrl5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((enable4DInt2 & 0x1) << 0) | ((latchInt2 & 0x1) << 1) | ((enable4DInt1 & 0x1) << 2) | ((latchInt1 & 0x1) << 3) | ((fifoEnable & 0x1) << 4) | ((rebootMemoryContent & 0x1) << 5); }
        public void setValue(long _value)
        {
            enable4DInt2 = (int)((_value >> 0) & 0x1);
            latchInt2 = (int)((_value >> 1) & 0x1);
            enable4DInt1 = (int)((_value >> 2) & 0x1);
            latchInt1 = (int)((_value >> 3) & 0x1);
            fifoEnable = (int)((_value >> 4) & 0x1);
            rebootMemoryContent = (int)((_value >> 5) & 0x1);
        }
    }
    class Ctrl6Register extends Register
    {
        Ctrl6Register(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int intPolarity;
        int act;
        int boot;
        int ia2;
        int ia1;
        int click;


        public Ctrl6Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((intPolarity & 0x1) << 1) | ((act & 0x1) << 3) | ((boot & 0x1) << 4) | ((ia2 & 0x1) << 5) | ((ia1 & 0x1) << 6) | ((click & 0x1) << 7); }
        public void setValue(long _value)
        {
            intPolarity = (int)((_value >> 1) & 0x1);
            act = (int)((_value >> 3) & 0x1);
            boot = (int)((_value >> 4) & 0x1);
            ia2 = (int)((_value >> 5) & 0x1);
            ia1 = (int)((_value >> 6) & 0x1);
            click = (int)((_value >> 7) & 0x1);
        }
    }
    class ReferenceRegister extends Register
    {
        ReferenceRegister(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int value;


        public ReferenceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int xda;
        int yda;
        int zda;
        int zyxda;
        int x_or;
        int y_or;
        int z_or;
        int zyx_or;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xda & 0x1) << 0) | ((yda & 0x1) << 1) | ((zda & 0x1) << 2) | ((zyxda & 0x1) << 3) | ((x_or & 0x1) << 4) | ((y_or & 0x1) << 5) | ((z_or & 0x1) << 6) | ((zyx_or & 0x1) << 7); }
        public void setValue(long _value)
        {
            xda = (int)((_value >> 0) & 0x1);
            yda = (int)((_value >> 1) & 0x1);
            zda = (int)((_value >> 2) & 0x1);
            zyxda = (int)((_value >> 3) & 0x1);
            x_or = (int)((_value >> 4) & 0x1);
            y_or = (int)((_value >> 5) & 0x1);
            z_or = (int)((_value >> 6) & 0x1);
            zyx_or = (int)((_value >> 7) & 0x1);
        }
    }
    class FifoCtrlRegister extends Register
    {
        FifoCtrlRegister(RegisterManager regManager) { super(regManager, 0x2E, 1, false); }

        int fifoThreshold;
        int triggerSelection;
        int fifoMode;

                public FifoModes getFifoMode() { for (FifoModes b : FifoModes.values()) { if(b.getVal() == fifoMode) return b; } return FifoModes.values()[0]; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = enumVal.getVal(); }

        public FifoCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((triggerSelection & 0x1) << 5) | ((fifoMode & 0x3) << 6); }
        public void setValue(long _value)
        {
            fifoThreshold = (int)((_value >> 0) & 0x1F);
            triggerSelection = (int)((_value >> 5) & 0x1);
            fifoMode = (int)((_value >> 6) & 0x3);
        }
    }
    class FifoSrcRegister extends Register
    {
        FifoSrcRegister(RegisterManager regManager) { super(regManager, 0x2F, 1, false); }

        int fss;
        int emtpy;
        int overrunFifo;
        int watermark;


        public FifoSrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fss & 0x1F) << 0) | ((emtpy & 0x1) << 5) | ((overrunFifo & 0x1) << 6) | ((watermark & 0x1) << 7); }
        public void setValue(long _value)
        {
            fss = (int)((_value >> 0) & 0x1F);
            emtpy = (int)((_value >> 5) & 0x1);
            overrunFifo = (int)((_value >> 6) & 0x1);
            watermark = (int)((_value >> 7) & 0x1);
        }
    }
    class Int1CfgRegister extends Register
    {
        Int1CfgRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int enableXLowEvent;
        int enableXHighEvent;
        int enableYLowEvent;
        int enableYHighEvent;
        int enableZLowEvent;
        int enableZHighEvent;
        int enable6D;
        int andOrInterruptEvents;


        public Int1CfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            enableXLowEvent = (int)((_value >> 0) & 0x1);
            enableXHighEvent = (int)((_value >> 1) & 0x1);
            enableYLowEvent = (int)((_value >> 2) & 0x1);
            enableYHighEvent = (int)((_value >> 3) & 0x1);
            enableZLowEvent = (int)((_value >> 4) & 0x1);
            enableZHighEvent = (int)((_value >> 5) & 0x1);
            enable6D = (int)((_value >> 6) & 0x1);
            andOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class Int1SrcRegister extends Register
    {
        Int1SrcRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int interruptActive;


        public Int1SrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            xLow = (int)((_value >> 0) & 0x1);
            xHigh = (int)((_value >> 1) & 0x1);
            yLow = (int)((_value >> 2) & 0x1);
            yHigh = (int)((_value >> 3) & 0x1);
            zLow = (int)((_value >> 4) & 0x1);
            zHigh = (int)((_value >> 5) & 0x1);
            interruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class Int1ThresholdRegister extends Register
    {
        Int1ThresholdRegister(RegisterManager regManager) { super(regManager, 0x32, 1, false); }

        int value;


        public Int1ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int1DurationRegister extends Register
    {
        Int1DurationRegister(RegisterManager regManager) { super(regManager, 0x33, 1, false); }

        int value;


        public Int1DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int2CfgRegister extends Register
    {
        Int2CfgRegister(RegisterManager regManager) { super(regManager, 0x34, 1, false); }

        int enableXLowEvent;
        int enableXHighEvent;
        int enableYLowEvent;
        int enableYHighEvent;
        int enableZLowEvent;
        int enableZHighEvent;
        int enable6D;
        int andOrInterruptEvents;


        public Int2CfgRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((enableXLowEvent & 0x1) << 0) | ((enableXHighEvent & 0x1) << 1) | ((enableYLowEvent & 0x1) << 2) | ((enableYHighEvent & 0x1) << 3) | ((enableZLowEvent & 0x1) << 4) | ((enableZHighEvent & 0x1) << 5) | ((enable6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            enableXLowEvent = (int)((_value >> 0) & 0x1);
            enableXHighEvent = (int)((_value >> 1) & 0x1);
            enableYLowEvent = (int)((_value >> 2) & 0x1);
            enableYHighEvent = (int)((_value >> 3) & 0x1);
            enableZLowEvent = (int)((_value >> 4) & 0x1);
            enableZHighEvent = (int)((_value >> 5) & 0x1);
            enable6D = (int)((_value >> 6) & 0x1);
            andOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class Int2SrcRegister extends Register
    {
        Int2SrcRegister(RegisterManager regManager) { super(regManager, 0x35, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int interruptActive;


        public Int2SrcRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            xLow = (int)((_value >> 0) & 0x1);
            xHigh = (int)((_value >> 1) & 0x1);
            yLow = (int)((_value >> 2) & 0x1);
            yHigh = (int)((_value >> 3) & 0x1);
            zLow = (int)((_value >> 4) & 0x1);
            zHigh = (int)((_value >> 5) & 0x1);
            interruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class Int2ThresholdRegister extends Register
    {
        Int2ThresholdRegister(RegisterManager regManager) { super(regManager, 0x36, 1, false); }

        int value;


        public Int2ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class Int2DurationRegister extends Register
    {
        Int2DurationRegister(RegisterManager regManager) { super(regManager, 0x37, 1, false); }

        int value;


        public Int2DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class ClickSourceRegister extends Register
    {
        ClickSourceRegister(RegisterManager regManager) { super(regManager, 0x39, 1, false); }

        int x;
        int y;
        int z;
        int sign;
        int singleClickEnable;
        int doubleClickEnable;
        int interruptActive;


        public ClickSourceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEnable & 0x1) << 4) | ((doubleClickEnable & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            x = (int)((_value >> 0) & 0x1);
            y = (int)((_value >> 1) & 0x1);
            z = (int)((_value >> 2) & 0x1);
            sign = (int)((_value >> 3) & 0x1);
            singleClickEnable = (int)((_value >> 4) & 0x1);
            doubleClickEnable = (int)((_value >> 5) & 0x1);
            interruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class ClickThresholdRegister extends Register
    {
        ClickThresholdRegister(RegisterManager regManager) { super(regManager, 0x3A, 1, false); }

        int threshold;
        int lirClick;


        public ClickThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((threshold & 0x7F) << 0) | ((lirClick & 0x1) << 7); }
        public void setValue(long _value)
        {
            threshold = (int)((_value >> 0) & 0x7F);
            lirClick = (int)((_value >> 7) & 0x1);
        }
    }
    class TimeLimitRegister extends Register
    {
        TimeLimitRegister(RegisterManager regManager) { super(regManager, 0x3B, 1, false); }

        int value;


        public TimeLimitRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class TimeLatencyRegister extends Register
    {
        TimeLatencyRegister(RegisterManager regManager) { super(regManager, 0x3C, 10, false); }

        int value;


        public TimeLatencyRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7FFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7FFF);
        }
    }
    class TimeWindowRegister extends Register
    {
        TimeWindowRegister(RegisterManager regManager) { super(regManager, 0x3D, 1, false); }

        int value;


        public TimeWindowRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ActivationThresholdRegister extends Register
    {
        ActivationThresholdRegister(RegisterManager regManager) { super(regManager, 0x3E, 1, false); }

        int value;


        public ActivationThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class ActivationDurationRegister extends Register
    {
        ActivationDurationRegister(RegisterManager regManager) { super(regManager, 0x3F, 1, false); }

        int value;


        public ActivationDurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Ctrl1Register extends Register
    {
        Ctrl1Register(RegisterManager regManager) { super(regManager, 0xA0, 1, false); }

        int xAxisEnable;
        int yAxisEnable;
        int zAxisEnable;
        int lowPowerEnable;
        int outputDataRate;

                public OutputDataRates getOutputDataRate() { for (OutputDataRates b : OutputDataRates.values()) { if(b.getVal() == outputDataRate) return b; } return OutputDataRates.values()[0]; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = enumVal.getVal(); }

        public Ctrl1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xAxisEnable & 0x1) << 0) | ((yAxisEnable & 0x1) << 1) | ((zAxisEnable & 0x1) << 2) | ((lowPowerEnable & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
        public void setValue(long _value)
        {
            xAxisEnable = (int)((_value >> 0) & 0x1);
            yAxisEnable = (int)((_value >> 1) & 0x1);
            zAxisEnable = (int)((_value >> 2) & 0x1);
            lowPowerEnable = (int)((_value >> 3) & 0x1);
            outputDataRate = (int)((_value >> 4) & 0xF);
        }
    }
    class OutXRegister extends Register
    {
        OutXRegister(RegisterManager regManager) { super(regManager, 0xA8, 2, false); }

        int value;


        public OutXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
    class OutYRegister extends Register
    {
        OutYRegister(RegisterManager regManager) { super(regManager, 0xAA, 2, false); }

        int value;


        public OutYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
    class OutZRegister extends Register
    {
        OutZRegister(RegisterManager regManager) { super(regManager, 0xAC, 2, false); }

        int value;


        public OutZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x3FF) << 6); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 6) & 0x3FF) << (32 - 10)) >> (32 - 10);
        }
    }
}
