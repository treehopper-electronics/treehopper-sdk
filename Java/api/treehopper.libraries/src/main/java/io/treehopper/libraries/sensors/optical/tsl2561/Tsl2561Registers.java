/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.optical.tsl2561;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Tsl2561Registers extends RegisterManager
{
    Tsl2561Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        control = new ControlRegister(this);
        _registers.add(control);
        timing = new TimingRegister(this);
        _registers.add(timing);
        interruptThresholdLow = new InterruptThresholdLowRegister(this);
        _registers.add(interruptThresholdLow);
        interruptThresholdHigh = new InterruptThresholdHighRegister(this);
        _registers.add(interruptThresholdHigh);
        interruptControl = new InterruptControlRegister(this);
        _registers.add(interruptControl);
        id = new IdRegister(this);
        _registers.add(id);
        data0 = new Data0Register(this);
        _registers.add(data0);
        data1 = new Data1Register(this);
        _registers.add(data1);
    }

    ControlRegister control;
    TimingRegister timing;
    InterruptThresholdLowRegister interruptThresholdLow;
    InterruptThresholdHighRegister interruptThresholdHigh;
    InterruptControlRegister interruptControl;
    IdRegister id;
    Data0Register data0;
    Data1Register data1;

    class ControlRegister extends Register
    {
        ControlRegister(RegisterManager regManager) { super(regManager, 0x80, 1, false); }

        int power;

                public Powers getPower() { for (Powers b : Powers.values()) { if(b.getVal() == power) return b; } return Powers.values()[0]; }
                public void setPower(Powers enumVal) { power = enumVal.getVal(); }

        public ControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((power & 0x3) << 0); }
        public void setValue(long _value)
        {
            power = (int)((_value >> 0) & 0x3);
        }
    }
    class TimingRegister extends Register
    {
        TimingRegister(RegisterManager regManager) { super(regManager, 0x81, 1, false); }

        int integrationTiming;
        int manual;
        int gain;

                public IntegrationTimings getIntegrationTiming() { for (IntegrationTimings b : IntegrationTimings.values()) { if(b.getVal() == integrationTiming) return b; } return IntegrationTimings.values()[0]; }
                public void setIntegrationTiming(IntegrationTimings enumVal) { integrationTiming = enumVal.getVal(); }

        public TimingRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((integrationTiming & 0x3) << 0) | ((manual & 0x1) << 3) | ((gain & 0x1) << 4); }
        public void setValue(long _value)
        {
            integrationTiming = (int)((_value >> 0) & 0x3);
            manual = (int)((_value >> 3) & 0x1);
            gain = (int)((_value >> 4) & 0x1);
        }
    }
    class InterruptThresholdLowRegister extends Register
    {
        InterruptThresholdLowRegister(RegisterManager regManager) { super(regManager, 0x82, 2, false); }

        int value;


        public InterruptThresholdLowRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class InterruptThresholdHighRegister extends Register
    {
        InterruptThresholdHighRegister(RegisterManager regManager) { super(regManager, 0x84, 2, false); }

        int value;


        public InterruptThresholdHighRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class InterruptControlRegister extends Register
    {
        InterruptControlRegister(RegisterManager regManager) { super(regManager, 0x86, 1, false); }

        int persist;
        int intrControlSelect;

                public IntrControlSelects getIntrControlSelect() { for (IntrControlSelects b : IntrControlSelects.values()) { if(b.getVal() == intrControlSelect) return b; } return IntrControlSelects.values()[0]; }
                public void setIntrControlSelect(IntrControlSelects enumVal) { intrControlSelect = enumVal.getVal(); }

        public InterruptControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((persist & 0xF) << 0) | ((intrControlSelect & 0x3) << 4); }
        public void setValue(long _value)
        {
            persist = (int)((_value >> 0) & 0xF);
            intrControlSelect = (int)((_value >> 4) & 0x3);
        }
    }
    class IdRegister extends Register
    {
        IdRegister(RegisterManager regManager) { super(regManager, 0x8A, 1, false); }

        int revNumber;
        int partNumber;


        public IdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((revNumber & 0xF) << 0) | ((partNumber & 0xF) << 4); }
        public void setValue(long _value)
        {
            revNumber = (int)((_value >> 0) & 0xF);
            partNumber = (int)((_value >> 4) & 0xF);
        }
    }
    class Data0Register extends Register
    {
        Data0Register(RegisterManager regManager) { super(regManager, 0x8C, 2, false); }

        int value;


        public Data0Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class Data1Register extends Register
    {
        Data1Register(RegisterManager regManager) { super(regManager, 0x8E, 2, false); }

        int value;


        public Data1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
}
