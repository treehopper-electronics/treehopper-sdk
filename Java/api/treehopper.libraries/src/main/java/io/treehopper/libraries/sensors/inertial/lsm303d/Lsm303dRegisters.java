/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.inertial.lsm303d;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Lsm303dRegisters extends RegisterManager
{
    Lsm303dRegisters(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        tempOut = new TempOutRegister(this);
        _registers.add(tempOut);
        status = new StatusRegister(this);
        _registers.add(status);
        outX = new OutXRegister(this);
        _registers.add(outX);
        outY = new OutYRegister(this);
        _registers.add(outY);
        outZ = new OutZRegister(this);
        _registers.add(outZ);
        whoAmI = new WhoAmIRegister(this);
        _registers.add(whoAmI);
        intCtrl = new IntCtrlRegister(this);
        _registers.add(intCtrl);
        intSource = new IntSourceRegister(this);
        _registers.add(intSource);
        intThreshold = new IntThresholdRegister(this);
        _registers.add(intThreshold);
        offsetX = new OffsetXRegister(this);
        _registers.add(offsetX);
        offsetY = new OffsetYRegister(this);
        _registers.add(offsetY);
        offsetZ = new OffsetZRegister(this);
        _registers.add(offsetZ);
        referenceX = new ReferenceXRegister(this);
        _registers.add(referenceX);
        referenceY = new ReferenceYRegister(this);
        _registers.add(referenceY);
        referenceZ = new ReferenceZRegister(this);
        _registers.add(referenceZ);
        ctrl0 = new Ctrl0Register(this);
        _registers.add(ctrl0);
        ctrl1 = new Ctrl1Register(this);
        _registers.add(ctrl1);
        ctrl2 = new Ctrl2Register(this);
        _registers.add(ctrl2);
        ctrl3 = new Ctrl3Register(this);
        _registers.add(ctrl3);
        ctrl4 = new Ctrl4Register(this);
        _registers.add(ctrl4);
        ctrl5 = new Ctrl5Register(this);
        _registers.add(ctrl5);
        ctrl6 = new Ctrl6Register(this);
        _registers.add(ctrl6);
        ctrl7 = new Ctrl7Register(this);
        _registers.add(ctrl7);
        statusA = new StatusARegister(this);
        _registers.add(statusA);
        outAccelX = new OutAccelXRegister(this);
        _registers.add(outAccelX);
        outAccelY = new OutAccelYRegister(this);
        _registers.add(outAccelY);
        outAccelZ = new OutAccelZRegister(this);
        _registers.add(outAccelZ);
        fifoControl = new FifoControlRegister(this);
        _registers.add(fifoControl);
        fifoSource = new FifoSourceRegister(this);
        _registers.add(fifoSource);
        inertialIntGen1Config = new InertialIntGen1ConfigRegister(this);
        _registers.add(inertialIntGen1Config);
        inertialIntGen1Status = new InertialIntGen1StatusRegister(this);
        _registers.add(inertialIntGen1Status);
        inertialIntGen1Threshold = new InertialIntGen1ThresholdRegister(this);
        _registers.add(inertialIntGen1Threshold);
        inertialIntGen1Duration = new InertialIntGen1DurationRegister(this);
        _registers.add(inertialIntGen1Duration);
        inertialIntGen2Config = new InertialIntGen2ConfigRegister(this);
        _registers.add(inertialIntGen2Config);
        inertialIntGen2Status = new InertialIntGen2StatusRegister(this);
        _registers.add(inertialIntGen2Status);
        inertialIntGen2Threshold = new InertialIntGen2ThresholdRegister(this);
        _registers.add(inertialIntGen2Threshold);
        inertialIntGen2Duration = new InertialIntGen2DurationRegister(this);
        _registers.add(inertialIntGen2Duration);
        clickConfig = new ClickConfigRegister(this);
        _registers.add(clickConfig);
        clickSource = new ClickSourceRegister(this);
        _registers.add(clickSource);
        clickThreshold = new ClickThresholdRegister(this);
        _registers.add(clickThreshold);
        timeLimit = new TimeLimitRegister(this);
        _registers.add(timeLimit);
        timeLatency = new TimeLatencyRegister(this);
        _registers.add(timeLatency);
        timeWindow = new TimeWindowRegister(this);
        _registers.add(timeWindow);
        activationThreshold = new ActivationThresholdRegister(this);
        _registers.add(activationThreshold);
        activationDuration = new ActivationDurationRegister(this);
        _registers.add(activationDuration);
    }

    TempOutRegister tempOut;
    StatusRegister status;
    OutXRegister outX;
    OutYRegister outY;
    OutZRegister outZ;
    WhoAmIRegister whoAmI;
    IntCtrlRegister intCtrl;
    IntSourceRegister intSource;
    IntThresholdRegister intThreshold;
    OffsetXRegister offsetX;
    OffsetYRegister offsetY;
    OffsetZRegister offsetZ;
    ReferenceXRegister referenceX;
    ReferenceYRegister referenceY;
    ReferenceZRegister referenceZ;
    Ctrl0Register ctrl0;
    Ctrl1Register ctrl1;
    Ctrl2Register ctrl2;
    Ctrl3Register ctrl3;
    Ctrl4Register ctrl4;
    Ctrl5Register ctrl5;
    Ctrl6Register ctrl6;
    Ctrl7Register ctrl7;
    StatusARegister statusA;
    OutAccelXRegister outAccelX;
    OutAccelYRegister outAccelY;
    OutAccelZRegister outAccelZ;
    FifoControlRegister fifoControl;
    FifoSourceRegister fifoSource;
    InertialIntGen1ConfigRegister inertialIntGen1Config;
    InertialIntGen1StatusRegister inertialIntGen1Status;
    InertialIntGen1ThresholdRegister inertialIntGen1Threshold;
    InertialIntGen1DurationRegister inertialIntGen1Duration;
    InertialIntGen2ConfigRegister inertialIntGen2Config;
    InertialIntGen2StatusRegister inertialIntGen2Status;
    InertialIntGen2ThresholdRegister inertialIntGen2Threshold;
    InertialIntGen2DurationRegister inertialIntGen2Duration;
    ClickConfigRegister clickConfig;
    ClickSourceRegister clickSource;
    ClickThresholdRegister clickThreshold;
    TimeLimitRegister timeLimit;
    TimeLatencyRegister timeLatency;
    TimeWindowRegister timeWindow;
    ActivationThresholdRegister activationThreshold;
    ActivationDurationRegister activationDuration;

    class TempOutRegister extends Register
    {
        TempOutRegister(RegisterManager regManager) { super(regManager, 0x05, 2, false); }

        int value;


        public TempOutRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFF) << (32 - 12)) >> (32 - 12);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0x07, 1, false); }

        int xDataAvailable;
        int yDataAvailable;
        int zDataAvailable;
        int zyxDataAvailable;
        int xDataOverrun;
        int yDataOverrun;
        int zDataOverrun;
        int zyxDataOverrun;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xDataAvailable & 0x1) << 0) | ((yDataAvailable & 0x1) << 1) | ((zDataAvailable & 0x1) << 2) | ((zyxDataAvailable & 0x1) << 3) | ((xDataOverrun & 0x1) << 4) | ((yDataOverrun & 0x1) << 5) | ((zDataOverrun & 0x1) << 6) | ((zyxDataOverrun & 0x1) << 7); }
        public void setValue(long _value)
        {
            xDataAvailable = (int)((_value >> 0) & 0x1);
            yDataAvailable = (int)((_value >> 1) & 0x1);
            zDataAvailable = (int)((_value >> 2) & 0x1);
            zyxDataAvailable = (int)((_value >> 3) & 0x1);
            xDataOverrun = (int)((_value >> 4) & 0x1);
            yDataOverrun = (int)((_value >> 5) & 0x1);
            zDataOverrun = (int)((_value >> 6) & 0x1);
            zyxDataOverrun = (int)((_value >> 7) & 0x1);
        }
    }
    class OutXRegister extends Register
    {
        OutXRegister(RegisterManager regManager) { super(regManager, 0x08, 2, false); }

        int value;


        public OutXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class OutYRegister extends Register
    {
        OutYRegister(RegisterManager regManager) { super(regManager, 0x0A, 2, false); }

        int value;


        public OutYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class OutZRegister extends Register
    {
        OutZRegister(RegisterManager regManager) { super(regManager, 0x0C, 2, false); }

        int value;


        public OutZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class WhoAmIRegister extends Register
    {
        WhoAmIRegister(RegisterManager regManager) { super(regManager, 0x0f, 1, false); }

        int value;


        public WhoAmIRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class IntCtrlRegister extends Register
    {
        IntCtrlRegister(RegisterManager regManager) { super(regManager, 0x12, 1, false); }

        int magInterruptEnable;
        int enable4D;
        int latchInterruptRequest;
        int interruptPolarity;
        int interruptPinPushPull;
        int zInterruptEnable;
        int yInterruptEnable;
        int xInterruptEnable;


        public IntCtrlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((magInterruptEnable & 0x1) << 0) | ((enable4D & 0x1) << 1) | ((latchInterruptRequest & 0x1) << 2) | ((interruptPolarity & 0x1) << 3) | ((interruptPinPushPull & 0x1) << 4) | ((zInterruptEnable & 0x1) << 5) | ((yInterruptEnable & 0x1) << 6) | ((xInterruptEnable & 0x1) << 7); }
        public void setValue(long _value)
        {
            magInterruptEnable = (int)((_value >> 0) & 0x1);
            enable4D = (int)((_value >> 1) & 0x1);
            latchInterruptRequest = (int)((_value >> 2) & 0x1);
            interruptPolarity = (int)((_value >> 3) & 0x1);
            interruptPinPushPull = (int)((_value >> 4) & 0x1);
            zInterruptEnable = (int)((_value >> 5) & 0x1);
            yInterruptEnable = (int)((_value >> 6) & 0x1);
            xInterruptEnable = (int)((_value >> 7) & 0x1);
        }
    }
    class IntSourceRegister extends Register
    {
        IntSourceRegister(RegisterManager regManager) { super(regManager, 0x13, 1, false); }

        int mint;
        int measurementRangeOverflow;
        int negativeThresholdZ;
        int negativeThresholdY;
        int negativeThresholdX;
        int positiveThresholdZ;
        int positiveThresholdY;
        int positiveThresholdX;


        public IntSourceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((mint & 0x1) << 0) | ((measurementRangeOverflow & 0x1) << 1) | ((negativeThresholdZ & 0x1) << 2) | ((negativeThresholdY & 0x1) << 3) | ((negativeThresholdX & 0x1) << 4) | ((positiveThresholdZ & 0x1) << 5) | ((positiveThresholdY & 0x1) << 6) | ((positiveThresholdX & 0x1) << 7); }
        public void setValue(long _value)
        {
            mint = (int)((_value >> 0) & 0x1);
            measurementRangeOverflow = (int)((_value >> 1) & 0x1);
            negativeThresholdZ = (int)((_value >> 2) & 0x1);
            negativeThresholdY = (int)((_value >> 3) & 0x1);
            negativeThresholdX = (int)((_value >> 4) & 0x1);
            positiveThresholdZ = (int)((_value >> 5) & 0x1);
            positiveThresholdY = (int)((_value >> 6) & 0x1);
            positiveThresholdX = (int)((_value >> 7) & 0x1);
        }
    }
    class IntThresholdRegister extends Register
    {
        IntThresholdRegister(RegisterManager regManager) { super(regManager, 0x14, 2, false); }

        int value;


        public IntThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OffsetXRegister extends Register
    {
        OffsetXRegister(RegisterManager regManager) { super(regManager, 0x16, 2, false); }

        int value;


        public OffsetXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OffsetYRegister extends Register
    {
        OffsetYRegister(RegisterManager regManager) { super(regManager, 0x18, 2, false); }

        int value;


        public OffsetYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OffsetZRegister extends Register
    {
        OffsetZRegister(RegisterManager regManager) { super(regManager, 0x1A, 2, false); }

        int value;


        public OffsetZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class ReferenceXRegister extends Register
    {
        ReferenceXRegister(RegisterManager regManager) { super(regManager, 0x1c, 1, false); }

        int value;


        public ReferenceXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ReferenceYRegister extends Register
    {
        ReferenceYRegister(RegisterManager regManager) { super(regManager, 0x1d, 1, false); }

        int value;


        public ReferenceYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ReferenceZRegister extends Register
    {
        ReferenceZRegister(RegisterManager regManager) { super(regManager, 0x1E, 1, false); }

        int value;


        public ReferenceZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class Ctrl0Register extends Register
    {
        Ctrl0Register(RegisterManager regManager) { super(regManager, 0x1f, 1, false); }

        int hpis2;
        int hpis1;
        int hpClick;
        int fifoThresholdEnable;
        int fifoEnable;
        int boot;


        public Ctrl0Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((hpis2 & 0x1) << 0) | ((hpis1 & 0x1) << 1) | ((hpClick & 0x1) << 2) | ((fifoThresholdEnable & 0x1) << 5) | ((fifoEnable & 0x1) << 6) | ((boot & 0x1) << 7); }
        public void setValue(long _value)
        {
            hpis2 = (int)((_value >> 0) & 0x1);
            hpis1 = (int)((_value >> 1) & 0x1);
            hpClick = (int)((_value >> 2) & 0x1);
            fifoThresholdEnable = (int)((_value >> 5) & 0x1);
            fifoEnable = (int)((_value >> 6) & 0x1);
            boot = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl1Register extends Register
    {
        Ctrl1Register(RegisterManager regManager) { super(regManager, 0x20, 1, false); }

        int xEnable;
        int yEnable;
        int zEnable;
        int blockDataUpdate;
        int outputDataRate;

                public OutputDataRates getOutputDataRate() { for (OutputDataRates b : OutputDataRates.values()) { if(b.getVal() == outputDataRate) return b; } return OutputDataRates.values()[0]; }
                public void setOutputDataRate(OutputDataRates enumVal) { outputDataRate = enumVal.getVal(); }

        public Ctrl1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xEnable & 0x1) << 0) | ((yEnable & 0x1) << 1) | ((zEnable & 0x1) << 2) | ((blockDataUpdate & 0x1) << 3) | ((outputDataRate & 0xF) << 4); }
        public void setValue(long _value)
        {
            xEnable = (int)((_value >> 0) & 0x1);
            yEnable = (int)((_value >> 1) & 0x1);
            zEnable = (int)((_value >> 2) & 0x1);
            blockDataUpdate = (int)((_value >> 3) & 0x1);
            outputDataRate = (int)((_value >> 4) & 0xF);
        }
    }
    class Ctrl2Register extends Register
    {
        Ctrl2Register(RegisterManager regManager) { super(regManager, 0x21, 1, false); }

        int spiModeSelection;
        int accelerationSelfTest;
        int fullScaleSelection;
        int antiAliasFilterBandwidth;

                public FullScaleSelections getFullScaleSelection() { for (FullScaleSelections b : FullScaleSelections.values()) { if(b.getVal() == fullScaleSelection) return b; } return FullScaleSelections.values()[0]; }
                public void setFullScaleSelection(FullScaleSelections enumVal) { fullScaleSelection = enumVal.getVal(); }
                public AntiAliasFilterBandwidths getAntiAliasFilterBandwidth() { for (AntiAliasFilterBandwidths b : AntiAliasFilterBandwidths.values()) { if(b.getVal() == antiAliasFilterBandwidth) return b; } return AntiAliasFilterBandwidths.values()[0]; }
                public void setAntiAliasFilterBandwidth(AntiAliasFilterBandwidths enumVal) { antiAliasFilterBandwidth = enumVal.getVal(); }

        public Ctrl2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((spiModeSelection & 0x1) << 0) | ((accelerationSelfTest & 0x1) << 1) | ((fullScaleSelection & 0x7) << 3) | ((antiAliasFilterBandwidth & 0x3) << 6); }
        public void setValue(long _value)
        {
            spiModeSelection = (int)((_value >> 0) & 0x1);
            accelerationSelfTest = (int)((_value >> 1) & 0x1);
            fullScaleSelection = (int)((_value >> 3) & 0x7);
            antiAliasFilterBandwidth = (int)((_value >> 6) & 0x3);
        }
    }
    class Ctrl3Register extends Register
    {
        Ctrl3Register(RegisterManager regManager) { super(regManager, 0x22, 1, false); }

        int fifoEmptyOnInt1;
        int magReadyOnInt1;
        int accelReadyOnInt1;
        int magGenOnInt1;
        int inertialGen2OnInt1;
        int inertialGen1OnInt1;
        int clickGenOnInt1;
        int bootOnInt1;


        public Ctrl3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoEmptyOnInt1 & 0x1) << 0) | ((magReadyOnInt1 & 0x1) << 1) | ((accelReadyOnInt1 & 0x1) << 2) | ((magGenOnInt1 & 0x1) << 3) | ((inertialGen2OnInt1 & 0x1) << 4) | ((inertialGen1OnInt1 & 0x1) << 5) | ((clickGenOnInt1 & 0x1) << 6) | ((bootOnInt1 & 0x1) << 7); }
        public void setValue(long _value)
        {
            fifoEmptyOnInt1 = (int)((_value >> 0) & 0x1);
            magReadyOnInt1 = (int)((_value >> 1) & 0x1);
            accelReadyOnInt1 = (int)((_value >> 2) & 0x1);
            magGenOnInt1 = (int)((_value >> 3) & 0x1);
            inertialGen2OnInt1 = (int)((_value >> 4) & 0x1);
            inertialGen1OnInt1 = (int)((_value >> 5) & 0x1);
            clickGenOnInt1 = (int)((_value >> 6) & 0x1);
            bootOnInt1 = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl4Register extends Register
    {
        Ctrl4Register(RegisterManager regManager) { super(regManager, 0x23, 1, false); }

        int fifoThresholdOnInt2;
        int fifoOverrunOnInt2;
        int magDataReadyOnInt2;
        int accelDataReadyOnInt2;
        int magIntOnInt2;
        int inertialGen2OnInt2;
        int inertialGen1OnInt2;
        int clickGenOnInt2;


        public Ctrl4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoThresholdOnInt2 & 0x1) << 0) | ((fifoOverrunOnInt2 & 0x1) << 1) | ((magDataReadyOnInt2 & 0x1) << 2) | ((accelDataReadyOnInt2 & 0x1) << 3) | ((magIntOnInt2 & 0x1) << 4) | ((inertialGen2OnInt2 & 0x1) << 5) | ((inertialGen1OnInt2 & 0x1) << 6) | ((clickGenOnInt2 & 0x1) << 7); }
        public void setValue(long _value)
        {
            fifoThresholdOnInt2 = (int)((_value >> 0) & 0x1);
            fifoOverrunOnInt2 = (int)((_value >> 1) & 0x1);
            magDataReadyOnInt2 = (int)((_value >> 2) & 0x1);
            accelDataReadyOnInt2 = (int)((_value >> 3) & 0x1);
            magIntOnInt2 = (int)((_value >> 4) & 0x1);
            inertialGen2OnInt2 = (int)((_value >> 5) & 0x1);
            inertialGen1OnInt2 = (int)((_value >> 6) & 0x1);
            clickGenOnInt2 = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl5Register extends Register
    {
        Ctrl5Register(RegisterManager regManager) { super(regManager, 0x24, 1, false); }

        int latchIntOnInt1;
        int latchIntOnInt2;
        int magDataRate;
        int magResolution;
        int tempEnable;

                public MagDataRates getMagDataRate() { for (MagDataRates b : MagDataRates.values()) { if(b.getVal() == magDataRate) return b; } return MagDataRates.values()[0]; }
                public void setMagDataRate(MagDataRates enumVal) { magDataRate = enumVal.getVal(); }
                public MagResolutions getMagResolution() { for (MagResolutions b : MagResolutions.values()) { if(b.getVal() == magResolution) return b; } return MagResolutions.values()[0]; }
                public void setMagResolution(MagResolutions enumVal) { magResolution = enumVal.getVal(); }

        public Ctrl5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((latchIntOnInt1 & 0x1) << 0) | ((latchIntOnInt2 & 0x1) << 1) | ((magDataRate & 0x7) << 2) | ((magResolution & 0x3) << 5) | ((tempEnable & 0x1) << 7); }
        public void setValue(long _value)
        {
            latchIntOnInt1 = (int)((_value >> 0) & 0x1);
            latchIntOnInt2 = (int)((_value >> 1) & 0x1);
            magDataRate = (int)((_value >> 2) & 0x7);
            magResolution = (int)((_value >> 5) & 0x3);
            tempEnable = (int)((_value >> 7) & 0x1);
        }
    }
    class Ctrl6Register extends Register
    {
        Ctrl6Register(RegisterManager regManager) { super(regManager, 0x25, 1, false); }

        int magFullScaleSelection;

                public MagFullScaleSelections getMagFullScaleSelection() { for (MagFullScaleSelections b : MagFullScaleSelections.values()) { if(b.getVal() == magFullScaleSelection) return b; } return MagFullScaleSelections.values()[0]; }
                public void setMagFullScaleSelection(MagFullScaleSelections enumVal) { magFullScaleSelection = enumVal.getVal(); }

        public Ctrl6Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((magFullScaleSelection & 0x3) << 5); }
        public void setValue(long _value)
        {
            magFullScaleSelection = (int)((_value >> 5) & 0x3);
        }
    }
    class Ctrl7Register extends Register
    {
        Ctrl7Register(RegisterManager regManager) { super(regManager, 0x26, 1, false); }

        int magSensorMode;
        int magLowPowerMode;
        int tempOnly;
        int filteredAccelData;
        int accelhighPassMode;

                public MagSensorModes getMagSensorMode() { for (MagSensorModes b : MagSensorModes.values()) { if(b.getVal() == magSensorMode) return b; } return MagSensorModes.values()[0]; }
                public void setMagSensorMode(MagSensorModes enumVal) { magSensorMode = enumVal.getVal(); }
                public AccelhighPassModes getAccelhighPassMode() { for (AccelhighPassModes b : AccelhighPassModes.values()) { if(b.getVal() == accelhighPassMode) return b; } return AccelhighPassModes.values()[0]; }
                public void setAccelhighPassMode(AccelhighPassModes enumVal) { accelhighPassMode = enumVal.getVal(); }

        public Ctrl7Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((magSensorMode & 0x3) << 0) | ((magLowPowerMode & 0x1) << 2) | ((tempOnly & 0x1) << 4) | ((filteredAccelData & 0x1) << 5) | ((accelhighPassMode & 0x3) << 6); }
        public void setValue(long _value)
        {
            magSensorMode = (int)((_value >> 0) & 0x3);
            magLowPowerMode = (int)((_value >> 2) & 0x1);
            tempOnly = (int)((_value >> 4) & 0x1);
            filteredAccelData = (int)((_value >> 5) & 0x1);
            accelhighPassMode = (int)((_value >> 6) & 0x3);
        }
    }
    class StatusARegister extends Register
    {
        StatusARegister(RegisterManager regManager) { super(regManager, 0x27, 1, false); }

        int accelXAvailable;
        int accelYAvailable;
        int accelZAvailable;
        int accelXYZAvailable;
        int accelXOverrun;
        int accelYOverrun;
        int accelZOverrun;
        int accelXYZOverrun;


        public StatusARegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((accelXAvailable & 0x1) << 0) | ((accelYAvailable & 0x1) << 1) | ((accelZAvailable & 0x1) << 2) | ((accelXYZAvailable & 0x1) << 3) | ((accelXOverrun & 0x1) << 4) | ((accelYOverrun & 0x1) << 5) | ((accelZOverrun & 0x1) << 6) | ((accelXYZOverrun & 0x1) << 7); }
        public void setValue(long _value)
        {
            accelXAvailable = (int)((_value >> 0) & 0x1);
            accelYAvailable = (int)((_value >> 1) & 0x1);
            accelZAvailable = (int)((_value >> 2) & 0x1);
            accelXYZAvailable = (int)((_value >> 3) & 0x1);
            accelXOverrun = (int)((_value >> 4) & 0x1);
            accelYOverrun = (int)((_value >> 5) & 0x1);
            accelZOverrun = (int)((_value >> 6) & 0x1);
            accelXYZOverrun = (int)((_value >> 7) & 0x1);
        }
    }
    class OutAccelXRegister extends Register
    {
        OutAccelXRegister(RegisterManager regManager) { super(regManager, 0x28, 2, false); }

        int value;


        public OutAccelXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OutAccelYRegister extends Register
    {
        OutAccelYRegister(RegisterManager regManager) { super(regManager, 0x2A, 2, false); }

        int value;


        public OutAccelYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class OutAccelZRegister extends Register
    {
        OutAccelZRegister(RegisterManager regManager) { super(regManager, 0x2C, 2, false); }

        int value;


        public OutAccelZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class FifoControlRegister extends Register
    {
        FifoControlRegister(RegisterManager regManager) { super(regManager, 0x2E, 1, false); }

        int fifoThreshold;
        int fifoMode;

                public FifoModes getFifoMode() { for (FifoModes b : FifoModes.values()) { if(b.getVal() == fifoMode) return b; } return FifoModes.values()[0]; }
                public void setFifoMode(FifoModes enumVal) { fifoMode = enumVal.getVal(); }

        public FifoControlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoThreshold & 0x1F) << 0) | ((fifoMode & 0x7) << 5); }
        public void setValue(long _value)
        {
            fifoThreshold = (int)((_value >> 0) & 0x1F);
            fifoMode = (int)((_value >> 5) & 0x7);
        }
    }
    class FifoSourceRegister extends Register
    {
        FifoSourceRegister(RegisterManager regManager) { super(regManager, 0x2f, 1, false); }

        int fifoStoredLevel;
        int empty;
        int overrun;
        int fifoThreshold;


        public FifoSourceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((fifoStoredLevel & 0x1F) << 0) | ((empty & 0x1) << 5) | ((overrun & 0x1) << 6) | ((fifoThreshold & 0x1) << 7); }
        public void setValue(long _value)
        {
            fifoStoredLevel = (int)((_value >> 0) & 0x1F);
            empty = (int)((_value >> 5) & 0x1);
            overrun = (int)((_value >> 6) & 0x1);
            fifoThreshold = (int)((_value >> 7) & 0x1);
        }
    }
    class InertialIntGen1ConfigRegister extends Register
    {
        InertialIntGen1ConfigRegister(RegisterManager regManager) { super(regManager, 0x30, 1, false); }

        int xLowInterruptEnable;
        int xHighInterruptEnable;
        int yLowInterruptEnable;
        int yHighInterruptEnable;
        int zLowInterruptEvent;
        int zHighInterruptEnable;
        int detect6D;
        int andOrInterruptEvents;


        public InertialIntGen1ConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            xLowInterruptEnable = (int)((_value >> 0) & 0x1);
            xHighInterruptEnable = (int)((_value >> 1) & 0x1);
            yLowInterruptEnable = (int)((_value >> 2) & 0x1);
            yHighInterruptEnable = (int)((_value >> 3) & 0x1);
            zLowInterruptEvent = (int)((_value >> 4) & 0x1);
            zHighInterruptEnable = (int)((_value >> 5) & 0x1);
            detect6D = (int)((_value >> 6) & 0x1);
            andOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class InertialIntGen1StatusRegister extends Register
    {
        InertialIntGen1StatusRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int intStatus;


        public InertialIntGen1StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
        public void setValue(long _value)
        {
            xLow = (int)((_value >> 0) & 0x1);
            xHigh = (int)((_value >> 1) & 0x1);
            yLow = (int)((_value >> 2) & 0x1);
            yHigh = (int)((_value >> 3) & 0x1);
            zLow = (int)((_value >> 4) & 0x1);
            zHigh = (int)((_value >> 5) & 0x1);
            intStatus = (int)((_value >> 6) & 0x1);
        }
    }
    class InertialIntGen1ThresholdRegister extends Register
    {
        InertialIntGen1ThresholdRegister(RegisterManager regManager) { super(regManager, 0x32, 1, false); }

        int value;


        public InertialIntGen1ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class InertialIntGen1DurationRegister extends Register
    {
        InertialIntGen1DurationRegister(RegisterManager regManager) { super(regManager, 0x33, 1, false); }

        int value;


        public InertialIntGen1DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class InertialIntGen2ConfigRegister extends Register
    {
        InertialIntGen2ConfigRegister(RegisterManager regManager) { super(regManager, 0x34, 1, false); }

        int xLowInterruptEnable;
        int xHighInterruptEnable;
        int yLowInterruptEnable;
        int yHighInterruptEnable;
        int zLowInterruptEvent;
        int zHighInterruptEnable;
        int detect6D;
        int andOrInterruptEvents;


        public InertialIntGen2ConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLowInterruptEnable & 0x1) << 0) | ((xHighInterruptEnable & 0x1) << 1) | ((yLowInterruptEnable & 0x1) << 2) | ((yHighInterruptEnable & 0x1) << 3) | ((zLowInterruptEvent & 0x1) << 4) | ((zHighInterruptEnable & 0x1) << 5) | ((detect6D & 0x1) << 6) | ((andOrInterruptEvents & 0x1) << 7); }
        public void setValue(long _value)
        {
            xLowInterruptEnable = (int)((_value >> 0) & 0x1);
            xHighInterruptEnable = (int)((_value >> 1) & 0x1);
            yLowInterruptEnable = (int)((_value >> 2) & 0x1);
            yHighInterruptEnable = (int)((_value >> 3) & 0x1);
            zLowInterruptEvent = (int)((_value >> 4) & 0x1);
            zHighInterruptEnable = (int)((_value >> 5) & 0x1);
            detect6D = (int)((_value >> 6) & 0x1);
            andOrInterruptEvents = (int)((_value >> 7) & 0x1);
        }
    }
    class InertialIntGen2StatusRegister extends Register
    {
        InertialIntGen2StatusRegister(RegisterManager regManager) { super(regManager, 0x35, 1, false); }

        int xLow;
        int xHigh;
        int yLow;
        int yHigh;
        int zLow;
        int zHigh;
        int intStatus;


        public InertialIntGen2StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xLow & 0x1) << 0) | ((xHigh & 0x1) << 1) | ((yLow & 0x1) << 2) | ((yHigh & 0x1) << 3) | ((zLow & 0x1) << 4) | ((zHigh & 0x1) << 5) | ((intStatus & 0x1) << 6); }
        public void setValue(long _value)
        {
            xLow = (int)((_value >> 0) & 0x1);
            xHigh = (int)((_value >> 1) & 0x1);
            yLow = (int)((_value >> 2) & 0x1);
            yHigh = (int)((_value >> 3) & 0x1);
            zLow = (int)((_value >> 4) & 0x1);
            zHigh = (int)((_value >> 5) & 0x1);
            intStatus = (int)((_value >> 6) & 0x1);
        }
    }
    class InertialIntGen2ThresholdRegister extends Register
    {
        InertialIntGen2ThresholdRegister(RegisterManager regManager) { super(regManager, 0x36, 1, false); }

        int value;


        public InertialIntGen2ThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class InertialIntGen2DurationRegister extends Register
    {
        InertialIntGen2DurationRegister(RegisterManager regManager) { super(regManager, 0x37, 1, false); }

        int value;


        public InertialIntGen2DurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class ClickConfigRegister extends Register
    {
        ClickConfigRegister(RegisterManager regManager) { super(regManager, 0x38, 1, false); }

        int xSingleClick;
        int xDoubleClick;
        int ySingleClick;
        int yDoubleClick;
        int zSingleClick;
        int zDoubleClick;


        public ClickConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((xSingleClick & 0x1) << 0) | ((xDoubleClick & 0x1) << 1) | ((ySingleClick & 0x1) << 2) | ((yDoubleClick & 0x1) << 3) | ((zSingleClick & 0x1) << 4) | ((zDoubleClick & 0x1) << 5); }
        public void setValue(long _value)
        {
            xSingleClick = (int)((_value >> 0) & 0x1);
            xDoubleClick = (int)((_value >> 1) & 0x1);
            ySingleClick = (int)((_value >> 2) & 0x1);
            yDoubleClick = (int)((_value >> 3) & 0x1);
            zSingleClick = (int)((_value >> 4) & 0x1);
            zDoubleClick = (int)((_value >> 5) & 0x1);
        }
    }
    class ClickSourceRegister extends Register
    {
        ClickSourceRegister(RegisterManager regManager) { super(regManager, 0x39, 1, false); }

        int x;
        int y;
        int z;
        int sign;
        int singleClickEn;
        int doubleClickEn;
        int interruptActive;


        public ClickSourceRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((x & 0x1) << 0) | ((y & 0x1) << 1) | ((z & 0x1) << 2) | ((sign & 0x1) << 3) | ((singleClickEn & 0x1) << 4) | ((doubleClickEn & 0x1) << 5) | ((interruptActive & 0x1) << 6); }
        public void setValue(long _value)
        {
            x = (int)((_value >> 0) & 0x1);
            y = (int)((_value >> 1) & 0x1);
            z = (int)((_value >> 2) & 0x1);
            sign = (int)((_value >> 3) & 0x1);
            singleClickEn = (int)((_value >> 4) & 0x1);
            doubleClickEn = (int)((_value >> 5) & 0x1);
            interruptActive = (int)((_value >> 6) & 0x1);
        }
    }
    class ClickThresholdRegister extends Register
    {
        ClickThresholdRegister(RegisterManager regManager) { super(regManager, 0x3A, 1, false); }

        int value;


        public ClickThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class TimeLimitRegister extends Register
    {
        TimeLimitRegister(RegisterManager regManager) { super(regManager, 0x3b, 1, false); }

        int value;


        public TimeLimitRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x7F) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0x7F);
        }
    }
    class TimeLatencyRegister extends Register
    {
        TimeLatencyRegister(RegisterManager regManager) { super(regManager, 0x3c, 1, false); }

        int value;


        public TimeLatencyRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class TimeWindowRegister extends Register
    {
        TimeWindowRegister(RegisterManager regManager) { super(regManager, 0x3d, 1, false); }

        int value;


        public TimeWindowRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ActivationThresholdRegister extends Register
    {
        ActivationThresholdRegister(RegisterManager regManager) { super(regManager, 0x3e, 1, false); }

        int value;


        public ActivationThresholdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ActivationDurationRegister extends Register
    {
        ActivationDurationRegister(RegisterManager regManager) { super(regManager, 0x3f, 1, false); }

        int value;


        public ActivationDurationRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
}
