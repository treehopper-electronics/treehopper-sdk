/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.pressure.bmp280;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Bmp280Registers extends RegisterManager
{
    Bmp280Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        t1 = new T1Register(this);
        _registers.add(t1);
        t2 = new T2Register(this);
        _registers.add(t2);
        t3 = new T3Register(this);
        _registers.add(t3);
        p1 = new P1Register(this);
        _registers.add(p1);
        p2 = new P2Register(this);
        _registers.add(p2);
        p3 = new P3Register(this);
        _registers.add(p3);
        p4 = new P4Register(this);
        _registers.add(p4);
        p5 = new P5Register(this);
        _registers.add(p5);
        p6 = new P6Register(this);
        _registers.add(p6);
        p7 = new P7Register(this);
        _registers.add(p7);
        p8 = new P8Register(this);
        _registers.add(p8);
        p9 = new P9Register(this);
        _registers.add(p9);
        h1 = new H1Register(this);
        _registers.add(h1);
        id = new IdRegister(this);
        _registers.add(id);
        reset = new ResetRegister(this);
        _registers.add(reset);
        h2 = new H2Register(this);
        _registers.add(h2);
        h3 = new H3Register(this);
        _registers.add(h3);
        h4 = new H4Register(this);
        _registers.add(h4);
        h4h5 = new H4h5Register(this);
        _registers.add(h4h5);
        h5 = new H5Register(this);
        _registers.add(h5);
        h6 = new H6Register(this);
        _registers.add(h6);
        ctrlHumidity = new CtrlHumidityRegister(this);
        _registers.add(ctrlHumidity);
        status = new StatusRegister(this);
        _registers.add(status);
        ctrlMeasure = new CtrlMeasureRegister(this);
        _registers.add(ctrlMeasure);
        config = new ConfigRegister(this);
        _registers.add(config);
        pressure = new PressureRegister(this);
        _registers.add(pressure);
        temperature = new TemperatureRegister(this);
        _registers.add(temperature);
        humidity = new HumidityRegister(this);
        _registers.add(humidity);
    }

    T1Register t1;
    T2Register t2;
    T3Register t3;
    P1Register p1;
    P2Register p2;
    P3Register p3;
    P4Register p4;
    P5Register p5;
    P6Register p6;
    P7Register p7;
    P8Register p8;
    P9Register p9;
    H1Register h1;
    IdRegister id;
    ResetRegister reset;
    H2Register h2;
    H3Register h3;
    H4Register h4;
    H4h5Register h4h5;
    H5Register h5;
    H6Register h6;
    CtrlHumidityRegister ctrlHumidity;
    StatusRegister status;
    CtrlMeasureRegister ctrlMeasure;
    ConfigRegister config;
    PressureRegister pressure;
    TemperatureRegister temperature;
    HumidityRegister humidity;

    class T1Register extends Register
    {
        T1Register(RegisterManager regManager) { super(regManager, 0x88, 2, false); }

        int value;


        public T1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class T2Register extends Register
    {
        T2Register(RegisterManager regManager) { super(regManager, 0x8a, 2, false); }

        int value;


        public T2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class T3Register extends Register
    {
        T3Register(RegisterManager regManager) { super(regManager, 0x8c, 2, false); }

        int value;


        public T3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P1Register extends Register
    {
        P1Register(RegisterManager regManager) { super(regManager, 0x8e, 2, false); }

        int value;


        public P1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
    class P2Register extends Register
    {
        P2Register(RegisterManager regManager) { super(regManager, 0x90, 2, false); }

        int value;


        public P2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P3Register extends Register
    {
        P3Register(RegisterManager regManager) { super(regManager, 0x92, 2, false); }

        int value;


        public P3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P4Register extends Register
    {
        P4Register(RegisterManager regManager) { super(regManager, 0x94, 2, false); }

        int value;


        public P4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P5Register extends Register
    {
        P5Register(RegisterManager regManager) { super(regManager, 0x96, 2, false); }

        int value;


        public P5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P6Register extends Register
    {
        P6Register(RegisterManager regManager) { super(regManager, 0x98, 2, false); }

        int value;


        public P6Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P7Register extends Register
    {
        P7Register(RegisterManager regManager) { super(regManager, 0x9a, 2, false); }

        int value;


        public P7Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P8Register extends Register
    {
        P8Register(RegisterManager regManager) { super(regManager, 0x9c, 2, false); }

        int value;


        public P8Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class P9Register extends Register
    {
        P9Register(RegisterManager regManager) { super(regManager, 0x9e, 2, false); }

        int value;


        public P9Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class H1Register extends Register
    {
        H1Register(RegisterManager regManager) { super(regManager, 0xa1, 1, false); }

        int value;


        public H1Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class IdRegister extends Register
    {
        IdRegister(RegisterManager regManager) { super(regManager, 0xd0, 1, false); }

        int value;


        public IdRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class ResetRegister extends Register
    {
        ResetRegister(RegisterManager regManager) { super(regManager, 0xe0, 1, false); }

        int value;


        public ResetRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class H2Register extends Register
    {
        H2Register(RegisterManager regManager) { super(regManager, 0xe1, 2, false); }

        int value;


        public H2Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class H3Register extends Register
    {
        H3Register(RegisterManager regManager) { super(regManager, 0xe3, 1, false); }

        int value;


        public H3Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class H4Register extends Register
    {
        H4Register(RegisterManager regManager) { super(regManager, 0xe4, 1, false); }

        int value;


        public H4Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class H4h5Register extends Register
    {
        H4h5Register(RegisterManager regManager) { super(regManager, 0xe5, 1, false); }

        int h4Low;
        int h5Low;


        public H4h5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((h4Low & 0xF) << 0) | ((h5Low & 0xF) << 4); }
        public void setValue(long _value)
        {
            h4Low = (int)((_value >> 0) & 0xF);
            h5Low = (int)((_value >> 4) & 0xF);
        }
    }
    class H5Register extends Register
    {
        H5Register(RegisterManager regManager) { super(regManager, 0xe6, 1, false); }

        int value;


        public H5Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFF);
        }
    }
    class H6Register extends Register
    {
        H6Register(RegisterManager regManager) { super(regManager, 0xe7, 1, false); }

        int value;


        public H6Register read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0xFF) << (32 - 8)) >> (32 - 8);
        }
    }
    class CtrlHumidityRegister extends Register
    {
        CtrlHumidityRegister(RegisterManager regManager) { super(regManager, 0xf2, 1, false); }

        int oversampling;

                public Oversamplings getOversampling() { for (Oversamplings b : Oversamplings.values()) { if(b.getVal() == oversampling) return b; } return Oversamplings.values()[0]; }
                public void setOversampling(Oversamplings enumVal) { oversampling = enumVal.getVal(); }

        public CtrlHumidityRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((oversampling & 0x7) << 0); }
        public void setValue(long _value)
        {
            oversampling = (int)((_value >> 0) & 0x7);
        }
    }
    class StatusRegister extends Register
    {
        StatusRegister(RegisterManager regManager) { super(regManager, 0xf3, 1, false); }

        int imUpdate;
        int measuring;


        public StatusRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((imUpdate & 0x1) << 0) | ((measuring & 0x1) << 3); }
        public void setValue(long _value)
        {
            imUpdate = (int)((_value >> 0) & 0x1);
            measuring = (int)((_value >> 3) & 0x1);
        }
    }
    class CtrlMeasureRegister extends Register
    {
        CtrlMeasureRegister(RegisterManager regManager) { super(regManager, 0xf4, 1, false); }

        int mode;
        int oversamplingPressure;
        int oversamplingTemperature;

                public Modes getMode() { for (Modes b : Modes.values()) { if(b.getVal() == mode) return b; } return Modes.values()[0]; }
                public void setMode(Modes enumVal) { mode = enumVal.getVal(); }
                public OversamplingPressures getOversamplingPressure() { for (OversamplingPressures b : OversamplingPressures.values()) { if(b.getVal() == oversamplingPressure) return b; } return OversamplingPressures.values()[0]; }
                public void setOversamplingPressure(OversamplingPressures enumVal) { oversamplingPressure = enumVal.getVal(); }
                public OversamplingTemperatures getOversamplingTemperature() { for (OversamplingTemperatures b : OversamplingTemperatures.values()) { if(b.getVal() == oversamplingTemperature) return b; } return OversamplingTemperatures.values()[0]; }
                public void setOversamplingTemperature(OversamplingTemperatures enumVal) { oversamplingTemperature = enumVal.getVal(); }

        public CtrlMeasureRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((mode & 0x3) << 0) | ((oversamplingPressure & 0x7) << 2) | ((oversamplingTemperature & 0x7) << 5); }
        public void setValue(long _value)
        {
            mode = (int)((_value >> 0) & 0x3);
            oversamplingPressure = (int)((_value >> 2) & 0x7);
            oversamplingTemperature = (int)((_value >> 5) & 0x7);
        }
    }
    class ConfigRegister extends Register
    {
        ConfigRegister(RegisterManager regManager) { super(regManager, 0xf5, 1, false); }

        int enable3Wire;
        int filter;
        int tStandby;

                public Filters getFilter() { for (Filters b : Filters.values()) { if(b.getVal() == filter) return b; } return Filters.values()[0]; }
                public void setFilter(Filters enumVal) { filter = enumVal.getVal(); }
                public TStandbies getTStandby() { for (TStandbies b : TStandbies.values()) { if(b.getVal() == tStandby) return b; } return TStandbies.values()[0]; }
                public void setTStandby(TStandbies enumVal) { tStandby = enumVal.getVal(); }

        public ConfigRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((enable3Wire & 0x1) << 0) | ((filter & 0x7) << 1) | ((tStandby & 0x7) << 4); }
        public void setValue(long _value)
        {
            enable3Wire = (int)((_value >> 0) & 0x1);
            filter = (int)((_value >> 1) & 0x7);
            tStandby = (int)((_value >> 4) & 0x7);
        }
    }
    class PressureRegister extends Register
    {
        PressureRegister(RegisterManager regManager) { super(regManager, 0xf7, 3, true); }

        int value;


        public PressureRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFFF) << 4); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 4) & 0xFFFFF);
        }
    }
    class TemperatureRegister extends Register
    {
        TemperatureRegister(RegisterManager regManager) { super(regManager, 0xfa, 3, true); }

        int value;


        public TemperatureRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFFF) << 4); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 4) & 0xFFFFF);
        }
    }
    class HumidityRegister extends Register
    {
        HumidityRegister(RegisterManager regManager) { super(regManager, 0xfd, 2, true); }

        int value;


        public HumidityRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0xFFFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)((_value >> 0) & 0xFFFF);
        }
    }
}
