/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
package io.treehopper.libraries.sensors.inertial.adxl345;

import io.treehopper.libraries.IRegisterManagerAdapter;
import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import java.util.Arrays;

class Adxl345Registers extends RegisterManager
{
    Adxl345Registers(IRegisterManagerAdapter adapter)
    {
        super(adapter);
        powerCtl = new PowerCtlRegister(this);
        _registers.add(powerCtl);
        dataFormat = new DataFormatRegister(this);
        _registers.add(dataFormat);
        dataX = new DataXRegister(this);
        _registers.add(dataX);
        dataY = new DataYRegister(this);
        _registers.add(dataY);
        dataZ = new DataZRegister(this);
        _registers.add(dataZ);
    }

    PowerCtlRegister powerCtl;
    DataFormatRegister dataFormat;
    DataXRegister dataX;
    DataYRegister dataY;
    DataZRegister dataZ;

    class PowerCtlRegister extends Register
    {
        PowerCtlRegister(RegisterManager regManager) { super(regManager, 0x2D, 1, false); }

        int sleep;
        int measure;


        public PowerCtlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((sleep & 0x1) << 2) | ((measure & 0x1) << 3); }
        public void setValue(long _value)
        {
            sleep = (int)((_value >> 2) & 0x1);
            measure = (int)((_value >> 3) & 0x1);
        }
    }
    class DataFormatRegister extends Register
    {
        DataFormatRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int range;
        int justify;
        int fullRes;


        public DataFormatRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((range & 0x3) << 0) | ((justify & 0x1) << 2) | ((fullRes & 0x1) << 3); }
        public void setValue(long _value)
        {
            range = (int)((_value >> 0) & 0x3);
            justify = (int)((_value >> 2) & 0x1);
            fullRes = (int)((_value >> 3) & 0x1);
        }
    }
    class DataXRegister extends Register
    {
        DataXRegister(RegisterManager regManager) { super(regManager, 0x32, 2, false); }

        int value;


        public DataXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x1FFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
        }
    }
    class DataYRegister extends Register
    {
        DataYRegister(RegisterManager regManager) { super(regManager, 0x34, 2, false); }

        int value;


        public DataYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x1FFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
        }
    }
    class DataZRegister extends Register
    {
        DataZRegister(RegisterManager regManager) { super(regManager, 0x36, 2, false); }

        int value;


        public DataZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((value & 0x1FFF) << 0); }
        public void setValue(long _value)
        {
            value = (int)(((_value >> 0) & 0x1FFF) << (32 - 13)) >> (32 - 13);
        }
    }
}
