package io.treehopper.libraries.sensors.inertial.adxl345;

import io.treehopper.libraries.RegisterManager;
import io.treehopper.libraries.Register;
import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class Adxl345Registers extends RegisterManager
{
    SMBusDevice _dev;
    Adxl345Registers(SMBusDevice dev)
    {
        super(dev);
        PowerCtl = new PowerCtlRegister(this);
        _registers.add(PowerCtl);
        DataFormat = new DataFormatRegister(this);
        _registers.add(DataFormat);
        DataX = new DataXRegister(this);
        _registers.add(DataX);
        DataY = new DataYRegister(this);
        _registers.add(DataY);
        DataZ = new DataZRegister(this);
        _registers.add(DataZ);
    }

    PowerCtlRegister PowerCtl;
    DataFormatRegister DataFormat;
    DataXRegister DataX;
    DataYRegister DataY;
    DataZRegister DataZ;

    class PowerCtlRegister extends Register
    {
        PowerCtlRegister(RegisterManager regManager) { super(regManager, 0x2D, 1, false); }

        int Sleep;
        int Measure;


        public PowerCtlRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Sleep & 0x1) << 2) | ((Measure & 0x1) << 3); }
        public void setValue(long value)
        {
            Sleep = (int)((value >> 2) & 0x1);
            Measure = (int)((value >> 3) & 0x1);
        }
    }
    class DataFormatRegister extends Register
    {
        DataFormatRegister(RegisterManager regManager) { super(regManager, 0x31, 1, false); }

        int Range;


        public DataFormatRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Range & 0x3) << 0); }
        public void setValue(long value)
        {
            Range = (int)((value >> 0) & 0x3);
        }
    }
    class DataXRegister extends Register
    {
        DataXRegister(RegisterManager regManager) { super(regManager, 0x32, 2, false); }

        int Value;


        public DataXRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class DataYRegister extends Register
    {
        DataYRegister(RegisterManager regManager) { super(regManager, 0x34, 2, false); }

        int Value;


        public DataYRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
    class DataZRegister extends Register
    {
        DataZRegister(RegisterManager regManager) { super(regManager, 0x36, 2, false); }

        int Value;


        public DataZRegister read()
        {
            manager.read(this);
            return this;
        }

        public long getValue() { return ((Value & 0xFFFF) << 0); }
        public void setValue(long value)
        {
            Value = (int)(((value >> 0) & 0xFFFF) << (32 - 16)) >> (32 - 16);
        }
    }
}
