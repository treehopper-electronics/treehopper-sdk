package io.treehopper.libraries.{{NamespaceLower}};

import io.treehopper.SMBusDevice;
import java.util.Arrays;

/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
class {{Name}}Registers
{
    SMBusDevice _dev;
    {{Name}}Registers(SMBusDevice dev)
    {
        _dev = dev;
    }

    void flush()
    {
        {{#Registers}}
        {{#IsWriteOnly}}
        _dev.writeBufferData((byte){{Address}}, getBytes({{CapitalizedName}}.getValue(), {{Numbytes}}, {{LittleEndian}}));
        {{/IsWriteOnly}}
        {{/Registers}}
    }

    void update()
    {
        {{#MultiRegisterAccess}}
        int i = 0;
        byte[] bytes = _dev.readBufferData((byte){{FirstReadAddress}}, {{TotalReadbytes}});
        {{#Registers}}
        {{#IsReadOnly}}
        {{CapitalizedName}}.setValue(getValue(Arrays.copyOfRange(bytes, i, i + {{Numbytes}}), {{LittleEndian}}));
        i += {{Numbytes}};
        {{/IsReadOnly}}
        {{/Registers}}
        {{/MultiRegisterAccess}}
        {{^MultiRegisterAccess}}
        {{#Registers}}
        {{#IsReadOnly}}
        {{CapitalizedName}}.setValue(getValue(_dev.readBufferData((byte){{Address}}, {{Numbytes}}), {{LittleEndian}}));
        {{/IsReadOnly}}
        {{/Registers}}
        {{/MultiRegisterAccess}}
    }

    byte[] getBytes(long val, int width, boolean isLittleEndian)
    {
        byte[] retVal = new byte[width]; 
        for (int i = 0; i < width; i++) 
            retVal[i] = (byte) ((val >> (8 * i)) & 0xFF);

        // TODO: Fix endianess
        // if (BitConverter.IsLittleEndian ^ isLittleEndian) 
        //     retVal = retVal.Reverse().ToArray();

        return retVal;
    }

    long getValue(byte[] bytes, boolean isLittleEndian)
    {
        // TODO: Fix endianess
        // if (BitConverter.IsLittleEndian ^ isLittleEndian) 
        //         bytes = bytes.Reverse().ToArray(); 

        long regVal = 0; 

        for (int i = 0; i < bytes.length; i++) 
                regVal |= bytes[i] << (i * 8);

        return regVal;
    }

{{#Registers}}
    {{CapitalizedName}}Register {{CapitalizedName}} = new {{CapitalizedName}}Register();
{{/Registers}}

{{#Registers}}
    class {{CapitalizedName}}Register
    {
    {{#Values}}
        int {{CapitalizedName}};
    {{/Values}}
        long getValue() { return {{#Values}}(({{CapitalizedName}} & {{Bitmask}}) << {{Offset}}){{^Last}} | {{/Last}}{{/Values}}; }
        void setValue(long value)
        {
            {{#Values}}
            {{#IsSigned}}
            {{CapitalizedName}} = (int)(((value >> {{Offset}}) & {{Bitmask}}) << (32 - {{Offset}} - {{Width}})) >> (32 - {{Offset}} - {{Width}});
            {{/IsSigned}}
            {{^IsSigned}}
            {{CapitalizedName}} = (int)((value >> {{Offset}}) & {{Bitmask}});
            {{/IsSigned}}
            {{/Values}}
        }
    }
{{/Registers}}
}
