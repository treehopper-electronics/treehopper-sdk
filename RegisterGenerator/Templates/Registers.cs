/// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.{{Namespace}}
{
    public partial class {{Name}}
    {
        {{#RegisterList}}
        {{#Values.Values}}
        {{#Enum}}
        {{#IsPublic}}public{{/IsPublic}}{{^IsPublic}}internal{{/IsPublic}} enum {{Name}}
        {
        {{#ValuesList}}
            {{Key}} = {{#Value}}{{Value}}{{^Last}},{{/Last}}{{/Value}}
        {{/ValuesList}}
        }

        {{/Enum}}
        {{/Values.Values}}
        {{/RegisterList}}
        internal class {{Name}}Registers : RegisterManager
        {
            internal {{Name}}Registers(SMBusDevice dev = null) : base(dev, {{MultiRegisterAccess}})
            {
                {{#RegisterList}}
                {{CapitalizedName}} = new {{CapitalizedName}}Register(this);
                _registers.Add({{CapitalizedName}});
                {{/RegisterList}}
            }

        {{#RegisterList}}
            internal {{CapitalizedName}}Register {{CapitalizedName}};
        {{/RegisterList}}

        {{#RegisterList}}
            internal class {{CapitalizedName}}Register : Register
            {
                internal {{CapitalizedName}}Register(RegisterManager regManager) : base(regManager, {{Address}}, {{NumBytes}}, {{IsBigEndian}}) { }

            {{#Values.Values}}
                public int {{CapitalizedName}} { get; set; }
            {{/Values.Values}}
{{#Values.Values}}
        {{#Enum}}
                public {{Name}} Get{{CapitalizedName}}() { return ({{Name}}){{CapitalizedName}}; }
                public void Set{{CapitalizedName}}({{Name}} enumVal) { {{CapitalizedName}} = (int)enumVal; }
        {{/Enum}}
        {{/Values.Values}}

                public async Task<{{CapitalizedName}}Register> Read()
                {
                    await manager.Read(this).ConfigureAwait(false);
                    return this;
                }
                internal override long GetValue() { return {{#Values.Values}}(({{CapitalizedName}} & {{Bitmask}}) << {{Offset}}){{^Last}} | {{/Last}}{{/Values.Values}}; }
                internal override void SetValue(long value)
                {
                    {{#Values.Values}}
                    {{#IsSigned}}
                    {{CapitalizedName}} = (int)(((value >> {{Offset}}) & {{Bitmask}}) << (32 - {{Width}})) >> (32 - {{Width}});
                    {{/IsSigned}}
                    {{^IsSigned}}
                    {{CapitalizedName}} = (int)((value >> {{Offset}}) & {{Bitmask}});
                    {{/IsSigned}}
                    {{/Values.Values}}
                }

                public override string ToString()
                {
                    string retVal = "";
                    {{#Values.Values}}
                    retVal += $"{{CapitalizedName}}: { {{CapitalizedName}} } (offset: {{Offset}}, width: {{Width}})\r\n";
                    {{/Values.Values}}
                    return retVal;
                }
            }
        {{/RegisterList}}
        }
    }
}