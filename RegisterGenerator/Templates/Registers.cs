using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Treehopper;
using Treehopper.Libraries.Utilities;

namespace Treehopper.Libraries.{{Namespace}}
{
    /// This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
    internal class {{Name}}Registers
    {
        SMBusDevice _dev;
        internal {{Name}}Registers(SMBusDevice dev = null)
        {
            _dev = dev;
        }

        internal async Task Flush()
        {
            {{#Registers}}
            {{#IsWriteOnly}}
            await _dev.WriteBufferData({{Address}}, GetBytes({{CapitalizedName}}.GetValue(), {{NumBytes}}, {{LittleEndian}}));
            {{/IsWriteOnly}}
            {{/Registers}}
        }

        internal async Task Update()
        {
            {{#Registers}}
            {{#IsReadOnly}}
            {{CapitalizedName}}.SetValue(GetValue(await _dev.ReadBufferData({{Address}}, {{NumBytes}}), {{LittleEndian}}));
            {{/IsReadOnly}}
            {{/Registers}}
        }

        internal byte[] GetBytes(long val, int width, bool isLittleEndian)
        {
            var retVal = new byte[width]; 
            for (var i = 0; i < width; i++) 
                retVal[i] = (byte) ((val >> (8 * i)) & 0xFF);

            if (BitConverter.IsLittleEndian ^ isLittleEndian) 
                retVal = retVal.Reverse().ToArray();

            return retVal;
        }

        internal long GetValue(byte[] bytes, bool isLittleEndian)
        {
            if (BitConverter.IsLittleEndian ^ isLittleEndian) 
                    bytes = bytes.Reverse().ToArray(); 
 
            long regVal = 0; 
 
            for (var i = 0; i < bytes.Length; i++) 
                    regVal |= bytes[i] << (i * 8);

            return regVal;
        }



    {{#Registers}}
        internal {{CapitalizedName}}Register {{CapitalizedName}} = new {{CapitalizedName}}Register();
    {{/Registers}}

    {{#Registers}}
        internal class {{CapitalizedName}}Register
        {
        {{#Values}}
            public int {{CapitalizedName}} { get; set; }
        {{/Values}}
            internal long GetValue() { return {{#Values}}(({{CapitalizedName}} & {{Bitmask}}) << {{Offset}}){{^Last}} | {{/Last}}{{/Values}}; }
            internal void SetValue(long value)
            {
                {{#Values}}
                {{#IsSigned}}
                {{CapitalizedName}} = (int)(((value >> {{Offset}}) & {{Bitmask}}) << (32 - {{Offset}} - {{Width}})) >> (32 - {{Offset}} - {{Width}});
                {{/IsSigned}}
                {{^IsSigned}}
                {{CapitalizedName}} = (int)((value >> {{Offset}}) & {{Bitmask}});
                {{/IsSigned}}
                {{/Values}}
            }
            
        }

    {{/Registers}}
    }
}