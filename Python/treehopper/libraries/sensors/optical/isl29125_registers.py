### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class Modes:
    PowerDown = 0
    Green = 1
    Red = 2
    Blue = 3
    Standby = 4
    GreenRedBlue = 5
    GreenRed = 6
    GreenBlue = 7
    
class Ranges:
    Lux_375 = 0
    Lux_10000 = 1
    
class SampleDepths:
    Bits_16 = 0
    Bits_12 = 1
    
class InterruptSelections:
    NoInterrupt = 0
    Green = 1
    Red = 2
    Blue = 3
    
class Prsts:
    Cycles_1 = 0
    Cycles_2 = 1
    Cycles_4 = 2
    Cycles_8 = 3
    
class Isl29125Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.deviceId = self.DeviceIdRegister(self)
        self.registers.append(self.deviceId)
        self.deviceReset = self.DeviceResetRegister(self)
        self.registers.append(self.deviceReset)
        self.config1 = self.Config1Register(self)
        self.registers.append(self.config1)
        self.config2 = self.Config2Register(self)
        self.registers.append(self.config2)
        self.config3 = self.Config3Register(self)
        self.registers.append(self.config3)
        self.lowThreshold = self.LowThresholdRegister(self)
        self.registers.append(self.lowThreshold)
        self.highThreshold = self.HighThresholdRegister(self)
        self.registers.append(self.highThreshold)
        self.status = self.StatusRegister(self)
        self.registers.append(self.status)
        self.greenData = self.GreenDataRegister(self)
        self.registers.append(self.greenData)
        self.redData = self.RedDataRegister(self)
        self.registers.append(self.redData)
        self.blueData = self.BlueDataRegister(self)
        self.registers.append(self.blueData)

    class DeviceIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x00, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class DeviceResetRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x00, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Config1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x01, 1, False)
            self.mode = 0
            self.range = 0
            self.sampleDepth = 0
            self.sync = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.mode & 0x7) << 0) | ((self.range & 0x1) << 3) | ((self.sampleDepth & 0x1) << 4) | ((self.sync & 0x1) << 5)

        def setValue(self, value: int):
            self.mode = ((value >> 0) & 0x7)
            self.range = ((value >> 3) & 0x1)
            self.sampleDepth = ((value >> 4) & 0x1)
            self.sync = ((value >> 5) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Mode: {} (offset: 0, width: 3)\r\n".format(self.mode)
            retVal += "Range: {} (offset: 3, width: 1)\r\n".format(self.range)
            retVal += "SampleDepth: {} (offset: 4, width: 1)\r\n".format(self.sampleDepth)
            retVal += "Sync: {} (offset: 5, width: 1)\r\n".format(self.sync)
            return retVal

    class Config2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x02, 1, False)
            self.alscc = 0
            self.irCom = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.alscc & 0x3F) << 0) | ((self.irCom & 0x1) << 7)

        def setValue(self, value: int):
            self.alscc = ((value >> 0) & 0x3F)
            self.irCom = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Alscc: {} (offset: 0, width: 6)\r\n".format(self.alscc)
            retVal += "IrCom: {} (offset: 7, width: 1)\r\n".format(self.irCom)
            return retVal

    class Config3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x03, 1, False)
            self.interruptSelection = 0
            self.prst = 0
            self.conven = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.interruptSelection & 0x3) << 0) | ((self.prst & 0x3) << 2) | ((self.conven & 0x1) << 4)

        def setValue(self, value: int):
            self.interruptSelection = ((value >> 0) & 0x3)
            self.prst = ((value >> 2) & 0x3)
            self.conven = ((value >> 4) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "InterruptSelection: {} (offset: 0, width: 2)\r\n".format(self.interruptSelection)
            retVal += "Prst: {} (offset: 2, width: 2)\r\n".format(self.prst)
            retVal += "Conven: {} (offset: 4, width: 1)\r\n".format(self.conven)
            return retVal

    class LowThresholdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x04, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class HighThresholdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x06, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class StatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x08, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class GreenDataRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x09, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class RedDataRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0B, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class BlueDataRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0D, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

