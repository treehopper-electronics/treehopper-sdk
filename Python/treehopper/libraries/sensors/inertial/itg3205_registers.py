### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class Itg3205Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.whoAmI = self.WhoAmIRegister(self)
        self.registers.append(self.whoAmI)
        self.smplrtDiv = self.SmplrtDivRegister(self)
        self.registers.append(self.smplrtDiv)
        self.dlpfFs = self.DlpfFsRegister(self)
        self.registers.append(self.dlpfFs)
        self.intCfg = self.IntCfgRegister(self)
        self.registers.append(self.intCfg)
        self.intStatus = self.IntStatusRegister(self)
        self.registers.append(self.intStatus)
        self.temp = self.TempRegister(self)
        self.registers.append(self.temp)
        self.gyroX = self.GyroXRegister(self)
        self.registers.append(self.gyroX)
        self.gyroY = self.GyroYRegister(self)
        self.registers.append(self.gyroY)
        self.gyroZ = self.GyroZRegister(self)
        self.registers.append(self.gyroZ)
        self.pwrMgm = self.PwrMgmRegister(self)
        self.registers.append(self.pwrMgm)

    class WhoAmIRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x00, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class SmplrtDivRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x15, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class DlpfFsRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x16, 1, False)
            self.dlpfCfg = 0
            self.fsSel = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.dlpfCfg & 0x7) << 0) | ((self.fsSel & 0x3) << 3)

        def setValue(self, value: int):
            self.dlpfCfg = ((value >> 0) & 0x7)
            self.fsSel = ((value >> 3) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "DlpfCfg: {} (offset: 0, width: 3)\r\n".format(self.dlpfCfg)
            retVal += "FsSel: {} (offset: 3, width: 2)\r\n".format(self.fsSel)
            return retVal

    class IntCfgRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x17, 1, False)
            self.rawRdyEn = 0
            self.itgRdyEn = 0
            self.intAnyrd2Clear = 0
            self.latchIntEn = 0
            self.open = 0
            self.actl = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.rawRdyEn & 0x1) << 0) | ((self.itgRdyEn & 0x1) << 2) | ((self.intAnyrd2Clear & 0x1) << 4) | ((self.latchIntEn & 0x1) << 5) | ((self.open & 0x1) << 6) | ((self.actl & 0x1) << 7)

        def setValue(self, value: int):
            self.rawRdyEn = ((value >> 0) & 0x1)
            self.itgRdyEn = ((value >> 2) & 0x1)
            self.intAnyrd2Clear = ((value >> 4) & 0x1)
            self.latchIntEn = ((value >> 5) & 0x1)
            self.open = ((value >> 6) & 0x1)
            self.actl = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "RawRdyEn: {} (offset: 0, width: 1)\r\n".format(self.rawRdyEn)
            retVal += "ItgRdyEn: {} (offset: 2, width: 1)\r\n".format(self.itgRdyEn)
            retVal += "IntAnyrd2Clear: {} (offset: 4, width: 1)\r\n".format(self.intAnyrd2Clear)
            retVal += "LatchIntEn: {} (offset: 5, width: 1)\r\n".format(self.latchIntEn)
            retVal += "Open: {} (offset: 6, width: 1)\r\n".format(self.open)
            retVal += "Actl: {} (offset: 7, width: 1)\r\n".format(self.actl)
            return retVal

    class IntStatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1a, 1, False)
            self.rawDataReady = 0
            self.itgReady = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.rawDataReady & 0x1) << 0) | ((self.itgReady & 0x1) << 2)

        def setValue(self, value: int):
            self.rawDataReady = ((value >> 0) & 0x1)
            self.itgReady = ((value >> 2) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "RawDataReady: {} (offset: 0, width: 1)\r\n".format(self.rawDataReady)
            retVal += "ItgReady: {} (offset: 2, width: 1)\r\n".format(self.itgReady)
            return retVal

    class TempRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1b, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1d, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1f, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x21, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class PwrMgmRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3e, 1, False)
            self.clkSel = 0
            self.stbyZg = 0
            self.stbyYg = 0
            self.stbyXg = 0
            self.sleep = 0
            self.hReset = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.clkSel & 0x7) << 0) | ((self.stbyZg & 0x1) << 3) | ((self.stbyYg & 0x1) << 4) | ((self.stbyXg & 0x1) << 5) | ((self.sleep & 0x1) << 6) | ((self.hReset & 0x1) << 7)

        def setValue(self, value: int):
            self.clkSel = ((value >> 0) & 0x7)
            self.stbyZg = ((value >> 3) & 0x1)
            self.stbyYg = ((value >> 4) & 0x1)
            self.stbyXg = ((value >> 5) & 0x1)
            self.sleep = ((value >> 6) & 0x1)
            self.hReset = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "ClkSel: {} (offset: 0, width: 3)\r\n".format(self.clkSel)
            retVal += "StbyZg: {} (offset: 3, width: 1)\r\n".format(self.stbyZg)
            retVal += "StbyYg: {} (offset: 4, width: 1)\r\n".format(self.stbyYg)
            retVal += "StbyXg: {} (offset: 5, width: 1)\r\n".format(self.stbyXg)
            retVal += "Sleep: {} (offset: 6, width: 1)\r\n".format(self.sleep)
            retVal += "HReset: {} (offset: 7, width: 1)\r\n".format(self.hReset)
            return retVal

