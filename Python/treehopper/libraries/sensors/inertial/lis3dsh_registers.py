### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class OutputDataRates:
    PowerDown = 0
    Hz_3P125 = 1
    Hz_6P25 = 2
    Hz_12P5 = 3
    Hz_25 = 4
    Hz_50 = 5
    Hz_100 = 6
    Hz_400 = 7
    Hz_800 = 8
    Hz_1600 = 9
    
class Fscales:
    g_2 = 0
    g_4 = 1
    g_6 = 2
    g_8 = 3
    g_16 = 4
    
class Bandwidths:
    Hz_800 = 0
    Hz_200 = 1
    Hz_400 = 2
    Hz_50 = 3
    
class FifoModes:
    bypass = 0
    fifoMode = 1
    streamMode = 2
    streamUntilTriggerThenFifo = 3
    bypassUntilTriggerThenStream = 4
    bypassUntilTriggerThenFIFO = 7
    
class Lis3dshRegisters(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.outT = self.OutTRegister(self)
        self.registers.append(self.outT)
        self.info1 = self.Info1Register(self)
        self.registers.append(self.info1)
        self.info2 = self.Info2Register(self)
        self.registers.append(self.info2)
        self.whoAmI = self.WhoAmIRegister(self)
        self.registers.append(self.whoAmI)
        self.offX = self.OffXRegister(self)
        self.registers.append(self.offX)
        self.offY = self.OffYRegister(self)
        self.registers.append(self.offY)
        self.offZ = self.OffZRegister(self)
        self.registers.append(self.offZ)
        self.csX = self.CsXRegister(self)
        self.registers.append(self.csX)
        self.csY = self.CsYRegister(self)
        self.registers.append(self.csY)
        self.csZ = self.CsZRegister(self)
        self.registers.append(self.csZ)
        self.lc = self.LcRegister(self)
        self.registers.append(self.lc)
        self.stat = self.StatRegister(self)
        self.registers.append(self.stat)
        self.peak1 = self.Peak1Register(self)
        self.registers.append(self.peak1)
        self.peak2 = self.Peak2Register(self)
        self.registers.append(self.peak2)
        self.vfc1 = self.Vfc1Register(self)
        self.registers.append(self.vfc1)
        self.vfc2 = self.Vfc2Register(self)
        self.registers.append(self.vfc2)
        self.vfc3 = self.Vfc3Register(self)
        self.registers.append(self.vfc3)
        self.vfc4 = self.Vfc4Register(self)
        self.registers.append(self.vfc4)
        self.thrs3 = self.Thrs3Register(self)
        self.registers.append(self.thrs3)
        self.ctrlReg4 = self.CtrlReg4Register(self)
        self.registers.append(self.ctrlReg4)
        self.ctrlReg1 = self.CtrlReg1Register(self)
        self.registers.append(self.ctrlReg1)
        self.ctrlReg2 = self.CtrlReg2Register(self)
        self.registers.append(self.ctrlReg2)
        self.ctrlReg3 = self.CtrlReg3Register(self)
        self.registers.append(self.ctrlReg3)
        self.ctrlReg5 = self.CtrlReg5Register(self)
        self.registers.append(self.ctrlReg5)
        self.ctrlReg6 = self.CtrlReg6Register(self)
        self.registers.append(self.ctrlReg6)
        self.status = self.StatusRegister(self)
        self.registers.append(self.status)
        self.outX = self.OutXRegister(self)
        self.registers.append(self.outX)
        self.outY = self.OutYRegister(self)
        self.registers.append(self.outY)
        self.outZ = self.OutZRegister(self)
        self.registers.append(self.outZ)
        self.fifoCtrl = self.FifoCtrlRegister(self)
        self.registers.append(self.fifoCtrl)
        self.fifoSrc = self.FifoSrcRegister(self)
        self.registers.append(self.fifoSrc)

    class OutTRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0c, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Info1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0d, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Info2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0e, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class WhoAmIRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0f, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class OffXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x10, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class OffYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x11, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class OffZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x12, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CsXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x13, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CsYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x14, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CsZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x15, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class LcRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x16, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class StatRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x18, 1, False)
            self.drdy = 0
            self.dor = 0
            self.intSm2 = 0
            self.intSm1 = 0
            self.sync2 = 0
            self.sync1 = 0
            self.syncw = 0
            self.longInterrupt = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.drdy & 0x1) << 0) | ((self.dor & 0x1) << 1) | ((self.intSm2 & 0x1) << 2) | ((self.intSm1 & 0x1) << 3) | ((self.sync2 & 0x1) << 4) | ((self.sync1 & 0x1) << 5) | ((self.syncw & 0x1) << 6) | ((self.longInterrupt & 0x1) << 7)

        def setValue(self, value: int):
            self.drdy = ((value >> 0) & 0x1)
            self.dor = ((value >> 1) & 0x1)
            self.intSm2 = ((value >> 2) & 0x1)
            self.intSm1 = ((value >> 3) & 0x1)
            self.sync2 = ((value >> 4) & 0x1)
            self.sync1 = ((value >> 5) & 0x1)
            self.syncw = ((value >> 6) & 0x1)
            self.longInterrupt = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Drdy: {} (offset: 0, width: 1)\r\n".format(self.drdy)
            retVal += "Dor: {} (offset: 1, width: 1)\r\n".format(self.dor)
            retVal += "IntSm2: {} (offset: 2, width: 1)\r\n".format(self.intSm2)
            retVal += "IntSm1: {} (offset: 3, width: 1)\r\n".format(self.intSm1)
            retVal += "Sync2: {} (offset: 4, width: 1)\r\n".format(self.sync2)
            retVal += "Sync1: {} (offset: 5, width: 1)\r\n".format(self.sync1)
            retVal += "Syncw: {} (offset: 6, width: 1)\r\n".format(self.syncw)
            retVal += "LongInterrupt: {} (offset: 7, width: 1)\r\n".format(self.longInterrupt)
            return retVal

    class Peak1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x19, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Peak2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1A, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Vfc1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1b, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Vfc2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1c, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Vfc3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1d, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Vfc4Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1e, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class Thrs3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1f, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CtrlReg4Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x20, 1, False)
            self.xen = 0
            self.yen = 0
            self.zen = 0
            self.bdu = 0
            self.outputDataRate = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.xen & 0x1) << 0) | ((self.yen & 0x1) << 1) | ((self.zen & 0x1) << 2) | ((self.bdu & 0x1) << 3) | ((self.outputDataRate & 0xF) << 4)

        def setValue(self, value: int):
            self.xen = ((value >> 0) & 0x1)
            self.yen = ((value >> 1) & 0x1)
            self.zen = ((value >> 2) & 0x1)
            self.bdu = ((value >> 3) & 0x1)
            self.outputDataRate = ((value >> 4) & 0xF)

        def __str__(self):
            retVal = ""
            retVal += "Xen: {} (offset: 0, width: 1)\r\n".format(self.xen)
            retVal += "Yen: {} (offset: 1, width: 1)\r\n".format(self.yen)
            retVal += "Zen: {} (offset: 2, width: 1)\r\n".format(self.zen)
            retVal += "Bdu: {} (offset: 3, width: 1)\r\n".format(self.bdu)
            retVal += "OutputDataRate: {} (offset: 4, width: 4)\r\n".format(self.outputDataRate)
            return retVal

    class CtrlReg1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x21, 1, False)
            self.sm1En = 0
            self.sm1Pin = 0
            self.Hyst1 = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.sm1En & 0x1) << 0) | ((self.sm1Pin & 0x1) << 3) | ((self.Hyst1 & 0x7) << 5)

        def setValue(self, value: int):
            self.sm1En = ((value >> 0) & 0x1)
            self.sm1Pin = ((value >> 3) & 0x1)
            self.Hyst1 = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Sm1En: {} (offset: 0, width: 1)\r\n".format(self.sm1En)
            retVal += "Sm1Pin: {} (offset: 3, width: 1)\r\n".format(self.sm1Pin)
            retVal += "Hyst1: {} (offset: 5, width: 3)\r\n".format(self.Hyst1)
            return retVal

    class CtrlReg2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x22, 1, False)
            self.sm2En = 0
            self.sm2Pin = 0
            self.Hyst2 = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.sm2En & 0x1) << 0) | ((self.sm2Pin & 0x1) << 3) | ((self.Hyst2 & 0x7) << 5)

        def setValue(self, value: int):
            self.sm2En = ((value >> 0) & 0x1)
            self.sm2Pin = ((value >> 3) & 0x1)
            self.Hyst2 = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Sm2En: {} (offset: 0, width: 1)\r\n".format(self.sm2En)
            retVal += "Sm2Pin: {} (offset: 3, width: 1)\r\n".format(self.sm2Pin)
            retVal += "Hyst2: {} (offset: 5, width: 3)\r\n".format(self.Hyst2)
            return retVal

    class CtrlReg3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x23, 1, False)
            self.strt = 0
            self.vfilt = 0
            self.int1En = 0
            self.int2En = 0
            self.iel = 0
            self.iea = 0
            self.drEn = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.strt & 0x1) << 0) | ((self.vfilt & 0x1) << 2) | ((self.int1En & 0x1) << 3) | ((self.int2En & 0x1) << 4) | ((self.iel & 0x1) << 5) | ((self.iea & 0x1) << 6) | ((self.drEn & 0x1) << 7)

        def setValue(self, value: int):
            self.strt = ((value >> 0) & 0x1)
            self.vfilt = ((value >> 2) & 0x1)
            self.int1En = ((value >> 3) & 0x1)
            self.int2En = ((value >> 4) & 0x1)
            self.iel = ((value >> 5) & 0x1)
            self.iea = ((value >> 6) & 0x1)
            self.drEn = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Strt: {} (offset: 0, width: 1)\r\n".format(self.strt)
            retVal += "Vfilt: {} (offset: 2, width: 1)\r\n".format(self.vfilt)
            retVal += "Int1En: {} (offset: 3, width: 1)\r\n".format(self.int1En)
            retVal += "Int2En: {} (offset: 4, width: 1)\r\n".format(self.int2En)
            retVal += "Iel: {} (offset: 5, width: 1)\r\n".format(self.iel)
            retVal += "Iea: {} (offset: 6, width: 1)\r\n".format(self.iea)
            retVal += "DrEn: {} (offset: 7, width: 1)\r\n".format(self.drEn)
            return retVal

    class CtrlReg5Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x24, 2, False)
            self.sim = 0
            self.st1 = 0
            self.st2 = 0
            self.fscale = 0
            self.bandwidth = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.sim & 0x1) << 0) | ((self.st1 & 0x1) << 1) | ((self.st2 & 0x1) << 2) | ((self.fscale & 0x7) << 3) | ((self.bandwidth & 0x7) << 6)

        def setValue(self, value: int):
            self.sim = ((value >> 0) & 0x1)
            self.st1 = ((value >> 1) & 0x1)
            self.st2 = ((value >> 2) & 0x1)
            self.fscale = ((value >> 3) & 0x7)
            self.bandwidth = ((value >> 6) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Sim: {} (offset: 0, width: 1)\r\n".format(self.sim)
            retVal += "St1: {} (offset: 1, width: 1)\r\n".format(self.st1)
            retVal += "St2: {} (offset: 2, width: 1)\r\n".format(self.st2)
            retVal += "Fscale: {} (offset: 3, width: 3)\r\n".format(self.fscale)
            retVal += "Bandwidth: {} (offset: 6, width: 3)\r\n".format(self.bandwidth)
            return retVal

    class CtrlReg6Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x25, 1, False)
            self.p2boot = 0
            self.p1overrun = 0
            self.p1wtm = 0
            self.p1empty = 0
            self.addInc = 0
            self.wtmEn = 0
            self.fifoEn = 0
            self.boot = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.p2boot & 0x1) << 0) | ((self.p1overrun & 0x1) << 1) | ((self.p1wtm & 0x1) << 2) | ((self.p1empty & 0x1) << 3) | ((self.addInc & 0x1) << 4) | ((self.wtmEn & 0x1) << 5) | ((self.fifoEn & 0x1) << 6) | ((self.boot & 0x1) << 7)

        def setValue(self, value: int):
            self.p2boot = ((value >> 0) & 0x1)
            self.p1overrun = ((value >> 1) & 0x1)
            self.p1wtm = ((value >> 2) & 0x1)
            self.p1empty = ((value >> 3) & 0x1)
            self.addInc = ((value >> 4) & 0x1)
            self.wtmEn = ((value >> 5) & 0x1)
            self.fifoEn = ((value >> 6) & 0x1)
            self.boot = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "P2boot: {} (offset: 0, width: 1)\r\n".format(self.p2boot)
            retVal += "P1overrun: {} (offset: 1, width: 1)\r\n".format(self.p1overrun)
            retVal += "P1wtm: {} (offset: 2, width: 1)\r\n".format(self.p1wtm)
            retVal += "P1empty: {} (offset: 3, width: 1)\r\n".format(self.p1empty)
            retVal += "AddInc: {} (offset: 4, width: 1)\r\n".format(self.addInc)
            retVal += "WtmEn: {} (offset: 5, width: 1)\r\n".format(self.wtmEn)
            retVal += "FifoEn: {} (offset: 6, width: 1)\r\n".format(self.fifoEn)
            retVal += "Boot: {} (offset: 7, width: 1)\r\n".format(self.boot)
            return retVal

    class StatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x27, 1, False)
            self.xda = 0
            self.yda = 0
            self.zda = 0
            self.zyxda = 0
            self.xor = 0
            self.yor = 0
            self.zor = 0
            self.zyxor = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.xda & 0x1) << 0) | ((self.yda & 0x1) << 1) | ((self.zda & 0x1) << 2) | ((self.zyxda & 0x1) << 3) | ((self.xor & 0x1) << 4) | ((self.yor & 0x1) << 5) | ((self.zor & 0x1) << 6) | ((self.zyxor & 0x1) << 7)

        def setValue(self, value: int):
            self.xda = ((value >> 0) & 0x1)
            self.yda = ((value >> 1) & 0x1)
            self.zda = ((value >> 2) & 0x1)
            self.zyxda = ((value >> 3) & 0x1)
            self.xor = ((value >> 4) & 0x1)
            self.yor = ((value >> 5) & 0x1)
            self.zor = ((value >> 6) & 0x1)
            self.zyxor = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Xda: {} (offset: 0, width: 1)\r\n".format(self.xda)
            retVal += "Yda: {} (offset: 1, width: 1)\r\n".format(self.yda)
            retVal += "Zda: {} (offset: 2, width: 1)\r\n".format(self.zda)
            retVal += "Zyxda: {} (offset: 3, width: 1)\r\n".format(self.zyxda)
            retVal += "Xor: {} (offset: 4, width: 1)\r\n".format(self.xor)
            retVal += "Yor: {} (offset: 5, width: 1)\r\n".format(self.yor)
            retVal += "Zor: {} (offset: 6, width: 1)\r\n".format(self.zor)
            retVal += "Zyxor: {} (offset: 7, width: 1)\r\n".format(self.zyxor)
            return retVal

    class OutXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x28, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2a, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2c, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class FifoCtrlRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2e, 1, False)
            self.wtmp = 0
            self.fifoMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.wtmp & 0x1F) << 0) | ((self.fifoMode & 0x7) << 5)

        def setValue(self, value: int):
            self.wtmp = ((value >> 0) & 0x1F)
            self.fifoMode = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Wtmp: {} (offset: 0, width: 5)\r\n".format(self.wtmp)
            retVal += "FifoMode: {} (offset: 5, width: 3)\r\n".format(self.fifoMode)
            return retVal

    class FifoSrcRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2f, 1, False)
            self.fss = 0
            self.empty = 0
            self.ovrnFifo = 0
            self.wtm = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.fss & 0x1F) << 0) | ((self.empty & 0x1) << 5) | ((self.ovrnFifo & 0x1) << 6) | ((self.wtm & 0x1) << 7)

        def setValue(self, value: int):
            self.fss = ((value >> 0) & 0x1F)
            self.empty = ((value >> 5) & 0x1)
            self.ovrnFifo = ((value >> 6) & 0x1)
            self.wtm = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Fss: {} (offset: 0, width: 5)\r\n".format(self.fss)
            retVal += "Empty: {} (offset: 5, width: 1)\r\n".format(self.empty)
            retVal += "OvrnFifo: {} (offset: 6, width: 1)\r\n".format(self.ovrnFifo)
            retVal += "Wtm: {} (offset: 7, width: 1)\r\n".format(self.wtm)
            return retVal

