### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class DataRates:
    Hz_95 = 0
    Hz_190 = 1
    Hz_380 = 2
    Hz_760 = 3
    
class FifoModes:
    Bypass = 0
    Fifo = 1
    Stream = 2
    StreamToFifo = 3
    BypassToStream = 4
    
class L3gd20Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.whoAmI = self.WhoAmIRegister(self)
        self.registers.append(self.whoAmI)
        self.ctrlReg1 = self.CtrlReg1Register(self)
        self.registers.append(self.ctrlReg1)
        self.ctrlReg2 = self.CtrlReg2Register(self)
        self.registers.append(self.ctrlReg2)
        self.ctrlReg3 = self.CtrlReg3Register(self)
        self.registers.append(self.ctrlReg3)
        self.ctrlReg4 = self.CtrlReg4Register(self)
        self.registers.append(self.ctrlReg4)
        self.ctrlReg5 = self.CtrlReg5Register(self)
        self.registers.append(self.ctrlReg5)
        self.referenceDataCapture = self.ReferenceDataCaptureRegister(self)
        self.registers.append(self.referenceDataCapture)
        self.outTemp = self.OutTempRegister(self)
        self.registers.append(self.outTemp)
        self.status = self.StatusRegister(self)
        self.registers.append(self.status)
        self.fifoCtrl = self.FifoCtrlRegister(self)
        self.registers.append(self.fifoCtrl)
        self.fifoSrc = self.FifoSrcRegister(self)
        self.registers.append(self.fifoSrc)
        self.intConfig = self.IntConfigRegister(self)
        self.registers.append(self.intConfig)
        self.int1Src = self.Int1SrcRegister(self)
        self.registers.append(self.int1Src)
        self.int1ThresholdX = self.Int1ThresholdXRegister(self)
        self.registers.append(self.int1ThresholdX)
        self.int1ThresholdY = self.Int1ThresholdYRegister(self)
        self.registers.append(self.int1ThresholdY)
        self.int1ThresholdZ = self.Int1ThresholdZRegister(self)
        self.registers.append(self.int1ThresholdZ)
        self.int1Duration = self.Int1DurationRegister(self)
        self.registers.append(self.int1Duration)
        self.outX = self.OutXRegister(self)
        self.registers.append(self.outX)
        self.outY = self.OutYRegister(self)
        self.registers.append(self.outY)
        self.outZ = self.OutZRegister(self)
        self.registers.append(self.outZ)

    class WhoAmIRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0f, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CtrlReg1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x20, 1, False)
            self.yEn = 0
            self.xEn = 0
            self.zEn = 0
            self.pd = 0
            self.bandwidth = 0
            self.dataRate = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.yEn & 0x1) << 0) | ((self.xEn & 0x1) << 1) | ((self.zEn & 0x1) << 2) | ((self.pd & 0x1) << 3) | ((self.bandwidth & 0x3) << 4) | ((self.dataRate & 0x3) << 6)

        def setValue(self, value: int):
            self.yEn = ((value >> 0) & 0x1)
            self.xEn = ((value >> 1) & 0x1)
            self.zEn = ((value >> 2) & 0x1)
            self.pd = ((value >> 3) & 0x1)
            self.bandwidth = ((value >> 4) & 0x3)
            self.dataRate = ((value >> 6) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "YEn: {} (offset: 0, width: 1)\r\n".format(self.yEn)
            retVal += "XEn: {} (offset: 1, width: 1)\r\n".format(self.xEn)
            retVal += "ZEn: {} (offset: 2, width: 1)\r\n".format(self.zEn)
            retVal += "Pd: {} (offset: 3, width: 1)\r\n".format(self.pd)
            retVal += "Bandwidth: {} (offset: 4, width: 2)\r\n".format(self.bandwidth)
            retVal += "DataRate: {} (offset: 6, width: 2)\r\n".format(self.dataRate)
            return retVal

    class CtrlReg2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x21, 1, False)
            self.hpFilterCutoff = 0
            self.hpFilterMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.hpFilterCutoff & 0xF) << 0) | ((self.hpFilterMode & 0x3) << 4)

        def setValue(self, value: int):
            self.hpFilterCutoff = ((value >> 0) & 0xF)
            self.hpFilterMode = ((value >> 4) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "HpFilterCutoff: {} (offset: 0, width: 4)\r\n".format(self.hpFilterCutoff)
            retVal += "HpFilterMode: {} (offset: 4, width: 2)\r\n".format(self.hpFilterMode)
            return retVal

    class CtrlReg3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x22, 1, False)
            self.i2Empty = 0
            self.i2ORun = 0
            self.i2Wtm = 0
            self.i2Drdy = 0
            self.ppOd = 0
            self.hLactive = 0
            self.i1boot = 0
            self.i1Int1 = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.i2Empty & 0x1) << 0) | ((self.i2ORun & 0x1) << 1) | ((self.i2Wtm & 0x1) << 2) | ((self.i2Drdy & 0x1) << 3) | ((self.ppOd & 0x1) << 4) | ((self.hLactive & 0x1) << 5) | ((self.i1boot & 0x1) << 6) | ((self.i1Int1 & 0x1) << 7)

        def setValue(self, value: int):
            self.i2Empty = ((value >> 0) & 0x1)
            self.i2ORun = ((value >> 1) & 0x1)
            self.i2Wtm = ((value >> 2) & 0x1)
            self.i2Drdy = ((value >> 3) & 0x1)
            self.ppOd = ((value >> 4) & 0x1)
            self.hLactive = ((value >> 5) & 0x1)
            self.i1boot = ((value >> 6) & 0x1)
            self.i1Int1 = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "I2Empty: {} (offset: 0, width: 1)\r\n".format(self.i2Empty)
            retVal += "I2ORun: {} (offset: 1, width: 1)\r\n".format(self.i2ORun)
            retVal += "I2Wtm: {} (offset: 2, width: 1)\r\n".format(self.i2Wtm)
            retVal += "I2Drdy: {} (offset: 3, width: 1)\r\n".format(self.i2Drdy)
            retVal += "PpOd: {} (offset: 4, width: 1)\r\n".format(self.ppOd)
            retVal += "HLactive: {} (offset: 5, width: 1)\r\n".format(self.hLactive)
            retVal += "I1boot: {} (offset: 6, width: 1)\r\n".format(self.i1boot)
            retVal += "I1Int1: {} (offset: 7, width: 1)\r\n".format(self.i1Int1)
            return retVal

    class CtrlReg4Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x23, 1, False)
            self.sim = 0
            self.fullScale = 0
            self.bigLittleEndian = 0
            self.blockDataUpdate = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.sim & 0x1) << 0) | ((self.fullScale & 0x3) << 4) | ((self.bigLittleEndian & 0x1) << 6) | ((self.blockDataUpdate & 0x1) << 7)

        def setValue(self, value: int):
            self.sim = ((value >> 0) & 0x1)
            self.fullScale = ((value >> 4) & 0x3)
            self.bigLittleEndian = ((value >> 6) & 0x1)
            self.blockDataUpdate = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Sim: {} (offset: 0, width: 1)\r\n".format(self.sim)
            retVal += "FullScale: {} (offset: 4, width: 2)\r\n".format(self.fullScale)
            retVal += "BigLittleEndian: {} (offset: 6, width: 1)\r\n".format(self.bigLittleEndian)
            retVal += "BlockDataUpdate: {} (offset: 7, width: 1)\r\n".format(self.blockDataUpdate)
            return retVal

    class CtrlReg5Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x24, 1, False)
            self.outSel = 0
            self.int1Sel = 0
            self.hPen = 0
            self.fifoEn = 0
            self.boot = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.outSel & 0x3) << 0) | ((self.int1Sel & 0x3) << 2) | ((self.hPen & 0x1) << 4) | ((self.fifoEn & 0x1) << 6) | ((self.boot & 0x1) << 7)

        def setValue(self, value: int):
            self.outSel = ((value >> 0) & 0x3)
            self.int1Sel = ((value >> 2) & 0x3)
            self.hPen = ((value >> 4) & 0x1)
            self.fifoEn = ((value >> 6) & 0x1)
            self.boot = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "OutSel: {} (offset: 0, width: 2)\r\n".format(self.outSel)
            retVal += "Int1Sel: {} (offset: 2, width: 2)\r\n".format(self.int1Sel)
            retVal += "HPen: {} (offset: 4, width: 1)\r\n".format(self.hPen)
            retVal += "FifoEn: {} (offset: 6, width: 1)\r\n".format(self.fifoEn)
            retVal += "Boot: {} (offset: 7, width: 1)\r\n".format(self.boot)
            return retVal

    class ReferenceDataCaptureRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x25, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class OutTempRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x26, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class StatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x27, 1, False)
            self.xDataAvailable = 0
            self.yDataAvailable = 0
            self.zDataAvailable = 0
            self.zyxDataAvailable = 0
            self.xDataOverrun = 0
            self.yDataOverrun = 0
            self.zDataOverrun = 0
            self.zyxDataOverrun = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.xDataAvailable & 0x1) << 0) | ((self.yDataAvailable & 0x1) << 1) | ((self.zDataAvailable & 0x1) << 2) | ((self.zyxDataAvailable & 0x1) << 3) | ((self.xDataOverrun & 0x1) << 4) | ((self.yDataOverrun & 0x1) << 5) | ((self.zDataOverrun & 0x1) << 6) | ((self.zyxDataOverrun & 0x1) << 7)

        def setValue(self, value: int):
            self.xDataAvailable = ((value >> 0) & 0x1)
            self.yDataAvailable = ((value >> 1) & 0x1)
            self.zDataAvailable = ((value >> 2) & 0x1)
            self.zyxDataAvailable = ((value >> 3) & 0x1)
            self.xDataOverrun = ((value >> 4) & 0x1)
            self.yDataOverrun = ((value >> 5) & 0x1)
            self.zDataOverrun = ((value >> 6) & 0x1)
            self.zyxDataOverrun = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "XDataAvailable: {} (offset: 0, width: 1)\r\n".format(self.xDataAvailable)
            retVal += "YDataAvailable: {} (offset: 1, width: 1)\r\n".format(self.yDataAvailable)
            retVal += "ZDataAvailable: {} (offset: 2, width: 1)\r\n".format(self.zDataAvailable)
            retVal += "ZyxDataAvailable: {} (offset: 3, width: 1)\r\n".format(self.zyxDataAvailable)
            retVal += "XDataOverrun: {} (offset: 4, width: 1)\r\n".format(self.xDataOverrun)
            retVal += "YDataOverrun: {} (offset: 5, width: 1)\r\n".format(self.yDataOverrun)
            retVal += "ZDataOverrun: {} (offset: 6, width: 1)\r\n".format(self.zDataOverrun)
            retVal += "ZyxDataOverrun: {} (offset: 7, width: 1)\r\n".format(self.zyxDataOverrun)
            return retVal

    class FifoCtrlRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2e, 1, False)
            self.watermarkLevelSetting = 0
            self.fifoMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.watermarkLevelSetting & 0x1F) << 0) | ((self.fifoMode & 0x7) << 5)

        def setValue(self, value: int):
            self.watermarkLevelSetting = ((value >> 0) & 0x1F)
            self.fifoMode = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "WatermarkLevelSetting: {} (offset: 0, width: 5)\r\n".format(self.watermarkLevelSetting)
            retVal += "FifoMode: {} (offset: 5, width: 3)\r\n".format(self.fifoMode)
            return retVal

    class FifoSrcRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2f, 1, False)
            self.fifoStoredDataLevel = 0
            self.empty = 0
            self.overrun = 0
            self.watermarkStatus = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.fifoStoredDataLevel & 0x1F) << 0) | ((self.empty & 0x1) << 5) | ((self.overrun & 0x1) << 6) | ((self.watermarkStatus & 0x1) << 7)

        def setValue(self, value: int):
            self.fifoStoredDataLevel = ((value >> 0) & 0x1F)
            self.empty = ((value >> 5) & 0x1)
            self.overrun = ((value >> 6) & 0x1)
            self.watermarkStatus = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "FifoStoredDataLevel: {} (offset: 0, width: 5)\r\n".format(self.fifoStoredDataLevel)
            retVal += "Empty: {} (offset: 5, width: 1)\r\n".format(self.empty)
            retVal += "Overrun: {} (offset: 6, width: 1)\r\n".format(self.overrun)
            retVal += "WatermarkStatus: {} (offset: 7, width: 1)\r\n".format(self.watermarkStatus)
            return retVal

    class IntConfigRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x30, 1, False)
            self.xLowInterruptEnable = 0
            self.xHighInterruptEnable = 0
            self.yLowInterruptEnable = 0
            self.yHighInterruptEnable = 0
            self.zLowInterruptEvent = 0
            self.zHighInterruptEnable = 0
            self.latchInterruptRequest = 0
            self.andOr = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.xLowInterruptEnable & 0x1) << 0) | ((self.xHighInterruptEnable & 0x1) << 1) | ((self.yLowInterruptEnable & 0x1) << 2) | ((self.yHighInterruptEnable & 0x1) << 3) | ((self.zLowInterruptEvent & 0x1) << 4) | ((self.zHighInterruptEnable & 0x1) << 5) | ((self.latchInterruptRequest & 0x1) << 6) | ((self.andOr & 0x1) << 7)

        def setValue(self, value: int):
            self.xLowInterruptEnable = ((value >> 0) & 0x1)
            self.xHighInterruptEnable = ((value >> 1) & 0x1)
            self.yLowInterruptEnable = ((value >> 2) & 0x1)
            self.yHighInterruptEnable = ((value >> 3) & 0x1)
            self.zLowInterruptEvent = ((value >> 4) & 0x1)
            self.zHighInterruptEnable = ((value >> 5) & 0x1)
            self.latchInterruptRequest = ((value >> 6) & 0x1)
            self.andOr = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "XLowInterruptEnable: {} (offset: 0, width: 1)\r\n".format(self.xLowInterruptEnable)
            retVal += "XHighInterruptEnable: {} (offset: 1, width: 1)\r\n".format(self.xHighInterruptEnable)
            retVal += "YLowInterruptEnable: {} (offset: 2, width: 1)\r\n".format(self.yLowInterruptEnable)
            retVal += "YHighInterruptEnable: {} (offset: 3, width: 1)\r\n".format(self.yHighInterruptEnable)
            retVal += "ZLowInterruptEvent: {} (offset: 4, width: 1)\r\n".format(self.zLowInterruptEvent)
            retVal += "ZHighInterruptEnable: {} (offset: 5, width: 1)\r\n".format(self.zHighInterruptEnable)
            retVal += "LatchInterruptRequest: {} (offset: 6, width: 1)\r\n".format(self.latchInterruptRequest)
            retVal += "AndOr: {} (offset: 7, width: 1)\r\n".format(self.andOr)
            return retVal

    class Int1SrcRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x31, 1, False)
            self.xLow = 0
            self.xHigh = 0
            self.yLow = 0
            self.yHigh = 0
            self.zLow = 0
            self.zHigh = 0
            self.interruptActive = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.xLow & 0x1) << 0) | ((self.xHigh & 0x1) << 1) | ((self.yLow & 0x1) << 2) | ((self.yHigh & 0x1) << 3) | ((self.zLow & 0x1) << 4) | ((self.zHigh & 0x1) << 5) | ((self.interruptActive & 0x1) << 6)

        def setValue(self, value: int):
            self.xLow = ((value >> 0) & 0x1)
            self.xHigh = ((value >> 1) & 0x1)
            self.yLow = ((value >> 2) & 0x1)
            self.yHigh = ((value >> 3) & 0x1)
            self.zLow = ((value >> 4) & 0x1)
            self.zHigh = ((value >> 5) & 0x1)
            self.interruptActive = ((value >> 6) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "XLow: {} (offset: 0, width: 1)\r\n".format(self.xLow)
            retVal += "XHigh: {} (offset: 1, width: 1)\r\n".format(self.xHigh)
            retVal += "YLow: {} (offset: 2, width: 1)\r\n".format(self.yLow)
            retVal += "YHigh: {} (offset: 3, width: 1)\r\n".format(self.yHigh)
            retVal += "ZLow: {} (offset: 4, width: 1)\r\n".format(self.zLow)
            retVal += "ZHigh: {} (offset: 5, width: 1)\r\n".format(self.zHigh)
            retVal += "InterruptActive: {} (offset: 6, width: 1)\r\n".format(self.interruptActive)
            return retVal

    class Int1ThresholdXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x32, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class Int1ThresholdYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x34, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class Int1ThresholdZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x36, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class Int1DurationRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x38, 1, False)
            self.duration = 0
            self.wait = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.duration & 0x7F) << 0) | ((self.wait & 0x1) << 7)

        def setValue(self, value: int):
            self.duration = ((value >> 0) & 0x7F)
            self.wait = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Duration: {} (offset: 0, width: 7)\r\n".format(self.duration)
            retVal += "Wait: {} (offset: 7, width: 1)\r\n".format(self.wait)
            return retVal

    class OutXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xA8, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xAA, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xAC, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

