### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class OperatingModes:
    ConfigMode = 0
    AccelOnly = 1
    MagOnly = 2
    GyroOnly = 3
    AccelMag = 4
    AccelGyro = 5
    MagGyro = 6
    AccelMagGyro = 7
    IMU = 8
    Compass = 9
    MagnetForGyroscope = 10
    NdofFmcOff = 11
    NineDegreesOfFreedom = 12
    
class PowerModes:
    Normal = 0
    LowPower = 1
    Suspend = 2
    
class Bno055Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.chipId = self.ChipIdRegister(self)
        self.registers.append(self.chipId)
        self.accelChipId = self.AccelChipIdRegister(self)
        self.registers.append(self.accelChipId)
        self.magChipId = self.MagChipIdRegister(self)
        self.registers.append(self.magChipId)
        self.gyroChipId = self.GyroChipIdRegister(self)
        self.registers.append(self.gyroChipId)
        self.swRevision = self.SwRevisionRegister(self)
        self.registers.append(self.swRevision)
        self.bootloaderVersion = self.BootloaderVersionRegister(self)
        self.registers.append(self.bootloaderVersion)
        self.pageId = self.PageIdRegister(self)
        self.registers.append(self.pageId)
        self.accelX = self.AccelXRegister(self)
        self.registers.append(self.accelX)
        self.accelY = self.AccelYRegister(self)
        self.registers.append(self.accelY)
        self.accelZ = self.AccelZRegister(self)
        self.registers.append(self.accelZ)
        self.magnetometerX = self.MagnetometerXRegister(self)
        self.registers.append(self.magnetometerX)
        self.magnetometerY = self.MagnetometerYRegister(self)
        self.registers.append(self.magnetometerY)
        self.magnetometerZ = self.MagnetometerZRegister(self)
        self.registers.append(self.magnetometerZ)
        self.gyroX = self.GyroXRegister(self)
        self.registers.append(self.gyroX)
        self.gyroY = self.GyroYRegister(self)
        self.registers.append(self.gyroY)
        self.gyroZ = self.GyroZRegister(self)
        self.registers.append(self.gyroZ)
        self.eulHeading = self.EulHeadingRegister(self)
        self.registers.append(self.eulHeading)
        self.eulRoll = self.EulRollRegister(self)
        self.registers.append(self.eulRoll)
        self.eulPitch = self.EulPitchRegister(self)
        self.registers.append(self.eulPitch)
        self.quaW = self.QuaWRegister(self)
        self.registers.append(self.quaW)
        self.quaX = self.QuaXRegister(self)
        self.registers.append(self.quaX)
        self.quaY = self.QuaYRegister(self)
        self.registers.append(self.quaY)
        self.quaZ = self.QuaZRegister(self)
        self.registers.append(self.quaZ)
        self.linX = self.LinXRegister(self)
        self.registers.append(self.linX)
        self.linY = self.LinYRegister(self)
        self.registers.append(self.linY)
        self.linZ = self.LinZRegister(self)
        self.registers.append(self.linZ)
        self.gravX = self.GravXRegister(self)
        self.registers.append(self.gravX)
        self.gravY = self.GravYRegister(self)
        self.registers.append(self.gravY)
        self.gravZ = self.GravZRegister(self)
        self.registers.append(self.gravZ)
        self.temp = self.TempRegister(self)
        self.registers.append(self.temp)
        self.calibStat = self.CalibStatRegister(self)
        self.registers.append(self.calibStat)
        self.selfTestResult = self.SelfTestResultRegister(self)
        self.registers.append(self.selfTestResult)
        self.interruptStatus = self.InterruptStatusRegister(self)
        self.registers.append(self.interruptStatus)
        self.sysClockStatus = self.SysClockStatusRegister(self)
        self.registers.append(self.sysClockStatus)
        self.sysStatus = self.SysStatusRegister(self)
        self.registers.append(self.sysStatus)
        self.sysErr = self.SysErrRegister(self)
        self.registers.append(self.sysErr)
        self.unitSel = self.UnitSelRegister(self)
        self.registers.append(self.unitSel)
        self.operatingMode = self.OperatingModeRegister(self)
        self.registers.append(self.operatingMode)
        self.powerMode = self.PowerModeRegister(self)
        self.registers.append(self.powerMode)
        self.sysTrigger = self.SysTriggerRegister(self)
        self.registers.append(self.sysTrigger)
        self.tempSource = self.TempSourceRegister(self)
        self.registers.append(self.tempSource)
        self.axisMapConfig = self.AxisMapConfigRegister(self)
        self.registers.append(self.axisMapConfig)
        self.axisMapSign = self.AxisMapSignRegister(self)
        self.registers.append(self.axisMapSign)
        self.accelOffsetX = self.AccelOffsetXRegister(self)
        self.registers.append(self.accelOffsetX)
        self.accelOffsetY = self.AccelOffsetYRegister(self)
        self.registers.append(self.accelOffsetY)
        self.accelOffsetZ = self.AccelOffsetZRegister(self)
        self.registers.append(self.accelOffsetZ)
        self.magnetometerOffsetX = self.MagnetometerOffsetXRegister(self)
        self.registers.append(self.magnetometerOffsetX)
        self.magnetometerOffsetY = self.MagnetometerOffsetYRegister(self)
        self.registers.append(self.magnetometerOffsetY)
        self.magnetometerOffsetZ = self.MagnetometerOffsetZRegister(self)
        self.registers.append(self.magnetometerOffsetZ)
        self.gyroOffsetX = self.GyroOffsetXRegister(self)
        self.registers.append(self.gyroOffsetX)
        self.gyroOffsetY = self.GyroOffsetYRegister(self)
        self.registers.append(self.gyroOffsetY)
        self.gyroOffsetZ = self.GyroOffsetZRegister(self)
        self.registers.append(self.gyroOffsetZ)
        self.accelRadius = self.AccelRadiusRegister(self)
        self.registers.append(self.accelRadius)
        self.magRadius = self.MagRadiusRegister(self)
        self.registers.append(self.magRadius)

    class ChipIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x00, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class AccelChipIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x01, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class MagChipIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x02, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class GyroChipIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x03, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class SwRevisionRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x04, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class BootloaderVersionRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x06, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class PageIdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x07, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class AccelXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x08, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class AccelYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0A, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class AccelZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0C, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0E, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x10, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x12, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x14, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x16, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x18, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class EulHeadingRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1A, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class EulRollRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1C, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class EulPitchRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x1E, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class QuaWRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x20, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class QuaXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x22, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class QuaYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x24, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class QuaZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x26, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class LinXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x28, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class LinYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2A, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class LinZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2C, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GravXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x2E, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GravYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x30, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GravZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x32, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class TempRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x34, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CalibStatRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x35, 1, False)
            self.magCalibStatus = 0
            self.accelCalibStatus = 0
            self.gyroCalibStatus = 0
            self.sysCalibStatus = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.magCalibStatus & 0x3) << 0) | ((self.accelCalibStatus & 0x3) << 2) | ((self.gyroCalibStatus & 0x3) << 4) | ((self.sysCalibStatus & 0x3) << 6)

        def setValue(self, value: int):
            self.magCalibStatus = ((value >> 0) & 0x3)
            self.accelCalibStatus = ((value >> 2) & 0x3)
            self.gyroCalibStatus = ((value >> 4) & 0x3)
            self.sysCalibStatus = ((value >> 6) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "MagCalibStatus: {} (offset: 0, width: 2)\r\n".format(self.magCalibStatus)
            retVal += "AccelCalibStatus: {} (offset: 2, width: 2)\r\n".format(self.accelCalibStatus)
            retVal += "GyroCalibStatus: {} (offset: 4, width: 2)\r\n".format(self.gyroCalibStatus)
            retVal += "SysCalibStatus: {} (offset: 6, width: 2)\r\n".format(self.sysCalibStatus)
            return retVal

    class SelfTestResultRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x36, 1, False)
            self.accel = 0
            self.mag = 0
            self.gyro = 0
            self.mcu = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.accel & 0x1) << 0) | ((self.mag & 0x1) << 1) | ((self.gyro & 0x1) << 2) | ((self.mcu & 0x1) << 3)

        def setValue(self, value: int):
            self.accel = ((value >> 0) & 0x1)
            self.mag = ((value >> 1) & 0x1)
            self.gyro = ((value >> 2) & 0x1)
            self.mcu = ((value >> 3) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Accel: {} (offset: 0, width: 1)\r\n".format(self.accel)
            retVal += "Mag: {} (offset: 1, width: 1)\r\n".format(self.mag)
            retVal += "Gyro: {} (offset: 2, width: 1)\r\n".format(self.gyro)
            retVal += "Mcu: {} (offset: 3, width: 1)\r\n".format(self.mcu)
            return retVal

    class InterruptStatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x37, 1, False)
            self.gyroAnyMotion = 0
            self.gyroHighRate = 0
            self.accelHighG = 0
            self.accelAnyMotion = 0
            self.accelNoMotion = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.gyroAnyMotion & 0x1) << 2) | ((self.gyroHighRate & 0x1) << 3) | ((self.accelHighG & 0x1) << 5) | ((self.accelAnyMotion & 0x1) << 6) | ((self.accelNoMotion & 0x1) << 7)

        def setValue(self, value: int):
            self.gyroAnyMotion = ((value >> 2) & 0x1)
            self.gyroHighRate = ((value >> 3) & 0x1)
            self.accelHighG = ((value >> 5) & 0x1)
            self.accelAnyMotion = ((value >> 6) & 0x1)
            self.accelNoMotion = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "GyroAnyMotion: {} (offset: 2, width: 1)\r\n".format(self.gyroAnyMotion)
            retVal += "GyroHighRate: {} (offset: 3, width: 1)\r\n".format(self.gyroHighRate)
            retVal += "AccelHighG: {} (offset: 5, width: 1)\r\n".format(self.accelHighG)
            retVal += "AccelAnyMotion: {} (offset: 6, width: 1)\r\n".format(self.accelAnyMotion)
            retVal += "AccelNoMotion: {} (offset: 7, width: 1)\r\n".format(self.accelNoMotion)
            return retVal

    class SysClockStatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x38, 1, False)
            self.mainClock = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.mainClock & 0x1) << 0)

        def setValue(self, value: int):
            self.mainClock = ((value >> 0) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "MainClock: {} (offset: 0, width: 1)\r\n".format(self.mainClock)
            return retVal

    class SysStatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x39, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class SysErrRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3a, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class UnitSelRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3b, 1, False)
            self.accel = 0
            self.gyro = 0
            self.eular = 0
            self.temp = 0
            self.orientationMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.accel & 0x1) << 0) | ((self.gyro & 0x1) << 1) | ((self.eular & 0x1) << 2) | ((self.temp & 0x1) << 4) | ((self.orientationMode & 0x1) << 7)

        def setValue(self, value: int):
            self.accel = ((value >> 0) & 0x1)
            self.gyro = ((value >> 1) & 0x1)
            self.eular = ((value >> 2) & 0x1)
            self.temp = ((value >> 4) & 0x1)
            self.orientationMode = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Accel: {} (offset: 0, width: 1)\r\n".format(self.accel)
            retVal += "Gyro: {} (offset: 1, width: 1)\r\n".format(self.gyro)
            retVal += "Eular: {} (offset: 2, width: 1)\r\n".format(self.eular)
            retVal += "Temp: {} (offset: 4, width: 1)\r\n".format(self.temp)
            retVal += "OrientationMode: {} (offset: 7, width: 1)\r\n".format(self.orientationMode)
            return retVal

    class OperatingModeRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3d, 1, False)
            self.operatingMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.operatingMode & 0xF) << 0)

        def setValue(self, value: int):
            self.operatingMode = ((value >> 0) & 0xF)

        def __str__(self):
            retVal = ""
            retVal += "OperatingMode: {} (offset: 0, width: 4)\r\n".format(self.operatingMode)
            return retVal

    class PowerModeRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3e, 1, False)
            self.powerMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.powerMode & 0x3) << 0)

        def setValue(self, value: int):
            self.powerMode = ((value >> 0) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "PowerMode: {} (offset: 0, width: 2)\r\n".format(self.powerMode)
            return retVal

    class SysTriggerRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x3f, 1, False)
            self.selfTest = 0
            self.resetSys = 0
            self.resetInt = 0
            self.clockSel = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.selfTest & 0x1) << 0) | ((self.resetSys & 0x1) << 5) | ((self.resetInt & 0x1) << 6) | ((self.clockSel & 0x1) << 7)

        def setValue(self, value: int):
            self.selfTest = ((value >> 0) & 0x1)
            self.resetSys = ((value >> 5) & 0x1)
            self.resetInt = ((value >> 6) & 0x1)
            self.clockSel = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "SelfTest: {} (offset: 0, width: 1)\r\n".format(self.selfTest)
            retVal += "ResetSys: {} (offset: 5, width: 1)\r\n".format(self.resetSys)
            retVal += "ResetInt: {} (offset: 6, width: 1)\r\n".format(self.resetInt)
            retVal += "ClockSel: {} (offset: 7, width: 1)\r\n".format(self.clockSel)
            return retVal

    class TempSourceRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x40, 1, False)
            self.source = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.source & 0x3) << 0)

        def setValue(self, value: int):
            self.source = ((value >> 0) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "Source: {} (offset: 0, width: 2)\r\n".format(self.source)
            return retVal

    class AxisMapConfigRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x41, 1, False)
            self.x = 0
            self.y = 0
            self.z = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.x & 0x3) << 0) | ((self.y & 0x3) << 2) | ((self.z & 0x3) << 4)

        def setValue(self, value: int):
            self.x = ((value >> 0) & 0x3)
            self.y = ((value >> 2) & 0x3)
            self.z = ((value >> 4) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "X: {} (offset: 0, width: 2)\r\n".format(self.x)
            retVal += "Y: {} (offset: 2, width: 2)\r\n".format(self.y)
            retVal += "Z: {} (offset: 4, width: 2)\r\n".format(self.z)
            return retVal

    class AxisMapSignRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x41, 1, False)
            self.x = 0
            self.y = 0
            self.z = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.x & 0x1) << 0) | ((self.y & 0x1) << 1) | ((self.z & 0x1) << 2)

        def setValue(self, value: int):
            self.x = ((value >> 0) & 0x1)
            self.y = ((value >> 1) & 0x1)
            self.z = ((value >> 2) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "X: {} (offset: 0, width: 1)\r\n".format(self.x)
            retVal += "Y: {} (offset: 1, width: 1)\r\n".format(self.y)
            retVal += "Z: {} (offset: 2, width: 1)\r\n".format(self.z)
            return retVal

    class AccelOffsetXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x55, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class AccelOffsetYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x57, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class AccelOffsetZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x59, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerOffsetXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x5B, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerOffsetYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x5D, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagnetometerOffsetZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x5F, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroOffsetXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x61, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroOffsetYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x63, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class GyroOffsetZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x65, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class AccelRadiusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x67, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class MagRadiusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x69, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

