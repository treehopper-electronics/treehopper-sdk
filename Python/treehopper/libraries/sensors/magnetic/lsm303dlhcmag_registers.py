### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class MagDataRates:
    Hz_0_75 = 0
    Hz_1_5 = 1
    Hz_3_0 = 2
    Hz_7_5 = 3
    Hz_15 = 4
    Hz_30 = 5
    Hz_75 = 6
    Hz_100 = 7
    
class GainConfigurations:
    gauss_1_3 = 1
    gauss_1_9 = 2
    gauss_2_5 = 3
    gauss_4_0 = 4
    gauss_4_7 = 5
    gauss_5_6 = 6
    gauss_8_1 = 7
    
class MagSensorModes:
    ContinuousConversion = 0
    SingleConversion = 1
    PowerDown = 2
    
class Lsm303dlhcMagRegisters(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.tempOut = self.TempOutRegister(self)
        self.registers.append(self.tempOut)
        self.sr = self.SrRegister(self)
        self.registers.append(self.sr)
        self.cra = self.CraRegister(self)
        self.registers.append(self.cra)
        self.crb = self.CrbRegister(self)
        self.registers.append(self.crb)
        self.mr = self.MrRegister(self)
        self.registers.append(self.mr)
        self.outX = self.OutXRegister(self)
        self.registers.append(self.outX)
        self.outY = self.OutYRegister(self)
        self.registers.append(self.outY)
        self.outZ = self.OutZRegister(self)
        self.registers.append(self.outZ)

    class TempOutRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x05, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFF) << 4)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 4) & 0xFFF, 12)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 4, width: 12)\r\n".format(self.value)
            return retVal

    class SrRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x09, 1, False)
            self.drdy = 0
            self.registerLock = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.drdy & 0x1) << 0) | ((self.registerLock & 0x1) << 1)

        def setValue(self, value: int):
            self.drdy = ((value >> 0) & 0x1)
            self.registerLock = ((value >> 1) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Drdy: {} (offset: 0, width: 1)\r\n".format(self.drdy)
            retVal += "RegisterLock: {} (offset: 1, width: 1)\r\n".format(self.registerLock)
            return retVal

    class CraRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x80, 1, False)
            self.magDataRate = 0
            self.tempEnable = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.magDataRate & 0x7) << 2) | ((self.tempEnable & 0x1) << 7)

        def setValue(self, value: int):
            self.magDataRate = ((value >> 2) & 0x7)
            self.tempEnable = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "MagDataRate: {} (offset: 2, width: 3)\r\n".format(self.magDataRate)
            retVal += "TempEnable: {} (offset: 7, width: 1)\r\n".format(self.tempEnable)
            return retVal

    class CrbRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x81, 1, False)
            self.gainConfiguration = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.gainConfiguration & 0x7) << 5)

        def setValue(self, value: int):
            self.gainConfiguration = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "GainConfiguration: {} (offset: 5, width: 3)\r\n".format(self.gainConfiguration)
            return retVal

    class MrRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x82, 1, False)
            self.magSensorMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.magSensorMode & 0x3) << 0)

        def setValue(self, value: int):
            self.magSensorMode = ((value >> 0) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "MagSensorMode: {} (offset: 0, width: 2)\r\n".format(self.magSensorMode)
            return retVal

    class OutXRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x83, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutYRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x85, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class OutZRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x87, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

