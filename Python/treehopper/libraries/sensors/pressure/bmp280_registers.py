### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class Oversamplings:
    Skipped = 0
    Oversampling_x1 = 1
    Oversampling_x2 = 2
    Oversampling_x4 = 3
    Oversampling_x8 = 4
    Oversampling_x16 = 5
    
class Modes:
    Sleep = 0
    Forced = 1
    Normal = 3
    
class OversamplingPressures:
    Skipped = 0
    Oversampling_x1 = 1
    Oversampling_x2 = 2
    Oversampling_x4 = 3
    Oversampling_x8 = 4
    Oversampling_x16 = 5
    
class OversamplingTemperatures:
    Skipped = 0
    Oversampling_x1 = 1
    Oversampling_x2 = 2
    Oversampling_x4 = 3
    Oversampling_x8 = 4
    Oversampling_x16 = 5
    
class Filters:
    FilterOff = 0
    Filter2 = 1
    Filter4 = 2
    Filter8 = 3
    Filter16 = 4
    
class TStandbies:
    Ms_0_5 = 0
    Ms_62_5 = 1
    Ms_125 = 2
    Ms_250 = 3
    Ms_500 = 4
    Ms_1000 = 5
    Ms_10 = 6
    Ms_20 = 7
    
class Bmp280Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.t1 = self.T1Register(self)
        self.registers.append(self.t1)
        self.t2 = self.T2Register(self)
        self.registers.append(self.t2)
        self.t3 = self.T3Register(self)
        self.registers.append(self.t3)
        self.p1 = self.P1Register(self)
        self.registers.append(self.p1)
        self.p2 = self.P2Register(self)
        self.registers.append(self.p2)
        self.p3 = self.P3Register(self)
        self.registers.append(self.p3)
        self.p4 = self.P4Register(self)
        self.registers.append(self.p4)
        self.p5 = self.P5Register(self)
        self.registers.append(self.p5)
        self.p6 = self.P6Register(self)
        self.registers.append(self.p6)
        self.p7 = self.P7Register(self)
        self.registers.append(self.p7)
        self.p8 = self.P8Register(self)
        self.registers.append(self.p8)
        self.p9 = self.P9Register(self)
        self.registers.append(self.p9)
        self.h1 = self.H1Register(self)
        self.registers.append(self.h1)
        self.id = self.IdRegister(self)
        self.registers.append(self.id)
        self.reset = self.ResetRegister(self)
        self.registers.append(self.reset)
        self.h2 = self.H2Register(self)
        self.registers.append(self.h2)
        self.h3 = self.H3Register(self)
        self.registers.append(self.h3)
        self.h4 = self.H4Register(self)
        self.registers.append(self.h4)
        self.h4h5 = self.H4h5Register(self)
        self.registers.append(self.h4h5)
        self.h5 = self.H5Register(self)
        self.registers.append(self.h5)
        self.h6 = self.H6Register(self)
        self.registers.append(self.h6)
        self.ctrlHumidity = self.CtrlHumidityRegister(self)
        self.registers.append(self.ctrlHumidity)
        self.status = self.StatusRegister(self)
        self.registers.append(self.status)
        self.ctrlMeasure = self.CtrlMeasureRegister(self)
        self.registers.append(self.ctrlMeasure)
        self.config = self.ConfigRegister(self)
        self.registers.append(self.config)
        self.pressure = self.PressureRegister(self)
        self.registers.append(self.pressure)
        self.temperature = self.TemperatureRegister(self)
        self.registers.append(self.temperature)
        self.humidity = self.HumidityRegister(self)
        self.registers.append(self.humidity)

    class T1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x88, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class T2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x8a, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class T3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x8c, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x8e, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x90, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x92, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P4Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x94, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P5Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x96, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P6Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x98, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P7Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x9a, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P8Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x9c, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class P9Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x9e, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class H1Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xa1, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class IdRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xd0, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class ResetRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe0, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class H2Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe1, 2, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFFFF, 16)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

    class H3Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe3, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class H4Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe4, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class H4h5Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe5, 1, False)
            self.h4Low = 0
            self.h5Low = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.h4Low & 0xF) << 0) | ((self.h5Low & 0xF) << 4)

        def setValue(self, value: int):
            self.h4Low = ((value >> 0) & 0xF)
            self.h5Low = ((value >> 4) & 0xF)

        def __str__(self):
            retVal = ""
            retVal += "H4Low: {} (offset: 0, width: 4)\r\n".format(self.h4Low)
            retVal += "H5Low: {} (offset: 4, width: 4)\r\n".format(self.h5Low)
            return retVal

    class H5Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe6, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class H6Register(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xe7, 1, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFF) << 0)

        def setValue(self, value: int):
            self.value = sign_extend((value >> 0) & 0xFF, 8)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 8)\r\n".format(self.value)
            return retVal

    class CtrlHumidityRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xf2, 1, False)
            self.oversampling = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.oversampling & 0x7) << 0)

        def setValue(self, value: int):
            self.oversampling = ((value >> 0) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Oversampling: {} (offset: 0, width: 3)\r\n".format(self.oversampling)
            return retVal

    class StatusRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xf3, 1, False)
            self.imUpdate = 0
            self.measuring = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.imUpdate & 0x1) << 0) | ((self.measuring & 0x1) << 3)

        def setValue(self, value: int):
            self.imUpdate = ((value >> 0) & 0x1)
            self.measuring = ((value >> 3) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "ImUpdate: {} (offset: 0, width: 1)\r\n".format(self.imUpdate)
            retVal += "Measuring: {} (offset: 3, width: 1)\r\n".format(self.measuring)
            return retVal

    class CtrlMeasureRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xf4, 1, False)
            self.mode = 0
            self.oversamplingPressure = 0
            self.oversamplingTemperature = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.mode & 0x3) << 0) | ((self.oversamplingPressure & 0x7) << 2) | ((self.oversamplingTemperature & 0x7) << 5)

        def setValue(self, value: int):
            self.mode = ((value >> 0) & 0x3)
            self.oversamplingPressure = ((value >> 2) & 0x7)
            self.oversamplingTemperature = ((value >> 5) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Mode: {} (offset: 0, width: 2)\r\n".format(self.mode)
            retVal += "OversamplingPressure: {} (offset: 2, width: 3)\r\n".format(self.oversamplingPressure)
            retVal += "OversamplingTemperature: {} (offset: 5, width: 3)\r\n".format(self.oversamplingTemperature)
            return retVal

    class ConfigRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xf5, 1, False)
            self.enable3Wire = 0
            self.filter = 0
            self.tStandby = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.enable3Wire & 0x1) << 0) | ((self.filter & 0x7) << 1) | ((self.tStandby & 0x7) << 4)

        def setValue(self, value: int):
            self.enable3Wire = ((value >> 0) & 0x1)
            self.filter = ((value >> 1) & 0x7)
            self.tStandby = ((value >> 4) & 0x7)

        def __str__(self):
            retVal = ""
            retVal += "Enable3Wire: {} (offset: 0, width: 1)\r\n".format(self.enable3Wire)
            retVal += "Filter: {} (offset: 1, width: 3)\r\n".format(self.filter)
            retVal += "TStandby: {} (offset: 4, width: 3)\r\n".format(self.tStandby)
            return retVal

    class PressureRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xf7, 3, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFFF) << 4)

        def setValue(self, value: int):
            self.value = ((value >> 4) & 0xFFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 4, width: 20)\r\n".format(self.value)
            return retVal

    class TemperatureRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xfa, 3, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFFF) << 4)

        def setValue(self, value: int):
            self.value = ((value >> 4) & 0xFFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 4, width: 20)\r\n".format(self.value)
            return retVal

    class HumidityRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0xfd, 2, True)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0xFFFF) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0xFFFF)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 16)\r\n".format(self.value)
            return retVal

