### This file was auto-generated by RegisterGenerator. Any changes to it will be overwritten!
from treehopper.libraries.register_manager_adapter import RegisterManagerAdapter
from treehopper.libraries.register_manager import RegisterManager, Register, sign_extend


class FastAndStills:
    shortTime = 0
    normalTime = 1
    
class ShortDelays:
    
class Tmc5160Registers(RegisterManager):
    def __init__(self, manager: RegisterManagerAdapter):
        RegisterManager.__init__(self, manager, True)
        self.gConf = self.GConfRegister(self)
        self.registers.append(self.gConf)
        self.gstat = self.GstatRegister(self)
        self.registers.append(self.gstat)
        self.ifCnt = self.IfCntRegister(self)
        self.registers.append(self.ifCnt)
        self.nodeConf = self.NodeConfRegister(self)
        self.registers.append(self.nodeConf)
        self.ioIn = self.IoInRegister(self)
        self.registers.append(self.ioIn)
        self.output = self.OutputRegister(self)
        self.registers.append(self.output)
        self.xCompare = self.XCompareRegister(self)
        self.registers.append(self.xCompare)
        self.otpProg = self.OtpProgRegister(self)
        self.registers.append(self.otpProg)
        self.otpRead = self.OtpReadRegister(self)
        self.registers.append(self.otpRead)
        self.factoryConf = self.FactoryConfRegister(self)
        self.registers.append(self.factoryConf)
        self.shortConf = self.ShortConfRegister(self)
        self.registers.append(self.shortConf)
        self.drvConf = self.DrvConfRegister(self)
        self.registers.append(self.drvConf)
        self.globalScaler = self.GlobalScalerRegister(self)
        self.registers.append(self.globalScaler)
        self.offsetRead = self.OffsetReadRegister(self)
        self.registers.append(self.offsetRead)
        self.iHoldIRun = self.IHoldIRunRegister(self)
        self.registers.append(self.iHoldIRun)

    class GConfRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x00, 4, False)
            self.recalibrate = 0
            self.fastAndStill = 0
            self.enPwmMode = 0
            self.multiStepFilt = 0
            self.shaft = 0
            self.daig0Error = 0
            self.diag0Otpw = 0
            self.diag0Stall = 0
            self.diag1Stall = 0
            self.diag1Dir = 0
            self.diag1Index = 0
            self.diag1OnState = 0
            self.diag1StepsSkipped = 0
            self.diag0IntPushpull = 0
            self.diag1PoscompPushpull = 0
            self.smallHysteresis = 0
            self.stopEnable = 0
            self.directMode = 0
            self.testMode = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.recalibrate & 0x1) << 0) | ((self.fastAndStill & 0x1) << 1) | ((self.enPwmMode & 0x1) << 2) | ((self.multiStepFilt & 0x1) << 3) | ((self.shaft & 0x1) << 4) | ((self.daig0Error & 0x1) << 5) | ((self.diag0Otpw & 0x1) << 6) | ((self.diag0Stall & 0x1) << 7) | ((self.diag1Stall & 0x1) << 8) | ((self.diag1Dir & 0x1) << 9) | ((self.diag1Index & 0x1) << 10) | ((self.diag1OnState & 0x1) << 11) | ((self.diag1StepsSkipped & 0x1) << 12) | ((self.diag0IntPushpull & 0x1) << 13) | ((self.diag1PoscompPushpull & 0x1) << 14) | ((self.smallHysteresis & 0x1) << 15) | ((self.stopEnable & 0x1) << 16) | ((self.directMode & 0x1) << 17) | ((self.testMode & 0x1) << 18)

        def setValue(self, value: int):
            self.recalibrate = ((value >> 0) & 0x1)
            self.fastAndStill = ((value >> 1) & 0x1)
            self.enPwmMode = ((value >> 2) & 0x1)
            self.multiStepFilt = ((value >> 3) & 0x1)
            self.shaft = ((value >> 4) & 0x1)
            self.daig0Error = ((value >> 5) & 0x1)
            self.diag0Otpw = ((value >> 6) & 0x1)
            self.diag0Stall = ((value >> 7) & 0x1)
            self.diag1Stall = ((value >> 8) & 0x1)
            self.diag1Dir = ((value >> 9) & 0x1)
            self.diag1Index = ((value >> 10) & 0x1)
            self.diag1OnState = ((value >> 11) & 0x1)
            self.diag1StepsSkipped = ((value >> 12) & 0x1)
            self.diag0IntPushpull = ((value >> 13) & 0x1)
            self.diag1PoscompPushpull = ((value >> 14) & 0x1)
            self.smallHysteresis = ((value >> 15) & 0x1)
            self.stopEnable = ((value >> 16) & 0x1)
            self.directMode = ((value >> 17) & 0x1)
            self.testMode = ((value >> 18) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Recalibrate: {} (offset: 0, width: 1)\r\n".format(self.recalibrate)
            retVal += "FastAndStill: {} (offset: 1, width: 1)\r\n".format(self.fastAndStill)
            retVal += "EnPwmMode: {} (offset: 2, width: 1)\r\n".format(self.enPwmMode)
            retVal += "MultiStepFilt: {} (offset: 3, width: 1)\r\n".format(self.multiStepFilt)
            retVal += "Shaft: {} (offset: 4, width: 1)\r\n".format(self.shaft)
            retVal += "Daig0Error: {} (offset: 5, width: 1)\r\n".format(self.daig0Error)
            retVal += "Diag0Otpw: {} (offset: 6, width: 1)\r\n".format(self.diag0Otpw)
            retVal += "Diag0Stall: {} (offset: 7, width: 1)\r\n".format(self.diag0Stall)
            retVal += "Diag1Stall: {} (offset: 8, width: 1)\r\n".format(self.diag1Stall)
            retVal += "Diag1Dir: {} (offset: 9, width: 1)\r\n".format(self.diag1Dir)
            retVal += "Diag1Index: {} (offset: 10, width: 1)\r\n".format(self.diag1Index)
            retVal += "Diag1OnState: {} (offset: 11, width: 1)\r\n".format(self.diag1OnState)
            retVal += "Diag1StepsSkipped: {} (offset: 12, width: 1)\r\n".format(self.diag1StepsSkipped)
            retVal += "Diag0IntPushpull: {} (offset: 13, width: 1)\r\n".format(self.diag0IntPushpull)
            retVal += "Diag1PoscompPushpull: {} (offset: 14, width: 1)\r\n".format(self.diag1PoscompPushpull)
            retVal += "SmallHysteresis: {} (offset: 15, width: 1)\r\n".format(self.smallHysteresis)
            retVal += "StopEnable: {} (offset: 16, width: 1)\r\n".format(self.stopEnable)
            retVal += "DirectMode: {} (offset: 17, width: 1)\r\n".format(self.directMode)
            retVal += "TestMode: {} (offset: 18, width: 1)\r\n".format(self.testMode)
            return retVal

    class GstatRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x01, 4, False)
            self.reset = 0
            self.drvErr = 0
            self.uvCp = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.reset & 0x1) << 0) | ((self.drvErr & 0x1) << 1) | ((self.uvCp & 0x1) << 2)

        def setValue(self, value: int):
            self.reset = ((value >> 0) & 0x1)
            self.drvErr = ((value >> 1) & 0x1)
            self.uvCp = ((value >> 2) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "Reset: {} (offset: 0, width: 1)\r\n".format(self.reset)
            retVal += "DrvErr: {} (offset: 1, width: 1)\r\n".format(self.drvErr)
            retVal += "UvCp: {} (offset: 2, width: 1)\r\n".format(self.uvCp)
            return retVal

    class IfCntRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x02, 4, False)
            self.count = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.count & 0xFF) << 0)

        def setValue(self, value: int):
            self.count = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Count: {} (offset: 0, width: 8)\r\n".format(self.count)
            return retVal

    class NodeConfRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x03, 4, False)
            self.nodeAddr = 0
            self.sendDelay = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.nodeAddr & 0xFF) << 0) | ((self.sendDelay & 0xF) << 8)

        def setValue(self, value: int):
            self.nodeAddr = ((value >> 0) & 0xFF)
            self.sendDelay = ((value >> 8) & 0xF)

        def __str__(self):
            retVal = ""
            retVal += "NodeAddr: {} (offset: 0, width: 8)\r\n".format(self.nodeAddr)
            retVal += "SendDelay: {} (offset: 8, width: 4)\r\n".format(self.sendDelay)
            return retVal

    class IoInRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x04, 4, False)
            self.reflStep = 0
            self.refrDir = 0
            self.encbDcenCfg4 = 0
            self.drvEnn = 0
            self.encNDcoCfg6 = 0
            self.sdMode = 0
            self.swCompIn = 0
            self.version = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.reflStep & 0x1) << 0) | ((self.refrDir & 0x1) << 1) | ((self.encbDcenCfg4 & 0x1) << 2) | ((self.drvEnn & 0x1) << 3) | ((self.encNDcoCfg6 & 0x1) << 4) | ((self.sdMode & 0x1) << 5) | ((self.swCompIn & 0x1) << 6) | ((self.version & 0xFF) << 16)

        def setValue(self, value: int):
            self.reflStep = ((value >> 0) & 0x1)
            self.refrDir = ((value >> 1) & 0x1)
            self.encbDcenCfg4 = ((value >> 2) & 0x1)
            self.drvEnn = ((value >> 3) & 0x1)
            self.encNDcoCfg6 = ((value >> 4) & 0x1)
            self.sdMode = ((value >> 5) & 0x1)
            self.swCompIn = ((value >> 6) & 0x1)
            self.version = ((value >> 16) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "ReflStep: {} (offset: 0, width: 1)\r\n".format(self.reflStep)
            retVal += "RefrDir: {} (offset: 1, width: 1)\r\n".format(self.refrDir)
            retVal += "EncbDcenCfg4: {} (offset: 2, width: 1)\r\n".format(self.encbDcenCfg4)
            retVal += "DrvEnn: {} (offset: 3, width: 1)\r\n".format(self.drvEnn)
            retVal += "EncNDcoCfg6: {} (offset: 4, width: 1)\r\n".format(self.encNDcoCfg6)
            retVal += "SdMode: {} (offset: 5, width: 1)\r\n".format(self.sdMode)
            retVal += "SwCompIn: {} (offset: 6, width: 1)\r\n".format(self.swCompIn)
            retVal += "Version: {} (offset: 16, width: 8)\r\n".format(self.version)
            return retVal

    class OutputRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x04, 4, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0x0) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0x0)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 32)\r\n".format(self.value)
            return retVal

    class XCompareRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x05, 4, False)
            self.value = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.value & 0x0) << 0)

        def setValue(self, value: int):
            self.value = ((value >> 0) & 0x0)

        def __str__(self):
            retVal = ""
            retVal += "Value: {} (offset: 0, width: 32)\r\n".format(self.value)
            return retVal

    class OtpProgRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x06, 4, False)
            self.otpbit = 0
            self.otpbyte = 0
            self.otpmagic = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.otpbit & 0x7) << 0) | ((self.otpbyte & 0x3) << 3) | ((self.otpmagic & 0xFF) << 3)

        def setValue(self, value: int):
            self.otpbit = ((value >> 0) & 0x7)
            self.otpbyte = ((value >> 3) & 0x3)
            self.otpmagic = ((value >> 3) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Otpbit: {} (offset: 0, width: 3)\r\n".format(self.otpbit)
            retVal += "Otpbyte: {} (offset: 3, width: 2)\r\n".format(self.otpbyte)
            retVal += "Otpmagic: {} (offset: 3, width: 8)\r\n".format(self.otpmagic)
            return retVal

    class OtpReadRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x07, 4, False)
            self.otpbit = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.otpbit & 0xFF) << 0)

        def setValue(self, value: int):
            self.otpbit = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "Otpbit: {} (offset: 0, width: 8)\r\n".format(self.otpbit)
            return retVal

    class FactoryConfRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x08, 4, False)
            self.fclktrim = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.fclktrim & 0x1F) << 0)

        def setValue(self, value: int):
            self.fclktrim = ((value >> 0) & 0x1F)

        def __str__(self):
            retVal = ""
            retVal += "Fclktrim: {} (offset: 0, width: 5)\r\n".format(self.fclktrim)
            return retVal

    class ShortConfRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x09, 4, False)
            self.s2vsLevel = 0
            self.s2gLevel = 0
            self.shortFilter = 0
            self.shortDelay = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.s2vsLevel & 0xF) << 0) | ((self.s2gLevel & 0xF) << 5) | ((self.shortFilter & 0x3) << 5) | ((self.shortDelay & 0x1) << 7)

        def setValue(self, value: int):
            self.s2vsLevel = ((value >> 0) & 0xF)
            self.s2gLevel = ((value >> 5) & 0xF)
            self.shortFilter = ((value >> 5) & 0x3)
            self.shortDelay = ((value >> 7) & 0x1)

        def __str__(self):
            retVal = ""
            retVal += "S2vsLevel: {} (offset: 0, width: 4)\r\n".format(self.s2vsLevel)
            retVal += "S2gLevel: {} (offset: 5, width: 4)\r\n".format(self.s2gLevel)
            retVal += "ShortFilter: {} (offset: 5, width: 2)\r\n".format(self.shortFilter)
            retVal += "ShortDelay: {} (offset: 7, width: 1)\r\n".format(self.shortDelay)
            return retVal

    class DrvConfRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0a, 4, False)
            self.bbmTime = 0
            self.bbmClks = 0
            self.otSelect = 0
            self.drvStrength = 0
            self.filtISense = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.bbmTime & 0x1F) << 0) | ((self.bbmClks & 0xF) << 4) | ((self.otSelect & 0x3) << 8) | ((self.drvStrength & 0x3) << 2) | ((self.filtISense & 0x3) << 2)

        def setValue(self, value: int):
            self.bbmTime = ((value >> 0) & 0x1F)
            self.bbmClks = ((value >> 4) & 0xF)
            self.otSelect = ((value >> 8) & 0x3)
            self.drvStrength = ((value >> 2) & 0x3)
            self.filtISense = ((value >> 2) & 0x3)

        def __str__(self):
            retVal = ""
            retVal += "BbmTime: {} (offset: 0, width: 5)\r\n".format(self.bbmTime)
            retVal += "BbmClks: {} (offset: 4, width: 4)\r\n".format(self.bbmClks)
            retVal += "OtSelect: {} (offset: 8, width: 2)\r\n".format(self.otSelect)
            retVal += "DrvStrength: {} (offset: 2, width: 2)\r\n".format(self.drvStrength)
            retVal += "FiltISense: {} (offset: 2, width: 2)\r\n".format(self.filtISense)
            return retVal

    class GlobalScalerRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0b, 4, False)
            self.globalScaler = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.globalScaler & 0xFF) << 0)

        def setValue(self, value: int):
            self.globalScaler = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "GlobalScaler: {} (offset: 0, width: 8)\r\n".format(self.globalScaler)
            return retVal

    class OffsetReadRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x0c, 4, False)
            self.offsetCalibrationResultPhaseB = 0
            self.offsetCalibrationResultPhaseA = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.offsetCalibrationResultPhaseB & 0xFF) << 0) | ((self.offsetCalibrationResultPhaseA & 0xFF) << 0)

        def setValue(self, value: int):
            self.offsetCalibrationResultPhaseB = ((value >> 0) & 0xFF)
            self.offsetCalibrationResultPhaseA = ((value >> 0) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "OffsetCalibrationResultPhaseB: {} (offset: 0, width: 8)\r\n".format(self.offsetCalibrationResultPhaseB)
            retVal += "OffsetCalibrationResultPhaseA: {} (offset: 0, width: 8)\r\n".format(self.offsetCalibrationResultPhaseA)
            return retVal

    class IHoldIRunRegister(Register):
        def __init__(self, reg_manager: RegisterManager):
            Register.__init__(self, reg_manager, 0x10, 4, False)
            self.iHold = 0
            self.iRun = 0
            self.iHoldDelay = 0


        def read(self):
            self._manager.read(self)
            return self
            
        def getValue(self):
            return ((self.iHold & 0x1F) << 0) | ((self.iRun & 0xFF) << 4) | ((self.iHoldDelay & 0xFF) << 12)

        def setValue(self, value: int):
            self.iHold = ((value >> 0) & 0x1F)
            self.iRun = ((value >> 4) & 0xFF)
            self.iHoldDelay = ((value >> 12) & 0xFF)

        def __str__(self):
            retVal = ""
            retVal += "IHold: {} (offset: 0, width: 5)\r\n".format(self.iHold)
            retVal += "IRun: {} (offset: 4, width: 8)\r\n".format(self.iRun)
            retVal += "IHoldDelay: {} (offset: 12, width: 8)\r\n".format(self.iHoldDelay)
            return retVal

